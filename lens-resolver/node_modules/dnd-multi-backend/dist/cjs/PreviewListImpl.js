"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PreviewListImpl = void 0;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }

function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }

var _previews = /*#__PURE__*/new WeakMap();

class PreviewListImpl {
  /*private*/
  constructor() {
    _classPrivateFieldInitSpec(this, _previews, {
      writable: true,
      value: void 0
    });

    _defineProperty(this, "register", preview => {
      _classPrivateFieldGet(this, _previews).push(preview);
    });

    _defineProperty(this, "unregister", preview => {
      let index;

      while ((index = _classPrivateFieldGet(this, _previews).indexOf(preview)) !== -1) {
        _classPrivateFieldGet(this, _previews).splice(index, 1);
      }
    });

    _defineProperty(this, "backendChanged", backend => {
      for (const preview of _classPrivateFieldGet(this, _previews)) {
        preview.backendChanged(backend);
      }
    });

    _classPrivateFieldSet(this, _previews, []);
  }

}

exports.PreviewListImpl = PreviewListImpl;