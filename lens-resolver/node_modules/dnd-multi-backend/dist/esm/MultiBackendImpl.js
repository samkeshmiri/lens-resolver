function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }

function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }

import { PreviewListImpl } from './PreviewListImpl';

var _current = /*#__PURE__*/new WeakMap();

var _previews = /*#__PURE__*/new WeakMap();

var _backends = /*#__PURE__*/new WeakMap();

var _backendsList = /*#__PURE__*/new WeakMap();

var _nodes = /*#__PURE__*/new WeakMap();

var _createBackend = /*#__PURE__*/new WeakMap();

var _addEventListeners = /*#__PURE__*/new WeakMap();

var _removeEventListeners = /*#__PURE__*/new WeakMap();

var _backendSwitcher = /*#__PURE__*/new WeakMap();

var _callBackend = /*#__PURE__*/new WeakMap();

var _connectBackend = /*#__PURE__*/new WeakMap();

export class MultiBackendImpl {
  /*private*/

  /*private*/

  /*private*/

  /*private*/

  /*private*/
  constructor(_manager, _context, _options) {
    _classPrivateFieldInitSpec(this, _current, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _previews, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _backends, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _backendsList, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _nodes, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _createBackend, {
      writable: true,
      value: (manager, context, backend) => {
        var _backend$preview, _backend$skipDispatch;

        if (!backend.backend) {
          throw new Error("You must specify a 'backend' property in your Backend entry: ".concat(JSON.stringify(backend)));
        }

        const instance = backend.backend(manager, context, backend.options);
        let id = backend.id; // Try to infer an `id` if one doesn't exist

        const inferName = !backend.id && instance && instance.constructor;

        if (inferName) {
          id = instance.constructor.name;
        }

        if (!id) {
          throw new Error("You must specify an 'id' property in your Backend entry: ".concat(JSON.stringify(backend), "\n        see this guide: https://github.com/louisbrunner/dnd-multi-backend/tree/master/packages/react-dnd-multi-backend#migrating-from-5xx"));
        } else if (inferName) {
          console.warn( // eslint-disable-line no-console
          "Deprecation notice: You are using a pipeline which doesn't include backends' 'id'.\n        This might be unsupported in the future, please specify 'id' explicitely for every backend.");
        }

        if (_classPrivateFieldGet(this, _backends)[id]) {
          throw new Error("You must specify a unique 'id' property in your Backend entry:\n        ".concat(JSON.stringify(backend), " (conflicts with: ").concat(JSON.stringify(_classPrivateFieldGet(this, _backends)[id]), ")"));
        }

        return {
          id,
          instance,
          preview: (_backend$preview = backend.preview) !== null && _backend$preview !== void 0 ? _backend$preview : false,
          transition: backend.transition,
          skipDispatchOnTransition: (_backend$skipDispatch = backend.skipDispatchOnTransition) !== null && _backend$skipDispatch !== void 0 ? _backend$skipDispatch : false
        };
      }
    });

    _defineProperty(this, "setup", () => {
      if (typeof window === 'undefined') {
        return;
      }

      if (MultiBackendImpl.isSetUp) {
        throw new Error('Cannot have two MultiBackends at the same time.');
      }

      MultiBackendImpl.isSetUp = true;

      _classPrivateFieldGet(this, _addEventListeners).call(this, window);

      _classPrivateFieldGet(this, _backends)[_classPrivateFieldGet(this, _current)].instance.setup();
    });

    _defineProperty(this, "teardown", () => {
      if (typeof window === 'undefined') {
        return;
      }

      MultiBackendImpl.isSetUp = false;

      _classPrivateFieldGet(this, _removeEventListeners).call(this, window);

      _classPrivateFieldGet(this, _backends)[_classPrivateFieldGet(this, _current)].instance.teardown();
    });

    _defineProperty(this, "connectDragSource", (sourceId, node, options) => {
      return _classPrivateFieldGet(this, _connectBackend).call(this, 'connectDragSource', sourceId, node, options);
    });

    _defineProperty(this, "connectDragPreview", (sourceId, node, options) => {
      return _classPrivateFieldGet(this, _connectBackend).call(this, 'connectDragPreview', sourceId, node, options);
    });

    _defineProperty(this, "connectDropTarget", (sourceId, node, options) => {
      return _classPrivateFieldGet(this, _connectBackend).call(this, 'connectDropTarget', sourceId, node, options);
    });

    _defineProperty(this, "profile", () => {
      return _classPrivateFieldGet(this, _backends)[_classPrivateFieldGet(this, _current)].instance.profile();
    });

    _defineProperty(this, "previewEnabled", () => {
      return _classPrivateFieldGet(this, _backends)[_classPrivateFieldGet(this, _current)].preview;
    });

    _defineProperty(this, "previewsList", () => {
      return _classPrivateFieldGet(this, _previews);
    });

    _defineProperty(this, "backendsList", () => {
      return _classPrivateFieldGet(this, _backendsList);
    });

    _classPrivateFieldInitSpec(this, _addEventListeners, {
      writable: true,
      value: target => {
        _classPrivateFieldGet(this, _backendsList).forEach(backend => {
          if (backend.transition) {
            target.addEventListener(backend.transition.event, _classPrivateFieldGet(this, _backendSwitcher));
          }
        });
      }
    });

    _classPrivateFieldInitSpec(this, _removeEventListeners, {
      writable: true,
      value: target => {
        _classPrivateFieldGet(this, _backendsList).forEach(backend => {
          if (backend.transition) {
            target.removeEventListener(backend.transition.event, _classPrivateFieldGet(this, _backendSwitcher));
          }
        });
      }
    });

    _classPrivateFieldInitSpec(this, _backendSwitcher, {
      writable: true,
      value: event => {
        const oldBackend = _classPrivateFieldGet(this, _current);

        _classPrivateFieldGet(this, _backendsList).some(backend => {
          if (backend.id !== _classPrivateFieldGet(this, _current) && backend.transition && backend.transition.check(event)) {
            _classPrivateFieldSet(this, _current, backend.id);

            return true;
          }

          return false;
        });

        if (_classPrivateFieldGet(this, _current) !== oldBackend) {
          var _event$target;

          _classPrivateFieldGet(this, _backends)[oldBackend].instance.teardown();

          Object.keys(_classPrivateFieldGet(this, _nodes)).forEach(id => {
            const node = _classPrivateFieldGet(this, _nodes)[id];

            node.unsubscribe();
            node.unsubscribe = _classPrivateFieldGet(this, _callBackend).call(this, node.func, ...node.args);
          });

          _classPrivateFieldGet(this, _previews).backendChanged(this);

          const newBackend = _classPrivateFieldGet(this, _backends)[_classPrivateFieldGet(this, _current)];

          newBackend.instance.setup();

          if (newBackend.skipDispatchOnTransition) {
            return;
          }

          const Class = event.constructor;
          const newEvent = new Class(event.type, event);
          (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.dispatchEvent(newEvent);
        }
      }
    });

    _classPrivateFieldInitSpec(this, _callBackend, {
      writable: true,
      value: (func, sourceId, node, options) => {
        return _classPrivateFieldGet(this, _backends)[_classPrivateFieldGet(this, _current)].instance[func](sourceId, node, options);
      }
    });

    _classPrivateFieldInitSpec(this, _connectBackend, {
      writable: true,
      value: (func, sourceId, node, options) => {
        const nodeId = "".concat(func, "_").concat(sourceId);

        const unsubscribe = _classPrivateFieldGet(this, _callBackend).call(this, func, sourceId, node, options);

        _classPrivateFieldGet(this, _nodes)[nodeId] = {
          func,
          args: [sourceId, node, options],
          unsubscribe
        };
        return () => {
          _classPrivateFieldGet(this, _nodes)[nodeId].unsubscribe();

          delete _classPrivateFieldGet(this, _nodes)[nodeId];
        };
      }
    });

    if (!_options || !_options.backends || _options.backends.length < 1) {
      throw new Error("You must specify at least one Backend, if you are coming from 2.x.x (or don't understand this error)\n        see this guide: https://github.com/louisbrunner/dnd-multi-backend/tree/master/packages/react-dnd-multi-backend#migrating-from-2xx");
    }

    _classPrivateFieldSet(this, _previews, new PreviewListImpl());

    _classPrivateFieldSet(this, _backends, {});

    _classPrivateFieldSet(this, _backendsList, []);

    _options.backends.forEach(backend => {
      const backendRecord = _classPrivateFieldGet(this, _createBackend).call(this, _manager, _context, backend);

      _classPrivateFieldGet(this, _backends)[backendRecord.id] = backendRecord;

      _classPrivateFieldGet(this, _backendsList).push(backendRecord);
    });

    _classPrivateFieldSet(this, _current, _classPrivateFieldGet(this, _backendsList)[0].id);

    _classPrivateFieldSet(this, _nodes, {});
  }

}

_defineProperty(MultiBackendImpl, "isSetUp", false);