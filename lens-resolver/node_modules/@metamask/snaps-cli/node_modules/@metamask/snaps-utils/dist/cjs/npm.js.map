{"version":3,"sources":["../../src/npm.ts"],"sourcesContent":["import { assertIsSnapIcon } from './icon';\nimport { validateNpmSnapManifest } from './manifest/manifest';\nimport { assertIsSnapManifest } from './manifest/validation';\nimport type { SnapFiles, UnvalidatedSnapFiles } from './types';\nimport { assertIsNpmSnapPackageJson, NpmSnapFileNames } from './types';\n\nexport const EXPECTED_SNAP_FILES = [\n  'manifest',\n  'packageJson',\n  'sourceCode',\n] as const;\n\nexport const SnapFileNameFromKey = {\n  manifest: NpmSnapFileNames.Manifest,\n  packageJson: NpmSnapFileNames.PackageJson,\n  sourceCode: 'source code bundle',\n} as const;\n\n// TODO: Refactor this to be more shared with other validation.\n\n/**\n * Validates the files extracted from an npm Snap package tarball by ensuring\n * that they're non-empty and that the Json files match their respective schemas\n * and the Snaps publishing specification.\n *\n * @param snapFiles - The object containing the expected Snap file contents,\n * if any.\n * @param errorPrefix - The prefix of the error message.\n * @returns A tuple of the Snap manifest object and the Snap source code.\n */\nexport function validateNpmSnap(\n  snapFiles: UnvalidatedSnapFiles,\n  errorPrefix?: `${string}: `,\n): SnapFiles {\n  EXPECTED_SNAP_FILES.forEach((key) => {\n    if (!snapFiles[key]) {\n      throw new Error(\n        `${errorPrefix ?? ''}Missing file \"${SnapFileNameFromKey[key]}\".`,\n      );\n    }\n  });\n\n  // Typecast: We are assured that the required files exist if we get here.\n  const { manifest, packageJson, sourceCode, svgIcon } = snapFiles as SnapFiles;\n  try {\n    assertIsSnapManifest(manifest.result);\n  } catch (error) {\n    throw new Error(`${errorPrefix ?? ''}${error.message}`);\n  }\n  const validatedManifest = manifest;\n\n  const { iconPath } = validatedManifest.result.source.location.npm;\n  if (iconPath && !svgIcon) {\n    throw new Error(`Missing file \"${iconPath}\".`);\n  }\n\n  try {\n    assertIsNpmSnapPackageJson(packageJson.result);\n  } catch (error) {\n    throw new Error(`${errorPrefix ?? ''}${error.message}`);\n  }\n  const validatedPackageJson = packageJson;\n\n  validateNpmSnapManifest({\n    manifest: validatedManifest,\n    packageJson: validatedPackageJson,\n    sourceCode,\n    svgIcon,\n  });\n\n  if (svgIcon) {\n    try {\n      assertIsSnapIcon(svgIcon);\n    } catch (error) {\n      throw new Error(`${errorPrefix ?? ''}${error.message}`);\n    }\n  }\n\n  return {\n    manifest: validatedManifest,\n    packageJson: validatedPackageJson,\n    sourceCode,\n    svgIcon,\n  };\n}\n"],"names":["EXPECTED_SNAP_FILES","SnapFileNameFromKey","validateNpmSnap","manifest","NpmSnapFileNames","Manifest","packageJson","PackageJson","sourceCode","snapFiles","errorPrefix","forEach","key","Error","svgIcon","assertIsSnapManifest","result","error","message","validatedManifest","iconPath","source","location","npm","assertIsNpmSnapPackageJson","validatedPackageJson","validateNpmSnapManifest","assertIsSnapIcon"],"mappings":";;;;;;;;;;;IAMaA,mBAAmB;eAAnBA;;IAMAC,mBAAmB;eAAnBA;;IAkBGC,eAAe;eAAfA;;;sBA9BiB;0BACO;4BACH;uBAEwB;AAEtD,MAAMF,sBAAsB;IACjC;IACA;IACA;CACD;AAEM,MAAMC,sBAAsB;IACjCE,UAAUC,uBAAgB,CAACC,QAAQ;IACnCC,aAAaF,uBAAgB,CAACG,WAAW;IACzCC,YAAY;AACd;AAcO,SAASN,gBACdO,SAA+B,EAC/BC,WAA2B;IAE3BV,oBAAoBW,OAAO,CAAC,CAACC;QAC3B,IAAI,CAACH,SAAS,CAACG,IAAI,EAAE;YACnB,MAAM,IAAIC,MACR,CAAC,EAAEH,eAAe,GAAG,cAAc,EAAET,mBAAmB,CAACW,IAAI,CAAC,EAAE,CAAC;QAErE;IACF;IAEA,yEAAyE;IACzE,MAAM,EAAET,QAAQ,EAAEG,WAAW,EAAEE,UAAU,EAAEM,OAAO,EAAE,GAAGL;IACvD,IAAI;QACFM,IAAAA,gCAAoB,EAACZ,SAASa,MAAM;IACtC,EAAE,OAAOC,OAAO;QACd,MAAM,IAAIJ,MAAM,CAAC,EAAEH,eAAe,GAAG,EAAEO,MAAMC,OAAO,CAAC,CAAC;IACxD;IACA,MAAMC,oBAAoBhB;IAE1B,MAAM,EAAEiB,QAAQ,EAAE,GAAGD,kBAAkBH,MAAM,CAACK,MAAM,CAACC,QAAQ,CAACC,GAAG;IACjE,IAAIH,YAAY,CAACN,SAAS;QACxB,MAAM,IAAID,MAAM,CAAC,cAAc,EAAEO,SAAS,EAAE,CAAC;IAC/C;IAEA,IAAI;QACFI,IAAAA,iCAA0B,EAAClB,YAAYU,MAAM;IAC/C,EAAE,OAAOC,OAAO;QACd,MAAM,IAAIJ,MAAM,CAAC,EAAEH,eAAe,GAAG,EAAEO,MAAMC,OAAO,CAAC,CAAC;IACxD;IACA,MAAMO,uBAAuBnB;IAE7BoB,IAAAA,iCAAuB,EAAC;QACtBvB,UAAUgB;QACVb,aAAamB;QACbjB;QACAM;IACF;IAEA,IAAIA,SAAS;QACX,IAAI;YACFa,IAAAA,sBAAgB,EAACb;QACnB,EAAE,OAAOG,OAAO;YACd,MAAM,IAAIJ,MAAM,CAAC,EAAEH,eAAe,GAAG,EAAEO,MAAMC,OAAO,CAAC,CAAC;QACxD;IACF;IAEA,OAAO;QACLf,UAAUgB;QACVb,aAAamB;QACbjB;QACAM;IACF;AACF"}