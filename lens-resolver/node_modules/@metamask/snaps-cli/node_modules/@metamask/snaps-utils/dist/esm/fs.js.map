{"version":3,"sources":["../../src/fs.ts"],"sourcesContent":["import type { Json } from '@metamask/utils';\nimport { promises as fs } from 'fs';\nimport os from 'os';\nimport pathUtils from 'path';\n\nimport { parseJson } from './json';\nimport type { VirtualFile } from './virtual-file';\nimport { readVirtualFile } from './virtual-file';\n\n/**\n * Checks whether the given path string resolves to an existing directory, and\n * optionally creates the directory if it doesn't exist.\n *\n * @param pathString - The path string to check.\n * @param createDir - Whether to create the directory if it doesn't exist.\n * @returns Whether the given path is an existing directory.\n */\nexport async function isDirectory(\n  pathString: string,\n  createDir: boolean,\n): Promise<boolean> {\n  try {\n    const stats = await fs.stat(pathString);\n    return stats.isDirectory();\n  } catch (error) {\n    if (error.code === 'ENOENT') {\n      if (!createDir) {\n        return false;\n      }\n\n      await fs.mkdir(pathString, { recursive: true });\n      return true;\n    }\n\n    return false;\n  }\n}\n\n/**\n * Checks whether the given path string resolves to an existing file.\n *\n * @param pathString - The path string to check.\n * @returns Whether the given path is an existing file.\n */\nexport async function isFile(pathString: string): Promise<boolean> {\n  try {\n    const stats = await fs.stat(pathString);\n    return stats.isFile();\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Reads a `.json` file, parses its contents, and returns them.\n *\n * @param pathString - The path to the JSON file.\n * @returns The parsed contents of the JSON file.\n */\nexport async function readJsonFile<Type extends Json = Json>(\n  pathString: string,\n): Promise<VirtualFile<Type>> {\n  if (!pathString.endsWith('.json')) {\n    throw new Error('The specified file must be a \".json\" file.');\n  }\n\n  let file;\n  try {\n    file = await readVirtualFile(pathString, 'utf8');\n  } catch (error) {\n    if (error.code === 'ENOENT') {\n      throw new Error(\n        `Could not find '${pathString}'. Please ensure that the file exists.`,\n      );\n    }\n\n    throw error;\n  }\n  file.result = parseJson(file.toString());\n  return file as VirtualFile<Type>;\n}\n\n/**\n * Gets the complete out file path from an output file name and parent\n * directory path.\n *\n * @param outDir - The path to the out file's parent directory.\n * @param outFileName - The out file's name.\n * @returns The complete path to the out file.\n */\nexport function getOutfilePath(outDir: string, outFileName: string): string {\n  return pathUtils.join(outDir, outFileName || 'bundle.js');\n}\n\n/**\n * Ensures that the outfile name is just a `.js` file name.\n * Throws on validation failure.\n *\n * @param filename - The file name to validate.\n * @returns `true` if validation succeeded.\n * @throws If the file name is invalid.\n */\nexport function validateOutfileName(filename: string): boolean {\n  if (\n    !filename.endsWith('.js') ||\n    filename === '.js' ||\n    pathUtils.basename(filename) !== filename\n  ) {\n    throw new Error(`Invalid outfile name: ${filename}. Must be a .js file`);\n  }\n  return true;\n}\n\n/**\n * Validates a file path. Throws on validation failure.\n *\n * @param filePath - The file path to validate.\n * @returns `true` if validation succeeded.\n * @throws If the path does not resolve to a file.\n */\nexport async function validateFilePath(filePath: string): Promise<boolean> {\n  const exists = await isFile(filePath);\n  if (!exists) {\n    throw new Error(\n      `Invalid params: '${filePath}' is not a file or does not exist.`,\n    );\n  }\n  return true;\n}\n\n/**\n * Validates a directory path. Throws on validation failure.\n *\n * @param dirPath - The directory path to validate.\n * @param createDir - Whether to create the directory if it doesn't exist.\n * @returns `true` if validation succeeded or the directory was created.\n * @throws If the directory does not exist or could not be created.\n */\nexport async function validateDirPath(\n  dirPath: string,\n  createDir: boolean,\n): Promise<boolean> {\n  const exists = await isDirectory(dirPath, createDir);\n  if (!exists) {\n    throw new Error(\n      `Invalid params: '${dirPath}' is not a directory or could not be created.`,\n    );\n  }\n  return true;\n}\n\n/**\n * Creates a temporary file with a given name and content, writes it to disk and calls the provided function.\n * This function handles deletion of the temporary file after usage.\n *\n * @param fileName - The name of the temporary file.\n * @param fileContents - The content of the temporary file.\n * @param fn - The callback function to call when the temporary file has been created.\n */\nexport async function useTemporaryFile(\n  fileName: string,\n  fileContents: string,\n  fn: (path: string) => Promise<unknown>,\n): Promise<void> {\n  const filePath = pathUtils.join(os.tmpdir(), fileName);\n  await fs.mkdir(pathUtils.dirname(filePath), { recursive: true });\n  await fs.writeFile(filePath, fileContents);\n  try {\n    await fn(filePath);\n  } finally {\n    if (await isFile(filePath)) {\n      await fs.unlink(filePath);\n    }\n  }\n}\n"],"names":["promises","fs","os","pathUtils","parseJson","readVirtualFile","isDirectory","pathString","createDir","stats","stat","error","code","mkdir","recursive","isFile","readJsonFile","endsWith","Error","file","result","toString","getOutfilePath","outDir","outFileName","join","validateOutfileName","filename","basename","validateFilePath","filePath","exists","validateDirPath","dirPath","useTemporaryFile","fileName","fileContents","fn","tmpdir","dirname","writeFile","unlink"],"mappings":"AACA,SAASA,YAAYC,EAAE,QAAQ,KAAK;AACpC,OAAOC,QAAQ,KAAK;AACpB,OAAOC,eAAe,OAAO;AAE7B,SAASC,SAAS,QAAQ,SAAS;AAEnC,SAASC,eAAe,QAAQ,iBAAiB;AAEjD;;;;;;;CAOC,GACD,OAAO,eAAeC,YACpBC,UAAkB,EAClBC,SAAkB;IAElB,IAAI;QACF,MAAMC,QAAQ,MAAMR,GAAGS,IAAI,CAACH;QAC5B,OAAOE,MAAMH,WAAW;IAC1B,EAAE,OAAOK,OAAO;QACd,IAAIA,MAAMC,IAAI,KAAK,UAAU;YAC3B,IAAI,CAACJ,WAAW;gBACd,OAAO;YACT;YAEA,MAAMP,GAAGY,KAAK,CAACN,YAAY;gBAAEO,WAAW;YAAK;YAC7C,OAAO;QACT;QAEA,OAAO;IACT;AACF;AAEA;;;;;CAKC,GACD,OAAO,eAAeC,OAAOR,UAAkB;IAC7C,IAAI;QACF,MAAME,QAAQ,MAAMR,GAAGS,IAAI,CAACH;QAC5B,OAAOE,MAAMM,MAAM;IACrB,EAAE,OAAOJ,OAAO;QACd,OAAO;IACT;AACF;AAEA;;;;;CAKC,GACD,OAAO,eAAeK,aACpBT,UAAkB;IAElB,IAAI,CAACA,WAAWU,QAAQ,CAAC,UAAU;QACjC,MAAM,IAAIC,MAAM;IAClB;IAEA,IAAIC;IACJ,IAAI;QACFA,OAAO,MAAMd,gBAAgBE,YAAY;IAC3C,EAAE,OAAOI,OAAO;QACd,IAAIA,MAAMC,IAAI,KAAK,UAAU;YAC3B,MAAM,IAAIM,MACR,CAAC,gBAAgB,EAAEX,WAAW,sCAAsC,CAAC;QAEzE;QAEA,MAAMI;IACR;IACAQ,KAAKC,MAAM,GAAGhB,UAAUe,KAAKE,QAAQ;IACrC,OAAOF;AACT;AAEA;;;;;;;CAOC,GACD,OAAO,SAASG,eAAeC,MAAc,EAAEC,WAAmB;IAChE,OAAOrB,UAAUsB,IAAI,CAACF,QAAQC,eAAe;AAC/C;AAEA;;;;;;;CAOC,GACD,OAAO,SAASE,oBAAoBC,QAAgB;IAClD,IACE,CAACA,SAASV,QAAQ,CAAC,UACnBU,aAAa,SACbxB,UAAUyB,QAAQ,CAACD,cAAcA,UACjC;QACA,MAAM,IAAIT,MAAM,CAAC,sBAAsB,EAAES,SAAS,oBAAoB,CAAC;IACzE;IACA,OAAO;AACT;AAEA;;;;;;CAMC,GACD,OAAO,eAAeE,iBAAiBC,QAAgB;IACrD,MAAMC,SAAS,MAAMhB,OAAOe;IAC5B,IAAI,CAACC,QAAQ;QACX,MAAM,IAAIb,MACR,CAAC,iBAAiB,EAAEY,SAAS,kCAAkC,CAAC;IAEpE;IACA,OAAO;AACT;AAEA;;;;;;;CAOC,GACD,OAAO,eAAeE,gBACpBC,OAAe,EACfzB,SAAkB;IAElB,MAAMuB,SAAS,MAAMzB,YAAY2B,SAASzB;IAC1C,IAAI,CAACuB,QAAQ;QACX,MAAM,IAAIb,MACR,CAAC,iBAAiB,EAAEe,QAAQ,6CAA6C,CAAC;IAE9E;IACA,OAAO;AACT;AAEA;;;;;;;CAOC,GACD,OAAO,eAAeC,iBACpBC,QAAgB,EAChBC,YAAoB,EACpBC,EAAsC;IAEtC,MAAMP,WAAW3B,UAAUsB,IAAI,CAACvB,GAAGoC,MAAM,IAAIH;IAC7C,MAAMlC,GAAGY,KAAK,CAACV,UAAUoC,OAAO,CAACT,WAAW;QAAEhB,WAAW;IAAK;IAC9D,MAAMb,GAAGuC,SAAS,CAACV,UAAUM;IAC7B,IAAI;QACF,MAAMC,GAAGP;IACX,SAAU;QACR,IAAI,MAAMf,OAAOe,WAAW;YAC1B,MAAM7B,GAAGwC,MAAM,CAACX;QAClB;IACF;AACF"}