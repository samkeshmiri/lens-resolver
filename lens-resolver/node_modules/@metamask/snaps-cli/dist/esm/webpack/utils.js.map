{"version":3,"sources":["../../../src/webpack/utils.ts"],"sourcesContent":["import { dim } from 'chalk';\nimport { promises as fs } from 'fs';\nimport { builtinModules } from 'module';\nimport type { Ora } from 'ora';\nimport { dirname, resolve } from 'path';\nimport type { Configuration } from 'webpack';\n\nimport type { ProcessedWebpackConfig } from '../config';\n\nexport const BROWSERSLIST_FILE = resolve(\n  dirname(\n    // eslint-disable-next-line n/no-extraneous-require\n    require.resolve('@metamask/snaps-cli/package.json'),\n  ),\n  '.browserslistrc',\n);\n\nexport const WEBPACK_FALLBACKS = {\n  assert: require.resolve('assert/'),\n  buffer: require.resolve('buffer/'),\n  console: require.resolve('console-browserify'),\n  constants: require.resolve('constants-browserify'),\n  crypto: require.resolve('crypto-browserify'),\n  domain: require.resolve('domain-browser'),\n  events: require.resolve('events/'),\n  http: require.resolve('stream-http'),\n  https: require.resolve('https-browserify'),\n  os: require.resolve('os-browserify/browser'),\n  path: require.resolve('path-browserify'),\n  punycode: require.resolve('punycode/'),\n  process: require.resolve('process/browser'),\n  querystring: require.resolve('querystring-es3'),\n  stream: require.resolve('stream-browserify'),\n  /* eslint-disable @typescript-eslint/naming-convention  */\n  _stream_duplex: require.resolve('readable-stream/lib/_stream_duplex'),\n  _stream_passthrough: require.resolve(\n    'readable-stream/lib/_stream_passthrough',\n  ),\n  _stream_readable: require.resolve('readable-stream/lib/_stream_readable'),\n  _stream_transform: require.resolve('readable-stream/lib/_stream_transform'),\n  _stream_writable: require.resolve('readable-stream/lib/_stream_writable'),\n  string_decoder: require.resolve('string_decoder/'),\n  /* eslint-enable @typescript-eslint/naming-convention  */\n  sys: require.resolve('util/'),\n  timers: require.resolve('timers-browserify'),\n  tty: require.resolve('tty-browserify'),\n  url: require.resolve('url/'),\n  util: require.resolve('util/'),\n  vm: require.resolve('vm-browserify'),\n  zlib: require.resolve('browserify-zlib'),\n};\n\n/**\n * Get the default loader for JavaScript and TypeScript files, based on the\n * config object.\n *\n * - If the `legacy` option is set, we use the custom `browserify` loader. This\n * uses the legacy Browserify config to transpile the code.\n * - Otherwise, we use the `swc-loader`. This is a Webpack loader that uses the\n * `SWC` compiler, which is a much faster alternative to Babel and TypeScript's\n * own compiler.\n *\n * @param config - The processed snap Webpack config.\n * @param config.legacy - The legacy config object, if any.\n * @param config.sourceMap - Whether to generate source maps.\n * @see https://swc.rs/docs/usage/swc-loader\n * @returns The default loader.\n */\nexport async function getDefaultLoader({\n  legacy,\n  sourceMap,\n}: ProcessedWebpackConfig) {\n  if (legacy) {\n    return {\n      /**\n       * If the snap uses the legacy config, we use the custom `browserify`\n       * loader. This uses the legacy Browserify config to transpile the code.\n       * This is necessary for backwards compatibility with the\n       * `bundlerCustomizer` function.\n       */\n      loader: resolve(__dirname, 'loaders', 'browserify'),\n\n      /**\n       * The options for the `browserify` loader. These can be overridden in the\n       * snap config.\n       */\n      options: legacy,\n    };\n  }\n\n  const targets = await getBrowserslistTargets();\n  return {\n    /**\n     * We use the `swc-loader` to transpile TypeScript and JavaScript files.\n     * This is a Webpack loader that uses the `SWC` compiler, which is a much\n     * faster alternative to Babel and TypeScript's own compiler.\n     */\n    loader: 'swc-loader',\n\n    /**\n     * The options for the `swc-loader`. These can be overridden in the\n     * `.swcrc` file.\n     *\n     * @see https://swc.rs/docs/configuration/swcrc\n     */\n    options: {\n      sync: false,\n\n      /**\n       * This tells SWC to generate source maps. We set it to the\n       * `sourceMap` value from the config object.\n       *\n       * This must be enabled if source maps are enabled in the config.\n       */\n      sourceMaps: Boolean(getDevTool(sourceMap)),\n\n      jsc: {\n        parser: {\n          /**\n           * This tells the parser to parse TypeScript files. If you\n           * don't need to support TypeScript, you can set this to\n           * `ecmascript` instead, but there's no harm in leaving it\n           * as `typescript`.\n           *\n           * @see https://swc.rs/docs/configuration/compilation#jscparser\n           */\n          syntax: 'typescript',\n        },\n      },\n\n      /**\n       * The module configuration. This tells SWC how to output the\n       * transpiled code.\n       *\n       * @see https://swc.rs/docs/configuration/modules\n       */\n      module: {\n        /**\n         * This tells SWC to output CommonJS modules. MetaMask Snaps\n         * doesn't support ES modules yet, so this is necessary.\n         *\n         * @see https://swc.rs/docs/configuration/modules#commonjs\n         */\n        type: 'commonjs',\n      },\n\n      env: {\n        targets: targets.join(', '),\n      },\n    },\n  };\n}\n\n/**\n * Get the Webpack devtool configuration based on the given snap config.\n *\n * - If `sourceMap` is `inline`, return `inline-source-map`.\n * - If `sourceMap` is `true`, return `source-map`.\n * - Otherwise, return `false`.\n *\n * @param sourceMap - The `sourceMap` value from the snap config.\n * @returns The Webpack devtool configuration.\n */\nexport function getDevTool(\n  sourceMap: ProcessedWebpackConfig['sourceMap'],\n): Configuration['devtool'] {\n  if (sourceMap === 'inline') {\n    return 'inline-source-map';\n  }\n\n  if (sourceMap === true) {\n    return 'source-map';\n  }\n\n  return false;\n}\n\n/**\n * Get a function that can be used as handler function for Webpack's\n * `ProgressPlugin`.\n *\n * @param spinner - The spinner to update.\n * @param spinnerText - The initial spinner text. This will be prepended to the\n * percentage.\n * @returns A function that can be used as handler function for Webpack's\n * `ProgressPlugin`.\n */\n// Note: This is extracted for testing purposes.\nexport function getProgressHandler(spinner?: Ora, spinnerText?: string) {\n  return (percentage: number) => {\n    if (spinner && spinnerText) {\n      spinner.text = `${spinnerText} ${dim(\n        `(${Math.round(percentage * 100)}%)`,\n      )}`;\n    }\n  };\n}\n\n/**\n * Get the targets from the `.browserslistrc` file.\n *\n * @returns The browser targets as an array of strings.\n */\nexport async function getBrowserslistTargets() {\n  const contents = await fs.readFile(BROWSERSLIST_FILE, 'utf8');\n  return contents\n    .split('\\n')\n    .map((line) => line.trim())\n    .filter((line) => line && !line.startsWith('#'));\n}\n\n/**\n * Get a singular or plural string based on the given count. This is useful for\n * generating messages like \"1 error\" or \"2 errors\". By default, the plural\n * string is the singular string with an \"s\" appended to it.\n *\n * This assumes that the text is in English, and likely won't work for some\n * other languages.\n *\n * @param count - The count.\n * @param singular - The singular string.\n * @param plural - The plural string.\n * @returns The singular or plural string.\n * @example\n * ```typescript\n * pluralize(1, 'error'); // => 'error'\n * pluralize(2, 'error'); // => 'errors'\n * pluralize(1, 'error', 'problem'); // => 'error'\n * pluralize(2, 'error', 'problems'); // => 'problems'\n * ```\n */\nexport function pluralize(\n  count: number,\n  singular: string,\n  plural = `${singular}s`,\n) {\n  return count === 1 ? singular : plural;\n}\n\n/**\n * Get an object that can be used as fallback config for Webpack's\n * `fallback` config.\n *\n * @param polyfills - The polyfill object from the snap config.\n * @returns The webpack fallback config.\n */\nexport function getFallbacks(polyfills: ProcessedWebpackConfig['polyfills']): {\n  [index: string]: string | false;\n} {\n  if (polyfills === true) {\n    return Object.fromEntries(\n      builtinModules.map((name) => [\n        name,\n        WEBPACK_FALLBACKS[name as keyof typeof WEBPACK_FALLBACKS] ?? false,\n      ]),\n    );\n  }\n\n  if (polyfills === false) {\n    return Object.fromEntries(builtinModules.map((name) => [name, false]));\n  }\n\n  return Object.fromEntries(\n    builtinModules.map((name) => [\n      name,\n      polyfills[name as keyof ProcessedWebpackConfig['polyfills']]\n        ? WEBPACK_FALLBACKS[name as keyof typeof WEBPACK_FALLBACKS]\n        : false,\n    ]),\n  );\n}\n"],"names":["dim","promises","fs","builtinModules","dirname","resolve","BROWSERSLIST_FILE","require","WEBPACK_FALLBACKS","assert","buffer","console","constants","crypto","domain","events","http","https","os","path","punycode","process","querystring","stream","_stream_duplex","_stream_passthrough","_stream_readable","_stream_transform","_stream_writable","string_decoder","sys","timers","tty","url","util","vm","zlib","getDefaultLoader","legacy","sourceMap","loader","__dirname","options","targets","getBrowserslistTargets","sync","sourceMaps","Boolean","getDevTool","jsc","parser","syntax","module","type","env","join","getProgressHandler","spinner","spinnerText","percentage","text","Math","round","contents","readFile","split","map","line","trim","filter","startsWith","pluralize","count","singular","plural","getFallbacks","polyfills","Object","fromEntries","name"],"mappings":"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"}