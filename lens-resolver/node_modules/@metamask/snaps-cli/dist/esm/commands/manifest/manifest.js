import { isFile } from '@metamask/snaps-utils';
import { CommandError } from '../../errors';
import { executeSteps } from '../../utils';
import { manifest } from './implementation';
const steps = [
    {
        name: 'Checking the input file.',
        task: async ({ input })=>{
            if (!await isFile(input)) {
                throw new CommandError(`Manifest file not found: "${input}". Make sure that the \`snap.manifest.json\` file exists.`);
            }
        }
    },
    {
        name: 'Validating the snap manifest.',
        task: async ({ input, config, options, spinner })=>{
            const write = getWriteManifest(config, options);
            const valid = await manifest(input, write, spinner);
            if (valid) {
                spinner.succeed('The snap manifest file is valid.');
            }
        }
    }
];
/**
 * Get whether to write the manifest to disk.
 *
 * @param config - The config object.
 * @param options - The options object.
 * @returns Whether to write the manifest to disk.
 */ function getWriteManifest(config, options) {
    if (typeof options.fix === 'boolean') {
        return options.fix;
    }
    return config.legacy?.writeManifest ?? false;
}
/**
 * Validates a snap.manifest.json file. Attempts to fix the manifest and write
 * the fixed version to disk if `writeManifest` is true. Throws if validation
 * fails.
 *
 * @param config - The config object.
 * @param options - The options object.
 */ export async function manifestHandler(config, options) {
    await executeSteps(steps, {
        input: config.manifest.path,
        config,
        options
    });
}

//# sourceMappingURL=manifest.js.map