{"version":3,"sources":["../../../../src/commands/manifest/implementation.ts"],"sourcesContent":["import { checkManifest, indent } from '@metamask/snaps-utils';\nimport { red, yellow } from 'chalk';\nimport type { Ora } from 'ora';\nimport { dirname } from 'path';\n\nimport { error, info, warn } from '../../utils';\n\n/**\n * Check the snap manifest file at the given path. If `write` is `true`, the\n * manifest will be written to disk if it is invalid. If `write` is `false`,\n * the manifest will not be written to disk, and the function will log any\n * errors and warnings to the console.\n *\n * @param path - The path to the manifest file.\n * @param write - Whether to write the manifest to disk if it is invalid.\n * @param spinner - An optional spinner to use for logging.\n */\nexport async function manifest(\n  path: string,\n  write: boolean,\n  spinner?: Ora,\n): Promise<boolean> {\n  const { warnings, errors, updated } = await checkManifest(\n    dirname(path),\n    write,\n  );\n\n  if (write && updated) {\n    info('The snap manifest file has been updated.', spinner);\n  }\n\n  if (!write && errors.length > 0) {\n    const formattedErrors = errors\n      .map((manifestError) => indent(red(`• ${manifestError}`)))\n      .join('\\n');\n\n    error(\n      `The snap manifest file is invalid.\\n\\n${formattedErrors}\\n\\nRun the command with the \\`--fix\\` flag to attempt to fix the manifest.`,\n      spinner,\n    );\n\n    spinner?.stop();\n    process.exitCode = 1;\n    return false;\n  }\n\n  if (warnings.length > 0) {\n    const formattedWarnings = warnings.map((manifestWarning) =>\n      indent(yellow(`• ${manifestWarning}`)),\n    );\n\n    warn(\n      `The snap manifest file has warnings.\\n\\n${formattedWarnings.join('\\n')}`,\n      spinner,\n    );\n  }\n\n  return true;\n}\n"],"names":["checkManifest","indent","red","yellow","dirname","error","info","warn","manifest","path","write","spinner","warnings","errors","updated","length","formattedErrors","map","manifestError","join","stop","process","exitCode","formattedWarnings","manifestWarning"],"mappings":"AAAA,SAASA,aAAa,EAAEC,MAAM,QAAQ,wBAAwB;AAC9D,SAASC,GAAG,EAAEC,MAAM,QAAQ,QAAQ;AAEpC,SAASC,OAAO,QAAQ,OAAO;AAE/B,SAASC,KAAK,EAAEC,IAAI,EAAEC,IAAI,QAAQ,cAAc;AAEhD;;;;;;;;;CASC,GACD,OAAO,eAAeC,SACpBC,IAAY,EACZC,KAAc,EACdC,OAAa;IAEb,MAAM,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,OAAO,EAAE,GAAG,MAAMd,cAC1CI,QAAQK,OACRC;IAGF,IAAIA,SAASI,SAAS;QACpBR,KAAK,4CAA4CK;IACnD;IAEA,IAAI,CAACD,SAASG,OAAOE,MAAM,GAAG,GAAG;QAC/B,MAAMC,kBAAkBH,OACrBI,GAAG,CAAC,CAACC,gBAAkBjB,OAAOC,IAAI,CAAC,EAAE,EAAEgB,cAAc,CAAC,IACtDC,IAAI,CAAC;QAERd,MACE,CAAC,sCAAsC,EAAEW,gBAAgB,2EAA2E,CAAC,EACrIL;QAGFA,SAASS;QACTC,QAAQC,QAAQ,GAAG;QACnB,OAAO;IACT;IAEA,IAAIV,SAASG,MAAM,GAAG,GAAG;QACvB,MAAMQ,oBAAoBX,SAASK,GAAG,CAAC,CAACO,kBACtCvB,OAAOE,OAAO,CAAC,EAAE,EAAEqB,gBAAgB,CAAC;QAGtCjB,KACE,CAAC,wCAAwC,EAAEgB,kBAAkBJ,IAAI,CAAC,MAAM,CAAC,EACzER;IAEJ;IAEA,OAAO;AACT"}