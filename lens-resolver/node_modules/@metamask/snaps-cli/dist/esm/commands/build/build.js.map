{"version":3,"sources":["../../../../src/commands/build/build.ts"],"sourcesContent":["import { isFile } from '@metamask/snaps-utils';\nimport { resolve as pathResolve } from 'path';\n\nimport type { ProcessedConfig, ProcessedWebpackConfig } from '../../config';\nimport { CommandError } from '../../errors';\nimport type { Steps } from '../../utils';\nimport { executeSteps, info } from '../../utils';\nimport { evaluate } from '../eval';\nimport { build } from './implementation';\n\ntype BuildContext = {\n  config: ProcessedWebpackConfig;\n};\n\nconst steps: Steps<BuildContext> = [\n  {\n    name: 'Checking the input file.',\n    task: async ({ config }) => {\n      const { input } = config;\n\n      if (!(await isFile(input))) {\n        throw new CommandError(\n          `Input file not found: \"${input}\". Make sure that the \"input\" field in your snap config is correct.`,\n        );\n      }\n    },\n  },\n  {\n    name: 'Building the snap bundle.',\n    task: async ({ config, spinner }) => {\n      // We don't evaluate the bundle here, because it's done in a separate\n      // step.\n      return await build(config, { evaluate: false, spinner });\n    },\n  },\n  {\n    name: 'Evaluating the snap bundle.',\n    condition: ({ config }) => config.evaluate,\n    task: async ({ config, spinner }) => {\n      const path = pathResolve(\n        process.cwd(),\n        config.output.path,\n        config.output.filename,\n      );\n\n      await evaluate(path);\n\n      info(`Snap bundle evaluated successfully.`, spinner);\n    },\n  },\n] as const;\n\n/**\n * Build all files in the given source directory to the given destination\n * directory.\n *\n * This creates the destination directory if it doesn't exist.\n *\n * @param config - The config object.\n */\nexport async function buildHandler(config: ProcessedConfig): Promise<void> {\n  return await executeSteps(steps, {\n    config,\n  });\n}\n"],"names":["isFile","resolve","pathResolve","CommandError","executeSteps","info","evaluate","build","steps","name","task","config","input","spinner","condition","path","process","cwd","output","filename","buildHandler"],"mappings":"AAAA,SAASA,MAAM,QAAQ,wBAAwB;AAC/C,SAASC,WAAWC,WAAW,QAAQ,OAAO;AAG9C,SAASC,YAAY,QAAQ,eAAe;AAE5C,SAASC,YAAY,EAAEC,IAAI,QAAQ,cAAc;AACjD,SAASC,QAAQ,QAAQ,UAAU;AACnC,SAASC,KAAK,QAAQ,mBAAmB;AAMzC,MAAMC,QAA6B;IACjC;QACEC,MAAM;QACNC,MAAM,OAAO,EAAEC,MAAM,EAAE;YACrB,MAAM,EAAEC,KAAK,EAAE,GAAGD;YAElB,IAAI,CAAE,MAAMX,OAAOY,QAAS;gBAC1B,MAAM,IAAIT,aACR,CAAC,uBAAuB,EAAES,MAAM,mEAAmE,CAAC;YAExG;QACF;IACF;IACA;QACEH,MAAM;QACNC,MAAM,OAAO,EAAEC,MAAM,EAAEE,OAAO,EAAE;YAC9B,qEAAqE;YACrE,QAAQ;YACR,OAAO,MAAMN,MAAMI,QAAQ;gBAAEL,UAAU;gBAAOO;YAAQ;QACxD;IACF;IACA;QACEJ,MAAM;QACNK,WAAW,CAAC,EAAEH,MAAM,EAAE,GAAKA,OAAOL,QAAQ;QAC1CI,MAAM,OAAO,EAAEC,MAAM,EAAEE,OAAO,EAAE;YAC9B,MAAME,OAAOb,YACXc,QAAQC,GAAG,IACXN,OAAOO,MAAM,CAACH,IAAI,EAClBJ,OAAOO,MAAM,CAACC,QAAQ;YAGxB,MAAMb,SAASS;YAEfV,KAAK,CAAC,mCAAmC,CAAC,EAAEQ;QAC9C;IACF;CACD;AAED;;;;;;;CAOC,GACD,OAAO,eAAeO,aAAaT,MAAuB;IACxD,OAAO,MAAMP,aAAaI,OAAO;QAC/BG;IACF;AACF"}