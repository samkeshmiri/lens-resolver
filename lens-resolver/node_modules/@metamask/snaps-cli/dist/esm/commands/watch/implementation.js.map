{"version":3,"sources":["../../../../src/commands/watch/implementation.ts"],"sourcesContent":["import { basename } from 'path';\nimport type { Watching } from 'webpack';\n\nimport type { ProcessedWebpackConfig } from '../../config';\nimport type { WebpackOptions } from '../../webpack';\nimport { getCompiler } from '../../webpack';\n\n/**\n * Build the snap bundle and watch for changes. This uses Webpack to build the\n * bundle.\n *\n * @param config - The config object.\n * @param options - The Webpack options.\n * @returns A promise that resolves when the bundle is built for the first time.\n * The promise resolves with a Webpack watching instance that can be used to\n * close the watcher.\n */\nexport async function watch(\n  config: ProcessedWebpackConfig,\n  options?: WebpackOptions,\n) {\n  const compiler = await getCompiler(config, {\n    evaluate: config.evaluate,\n    watch: true,\n    spinner: options?.spinner,\n  });\n\n  return new Promise<Watching>((resolve, reject) => {\n    compiler.watch(\n      {\n        ignored: [\n          '**/node_modules/**/*',\n          `**/${basename(config.output.path)}/**/*`,\n        ],\n      },\n      (watchError) => {\n        if (watchError) {\n          reject(watchError);\n          return;\n        }\n\n        resolve(compiler.watching);\n      },\n    );\n  });\n}\n"],"names":["basename","getCompiler","watch","config","options","compiler","evaluate","spinner","Promise","resolve","reject","ignored","output","path","watchError","watching"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAKhC,SAASC,WAAW,QAAQ,gBAAgB;AAE5C;;;;;;;;;CASC,GACD,OAAO,eAAeC,MACpBC,MAA8B,EAC9BC,OAAwB;IAExB,MAAMC,WAAW,MAAMJ,YAAYE,QAAQ;QACzCG,UAAUH,OAAOG,QAAQ;QACzBJ,OAAO;QACPK,SAASH,SAASG;IACpB;IAEA,OAAO,IAAIC,QAAkB,CAACC,SAASC;QACrCL,SAASH,KAAK,CACZ;YACES,SAAS;gBACP;gBACA,CAAC,GAAG,EAAEX,SAASG,OAAOS,MAAM,CAACC,IAAI,EAAE,KAAK,CAAC;aAC1C;QACH,GACA,CAACC;YACC,IAAIA,YAAY;gBACdJ,OAAOI;gBACP;YACF;YAEAL,QAAQJ,SAASU,QAAQ;QAC3B;IAEJ;AACF"}