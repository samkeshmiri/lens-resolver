{"version":3,"sources":["../../../src/utils/steps.ts"],"sourcesContent":["import { dim } from 'chalk';\nimport type { Ora } from 'ora';\nimport createSpinner from 'ora';\n\nimport { getErrorMessage } from './errors';\nimport { error } from './logging';\n\nexport type Step<Context extends Record<string, unknown>> = {\n  name: string;\n  condition?: (context: Context) => boolean;\n  task: (context: Context & { spinner: Ora }) => Promise<void>;\n};\n\nexport type Steps<Context extends Record<string, unknown>> = Readonly<\n  Step<Context>[]\n>;\n\n/**\n * Execute a list of steps in series. Each step receives the context object and\n * a spinner instance.\n *\n * @param steps - The steps to execute.\n * @param context - The context object that will be passed to each step.\n */\nexport async function executeSteps<Context extends Record<string, unknown>>(\n  steps: Steps<Context>,\n  context: Context,\n) {\n  const spinner = createSpinner({\n    // Ora writes to `process.stderr` by default.\n    stream: process.stdout,\n  });\n\n  spinner.start();\n\n  try {\n    for (const step of steps) {\n      // If the step has a condition, and it returns false, we skip the step.\n      if (step.condition && !step.condition(context)) {\n        continue;\n      }\n\n      // Calling `start` here instead of setting `spinner.text` seems to work\n      // better when the process doesn't have a TTY.\n      spinner.start(dim(step.name));\n\n      await step.task({\n        ...context,\n        spinner,\n      });\n    }\n\n    // The spinner may have been stopped by a step, so we only succeed if it's\n    // still spinning.\n    if (spinner.isSpinning) {\n      spinner.succeed('Done!');\n    }\n  } catch (_error) {\n    error(getErrorMessage(_error), spinner);\n    spinner.stop();\n    process.exitCode = 1;\n  }\n}\n"],"names":["dim","createSpinner","getErrorMessage","error","executeSteps","steps","context","spinner","stream","process","stdout","start","step","condition","name","task","isSpinning","succeed","_error","stop","exitCode"],"mappings":"AAAA,SAASA,GAAG,QAAQ,QAAQ;AAE5B,OAAOC,mBAAmB,MAAM;AAEhC,SAASC,eAAe,QAAQ,WAAW;AAC3C,SAASC,KAAK,QAAQ,YAAY;AAYlC;;;;;;CAMC,GACD,OAAO,eAAeC,aACpBC,KAAqB,EACrBC,OAAgB;IAEhB,MAAMC,UAAUN,cAAc;QAC5B,6CAA6C;QAC7CO,QAAQC,QAAQC,MAAM;IACxB;IAEAH,QAAQI,KAAK;IAEb,IAAI;QACF,KAAK,MAAMC,QAAQP,MAAO;YACxB,uEAAuE;YACvE,IAAIO,KAAKC,SAAS,IAAI,CAACD,KAAKC,SAAS,CAACP,UAAU;gBAC9C;YACF;YAEA,uEAAuE;YACvE,8CAA8C;YAC9CC,QAAQI,KAAK,CAACX,IAAIY,KAAKE,IAAI;YAE3B,MAAMF,KAAKG,IAAI,CAAC;gBACd,GAAGT,OAAO;gBACVC;YACF;QACF;QAEA,0EAA0E;QAC1E,kBAAkB;QAClB,IAAIA,QAAQS,UAAU,EAAE;YACtBT,QAAQU,OAAO,CAAC;QAClB;IACF,EAAE,OAAOC,QAAQ;QACff,MAAMD,gBAAgBgB,SAASX;QAC/BA,QAAQY,IAAI;QACZV,QAAQW,QAAQ,GAAG;IACrB;AACF"}