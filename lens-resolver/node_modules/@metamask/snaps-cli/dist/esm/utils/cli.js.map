{"version":3,"sources":["../../../src/utils/cli.ts"],"sourcesContent":["import path from 'path';\n\nexport const CONFIG_FILE = 'snap.config.js';\nexport const TS_CONFIG_FILE = 'snap.config.ts';\n\n// CLI arguments whose values are file paths.\nconst pathArguments = new Set([\n  'src',\n  's',\n  'dist',\n  'd',\n  'bundle',\n  'b',\n  'root',\n  'r',\n]);\n\n/**\n * Sanitizes inputs. Currently normalizes \"./\" paths to \".\".\n * Yargs handles other path normalization as specified in builders.\n *\n * @param argv - Arguments as an object generated by yargs.\n */\nexport function sanitizeInputs(argv: Record<string, unknown>) {\n  Object.keys(argv).forEach((key) => {\n    if (typeof argv[key] === 'string') {\n      // Node's path.normalize() does not do this\n      if (argv[key] === './') {\n        argv[key] = '.';\n      }\n\n      if (pathArguments.has(key)) {\n        argv[key] = path.normalize(argv[key] as string);\n      }\n    }\n  });\n}\n\n/**\n * Trims leading and trailing periods \".\" and forward slashes \"/\" from the\n * given path string.\n *\n * @param pathString - The path string to trim.\n * @returns The trimmed path string.\n */\nexport function trimPathString(pathString: string): string {\n  return pathString.replace(/^[./]+|[./]+$/gu, '');\n}\n"],"names":["path","CONFIG_FILE","TS_CONFIG_FILE","pathArguments","Set","sanitizeInputs","argv","Object","keys","forEach","key","has","normalize","trimPathString","pathString","replace"],"mappings":"AAAA,OAAOA,UAAU,OAAO;AAExB,OAAO,MAAMC,cAAc,iBAAiB;AAC5C,OAAO,MAAMC,iBAAiB,iBAAiB;AAE/C,6CAA6C;AAC7C,MAAMC,gBAAgB,IAAIC,IAAI;IAC5B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAED;;;;;CAKC,GACD,OAAO,SAASC,eAAeC,IAA6B;IAC1DC,OAAOC,IAAI,CAACF,MAAMG,OAAO,CAAC,CAACC;QACzB,IAAI,OAAOJ,IAAI,CAACI,IAAI,KAAK,UAAU;YACjC,2CAA2C;YAC3C,IAAIJ,IAAI,CAACI,IAAI,KAAK,MAAM;gBACtBJ,IAAI,CAACI,IAAI,GAAG;YACd;YAEA,IAAIP,cAAcQ,GAAG,CAACD,MAAM;gBAC1BJ,IAAI,CAACI,IAAI,GAAGV,KAAKY,SAAS,CAACN,IAAI,CAACI,IAAI;YACtC;QACF;IACF;AACF;AAEA;;;;;;CAMC,GACD,OAAO,SAASG,eAAeC,UAAkB;IAC/C,OAAOA,WAAWC,OAAO,CAAC,mBAAmB;AAC/C"}