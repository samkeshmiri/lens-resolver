{"version":3,"sources":["../../src/cli.ts"],"sourcesContent":["import yargs from 'yargs';\nimport { hideBin } from 'yargs/helpers';\n\nimport builders from './builders';\nimport { getConfigByArgv } from './config';\nimport { error, getYargsErrorMessage, sanitizeInputs } from './utils';\n\n/**\n * The main CLI entry point function. This processes the command line args, and\n * runs the appropriate function.\n *\n * @param argv - The raw command line arguments, i.e., `process.argv`.\n * @param commands - The list of commands to use.\n */\nexport async function cli(argv: string[], commands: any) {\n  await yargs(hideBin(argv))\n    .scriptName('mm-snap')\n    .usage('Usage: $0 <command> [options]')\n\n    .example('$0 build', `Build './src/index.js' as './dist/bundle.js'`)\n    .example(\n      '$0 build --config ./snap.config.build.ts',\n      `Build './src/index.js' as './dist/bundle.js' using the config in './snap.config.build.ts'`,\n    )\n    .example('$0 manifest --fix', `Check the snap manifest, and fix any errors`)\n    .example(\n      '$0 watch --port 8000',\n      `The snap input file for changes, and serve it on port 8000`,\n    )\n    .example('$0 serve --port 8000', `Serve the snap bundle on port 8000`)\n\n    .command(commands)\n\n    .option('config', builders.config)\n    .option('verboseErrors', builders.verboseErrors)\n    .option('suppressWarnings', builders.suppressWarnings)\n\n    .strict()\n\n    .middleware(async (args: any) => {\n      // eslint-disable-next-line require-atomic-updates\n      args.context = {\n        config: await getConfigByArgv(args),\n      };\n\n      sanitizeInputs(args);\n    }, false)\n\n    .demandCommand(1, 'You must specify at least one command.')\n\n    .fail((message, failure) => {\n      error(getYargsErrorMessage(message, failure));\n      // eslint-disable-next-line n/no-process-exit\n      process.exit(1);\n    })\n\n    .help()\n    .alias('help', 'h')\n    .parseAsync();\n}\n"],"names":["yargs","hideBin","builders","getConfigByArgv","error","getYargsErrorMessage","sanitizeInputs","cli","argv","commands","scriptName","usage","example","command","option","config","verboseErrors","suppressWarnings","strict","middleware","args","context","demandCommand","fail","message","failure","process","exit","help","alias","parseAsync"],"mappings":"AAAA,OAAOA,WAAW,QAAQ;AAC1B,SAASC,OAAO,QAAQ,gBAAgB;AAExC,OAAOC,cAAc,aAAa;AAClC,SAASC,eAAe,QAAQ,WAAW;AAC3C,SAASC,KAAK,EAAEC,oBAAoB,EAAEC,cAAc,QAAQ,UAAU;AAEtE;;;;;;CAMC,GACD,OAAO,eAAeC,IAAIC,IAAc,EAAEC,QAAa;IACrD,MAAMT,MAAMC,QAAQO,OACjBE,UAAU,CAAC,WACXC,KAAK,CAAC,iCAENC,OAAO,CAAC,YAAY,CAAC,4CAA4C,CAAC,EAClEA,OAAO,CACN,4CACA,CAAC,yFAAyF,CAAC,EAE5FA,OAAO,CAAC,qBAAqB,CAAC,2CAA2C,CAAC,EAC1EA,OAAO,CACN,wBACA,CAAC,0DAA0D,CAAC,EAE7DA,OAAO,CAAC,wBAAwB,CAAC,kCAAkC,CAAC,EAEpEC,OAAO,CAACJ,UAERK,MAAM,CAAC,UAAUZ,SAASa,MAAM,EAChCD,MAAM,CAAC,iBAAiBZ,SAASc,aAAa,EAC9CF,MAAM,CAAC,oBAAoBZ,SAASe,gBAAgB,EAEpDC,MAAM,GAENC,UAAU,CAAC,OAAOC;QACjB,kDAAkD;QAClDA,KAAKC,OAAO,GAAG;YACbN,QAAQ,MAAMZ,gBAAgBiB;QAChC;QAEAd,eAAec;IACjB,GAAG,OAEFE,aAAa,CAAC,GAAG,0CAEjBC,IAAI,CAAC,CAACC,SAASC;QACdrB,MAAMC,qBAAqBmB,SAASC;QACpC,6CAA6C;QAC7CC,QAAQC,IAAI,CAAC;IACf,GAECC,IAAI,GACJC,KAAK,CAAC,QAAQ,KACdC,UAAU;AACf"}