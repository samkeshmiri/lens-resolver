"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _browserify = /*#__PURE__*/ _interop_require_default(require("browserify"));
const _stream = require("stream");
const _builders = require("../../builders");
const _utils = require("../../utils");
const _utils1 = require("../utils");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * A Browserify loader for Webpack. This exists for backwards compatibility with
 * the legacy configuration format, in order to support the `bundlerCustomizer`
 * function.
 *
 * When this loader is used, the input file will be processed by Browserify, and
 * written to disk by Webpack. Most processing will be handled by Browserify, so
 * there are no benefits like tree-shaking.
 *
 * @param content - The input file contents as a string.
 * @param sourceMap - The source map of the input file.
 */ const loader = async function(content, sourceMap) {
    const config = this.getOptions();
    const { transpilationMode } = config;
    const bundler = (0, _browserify.default)({
        extensions: [
            '.js',
            '.ts'
        ],
        debug: Boolean(sourceMap),
        standalone: '<snap>'
    });
    if (transpilationMode !== _builders.TranspilationModes.None) {
        const babelifyOptions = (0, _utils.processDependencies)(config);
        // We need to statically import all Browserify transforms, and all Babel
        // presets and plugins, and calling `require` is the sanest way to do that.
        /* eslint-disable @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires, n/global-require */ bundler.transform(require('babelify'), {
            global: transpilationMode === _builders.TranspilationModes.LocalAndDeps,
            extensions: [
                '.js',
                '.ts'
            ],
            presets: [
                require('@babel/preset-typescript'),
                [
                    require('@babel/preset-env'),
                    {
                        targets: {
                            browsers: await (0, _utils1.getBrowserslistTargets)()
                        }
                    }
                ]
            ],
            plugins: [
                require('@babel/plugin-transform-runtime'),
                require('@babel/plugin-proposal-class-properties'),
                require('@babel/plugin-proposal-private-methods'),
                require('@babel/plugin-proposal-class-static-block'),
                require('@babel/plugin-proposal-private-property-in-object')
            ],
            ...babelifyOptions
        });
    /* eslint-enable @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires, n/global-require */ }
    config.bundlerCustomizer?.(bundler);
    // Browserify doesn't accept a string as an entry point, so we need to convert
    // it to a stream.
    const stream = new _stream.Readable();
    stream.push(content);
    stream.push(null);
    bundler.add(stream, {
        file: this.resourcePath
    });
    return new Promise((resolve, reject)=>{
        bundler.bundle((bundleError, buffer)=>{
            if (bundleError) {
                reject(bundleError);
                return;
            }
            // Browserify inlines the source map, so we just pass the output buffer back
            // to Webpack.
            resolve(buffer);
        });
    });
};
const _default = loader;

//# sourceMappingURL=browserify.js.map