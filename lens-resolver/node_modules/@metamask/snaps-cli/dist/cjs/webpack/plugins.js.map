{"version":3,"sources":["../../../src/webpack/plugins.ts"],"sourcesContent":["import { indent } from '@metamask/snaps-utils';\nimport { assert, hasProperty, isObject } from '@metamask/utils';\nimport { dim, red, yellow } from 'chalk';\nimport { isBuiltin } from 'module';\nimport type { Ora } from 'ora';\nimport type {\n  Compiler,\n  ProvidePlugin,\n  ResolvePluginInstance,\n  Resolver,\n  StatsError,\n  WebpackPluginInstance,\n} from 'webpack';\n\nimport { evaluate } from '../commands/eval';\nimport { error, getErrorMessage, info, warn } from '../utils';\nimport { pluralize } from './utils';\n\nexport type SnapsStatsPluginOptions = {\n  /**\n   * Whether to log the verbose stats.\n   */\n  verbose?: boolean;\n};\n\n/**\n * A plugin that logs the stats after compilation. This is useful for logging\n * the number of files compiled, and the time taken to compile them.\n */\nexport class SnapsStatsPlugin implements WebpackPluginInstance {\n  /**\n   * The options for the plugin.\n   */\n  readonly options: SnapsStatsPluginOptions;\n\n  /**\n   * The spinner to use for logging.\n   */\n  readonly #spinner?: Ora;\n\n  constructor(\n    options: SnapsStatsPluginOptions = {\n      verbose: false,\n    },\n    spinner?: Ora,\n  ) {\n    this.options = options;\n    this.#spinner = spinner;\n  }\n\n  /**\n   * Apply the plugin to the Webpack compiler.\n   *\n   * @param compiler - The Webpack compiler.\n   */\n  apply(compiler: Compiler) {\n    compiler.hooks.afterDone.tap(this.constructor.name, (stats) => {\n      if (!stats) {\n        return;\n      }\n\n      const { modules, time, errors } = stats.toJson();\n\n      assert(modules, 'Modules must be defined in stats.');\n      assert(time, 'Time must be defined in stats.');\n\n      if (errors?.length) {\n        const formattedErrors = errors\n          .map(this.#getStatsErrorMessage.bind(this))\n          .join('\\n\\n');\n\n        error(\n          `Compiled ${modules.length} ${pluralize(\n            modules.length,\n            'file',\n          )} in ${time}ms with ${errors.length} ${pluralize(\n            errors.length,\n            'error',\n          )}.\\n\\n${formattedErrors}\\n`,\n          this.#spinner,\n        );\n\n        this.#spinner?.stop();\n\n        process.exitCode = 1;\n        return;\n      }\n\n      info(\n        `Compiled ${modules.length} ${pluralize(\n          modules.length,\n          'file',\n        )} in ${time}ms.`,\n        this.#spinner,\n      );\n\n      if (compiler.watchMode) {\n        // The spinner may be restarted by the watch plugin, outside of the\n        // `executeSteps` flow, so we stop it here just in case.\n        this.#spinner?.succeed('Done!');\n      }\n    });\n  }\n\n  /**\n   * Get the error message for the given stats error.\n   *\n   * @param statsError - The stats error.\n   * @returns The error message.\n   */\n  #getStatsErrorMessage(statsError: StatsError) {\n    const baseMessage = this.options.verbose\n      ? getErrorMessage(statsError)\n      : statsError.message;\n\n    const [first, ...rest] = baseMessage.split('\\n');\n\n    return [\n      indent(red(`â€¢ ${first}`), 2),\n      ...rest.map((message) => indent(red(message), 4)),\n      statsError.details && indent(dim(statsError.details), 4),\n    ]\n      .filter(Boolean)\n      .join('\\n');\n  }\n}\n\n/**\n * The options for the {@link SnapsWatchPlugin}.\n */\nexport type SnapsWatchPluginOptions = {\n  /**\n   * The bundle path. This is the file that will be evaluated, if the `evaluate`\n   * option is set.\n   */\n  bundle?: string;\n\n  /**\n   * Whether to evaluate the bundle. This only applies if the `bundle` option is\n   * set.\n   */\n  evaluate?: boolean;\n\n  /**\n   * The extra files to watch.\n   */\n  files?: string[];\n};\n\n/**\n * A plugin that adds extra files to watch. This is useful for watching files\n * that are not imported by the entry point, such as the `snap.manifest.json`\n * file.\n */\nexport class SnapsWatchPlugin implements WebpackPluginInstance {\n  /**\n   * The options for the plugin.\n   */\n  readonly options: SnapsWatchPluginOptions;\n\n  /**\n   * The spinner to use for logging.\n   */\n  readonly #spinner?: Ora;\n\n  constructor(options: SnapsWatchPluginOptions, spinner?: Ora) {\n    this.options = options;\n    this.#spinner = spinner;\n  }\n\n  /**\n   * Apply the plugin to the Webpack compiler.\n   *\n   * @param compiler - The Webpack compiler.\n   */\n  apply(compiler: Compiler) {\n    compiler.hooks.invalid.tap(this.constructor.name, (file) => {\n      this.#spinner?.start();\n      info(`Changes detected in ${yellow(file)}, recompiling.`, this.#spinner);\n    });\n\n    compiler.hooks.afterEmit.tapPromise(\n      this.constructor.name,\n      async ({ fileDependencies }) => {\n        this.options.files?.forEach(\n          fileDependencies.add.bind(fileDependencies),\n        );\n\n        if (this.options.bundle && this.options.evaluate) {\n          await this.#safeEvaluate(this.options.bundle);\n        }\n      },\n    );\n  }\n\n  /**\n   * Safely evaluate the bundle at the given path. If an error occurs, it will\n   * be logged to the console, rather than throwing an error.\n   *\n   * This function should never throw an error.\n   *\n   * @param bundlePath - The path to the bundle.\n   */\n  async #safeEvaluate(bundlePath: string) {\n    try {\n      await evaluate(bundlePath);\n      info(`Snap bundle evaluated successfully.`, this.#spinner);\n    } catch (evaluateError) {\n      error(evaluateError.message, this.#spinner);\n    }\n  }\n}\n\n/**\n * The options for the {@link SnapsBuiltInResolver}.\n */\nexport type SnapsBuiltInResolverOptions = {\n  /**\n   * The built-in modules to ignore.\n   */\n  ignore?: string[];\n};\n\n/**\n * A plugin that logs a message when a built-in module is not resolved. The\n * MetaMask Snaps CLI does not support built-in modules by default, and this\n * plugin is used to warn the user when they try to import a built-in module,\n * when no fallback is configured.\n */\nexport class SnapsBuiltInResolver implements ResolvePluginInstance {\n  /**\n   * The built-in modules that have been imported, but not resolved.\n   */\n  readonly unresolvedModules = new Set<string>();\n\n  /**\n   * The name of the resolver hook to tap into.\n   */\n  readonly #source = 'described-resolve';\n\n  /**\n   * The options for the plugin.\n   */\n  readonly options: SnapsBuiltInResolverOptions;\n\n  /**\n   * The spinner to use for logging.\n   */\n  readonly #spinner?: Ora;\n\n  constructor(\n    options: SnapsBuiltInResolverOptions = {\n      ignore: [],\n    },\n    spinner?: Ora,\n  ) {\n    this.options = options;\n    this.#spinner = spinner;\n  }\n\n  /**\n   * Apply the plugin to the Webpack resolver.\n   *\n   * @param resolver - The Webpack resolver.\n   */\n  apply(resolver: Resolver) {\n    resolver\n      .getHook(this.#source)\n      .tapAsync(\n        this.constructor.name,\n        ({ module: isModule, request }, _, callback) => {\n          if (!isModule || !request) {\n            return callback();\n          }\n\n          const baseRequest = request.split('/')[0];\n          if (\n            isBuiltin(baseRequest) &&\n            !this.options.ignore?.includes(baseRequest)\n          ) {\n            const fallback = resolver.options.fallback.find(\n              ({ name }) => name === baseRequest,\n            );\n\n            if (fallback && !fallback.alias) {\n              this.unresolvedModules.add(baseRequest);\n            }\n          }\n\n          return callback();\n        },\n      );\n  }\n}\n\n/**\n * The options for the {@link SnapsBundleWarningsPlugin}.\n */\nexport type SnapsBundleWarningsPluginOptions = {\n  /**\n   * The {@link SnapsBuiltInResolver} instance to use for detecting built-in\n   * modules.\n   */\n  builtInResolver?: SnapsBuiltInResolver | false;\n\n  /**\n   * Whether to show warnings if built-in modules are used, but not provided by\n   * Webpack's `fallback` configuration.\n   */\n  builtIns?: boolean;\n\n  /**\n   * Whether to show warnings if the `Buffer` global is used, but not provided\n   * by Webpack's `DefinePlugin`.\n   */\n  buffer?: boolean;\n};\n\n/**\n * A plugin that logs a message when:\n *\n * - A built-in module is not resolved. The MetaMask Snaps CLI does not support\n * built-in modules by default, and this plugin is used to warn the user when\n * they try to import a built-in module, when no fallback is configured.\n * - A snap uses the `Buffer` global. The MetaMask Snaps CLI does not support\n * the `Buffer` global by default, and this plugin is used to warn the user when\n * they try to use the `Buffer` global.\n *\n * We use both a resolver and a plugin, because the resolver is used to detect\n * when a built-in module is imported, and the plugin is used to log a single\n * message when the compilation is complete. We can't do everything in a single\n * plugin, because the resolver doesn't have access to the compilation, and the\n * plugin doesn't have access to the resolver.\n */\n\nexport class SnapsBundleWarningsPlugin implements WebpackPluginInstance {\n  /**\n   * The spinner to use for logging.\n   */\n  readonly #spinner?: Ora;\n\n  /**\n   * The options for the plugin.\n   */\n  readonly options: SnapsBundleWarningsPluginOptions;\n\n  constructor(\n    options: SnapsBundleWarningsPluginOptions = {\n      buffer: true,\n      builtIns: true,\n    },\n    spinner?: Ora,\n  ) {\n    this.options = options;\n    this.#spinner = spinner;\n  }\n\n  /**\n   * Apply the plugin to the Webpack compiler.\n   *\n   * @param compiler - The Webpack compiler.\n   */\n  apply(compiler: Compiler) {\n    if (this.options.builtIns) {\n      this.#checkBuiltIns(compiler);\n    }\n\n    if (this.options.buffer) {\n      this.#checkBuffer(compiler);\n    }\n  }\n\n  /**\n   * Check if a built-in module is used, but not provided by Webpack's\n   * `fallback` configuration.\n   *\n   * @param compiler - The Webpack compiler.\n   */\n  #checkBuiltIns(compiler: Compiler) {\n    compiler.hooks.afterCompile.tap(this.constructor.name, () => {\n      if (!this.options.builtInResolver) {\n        return;\n      }\n\n      const { unresolvedModules } = this.options.builtInResolver;\n      if (unresolvedModules.size === 0) {\n        return;\n      }\n\n      const formattedModules = new Array(...unresolvedModules)\n        .map((name) => indent(`â€¢ ${name}`, 2))\n        .join('\\n');\n\n      warn(\n        `The snap attempted to use one or more Node.js builtins, but no browser fallback has been provided.\\n` +\n          `The MetaMask Snaps CLI does not support Node.js builtins by default. If you want to use this module, you must set ${yellow(\n            `polyfills`,\n          )} to ${yellow(\n            `true`,\n          )} or an object with the builtins to polyfill as the key and ${yellow(\n            `true`,\n          )} as the value.\\n` +\n          `To disable this warning, set ${yellow(\n            '`stats.builtIns`',\n          )} to ${yellow(\n            '`false`',\n          )} in your snap config file, or add the module to the ${yellow(\n            '`stats.builtIns.ignore`',\n          )} array.\\n\\n${formattedModules}\\n`,\n        this.#spinner,\n      );\n    });\n  }\n\n  /**\n   * Check if the given instance is a `ProvidePlugin`. This is not guaranteed to\n   * be accurate, but it's good enough for our purposes. If we were to use\n   * `instanceof` instead, it might not work if multiple versions of Webpack are\n   * installed.\n   *\n   * @param instance - The instance to check.\n   * @returns Whether the instance is a `ProvidePlugin`, i.e., whether it's an\n   * object with the name `ProvidePlugin` and a `definitions` property.\n   */\n  #isProvidePlugin(instance: unknown): instance is ProvidePlugin {\n    return (\n      isObject(instance) &&\n      instance.constructor.name === 'ProvidePlugin' &&\n      hasProperty(instance, 'definitions')\n    );\n  }\n\n  /**\n   * Check if the `Buffer` global is used, but not provided by Webpack's\n   * `DefinePlugin`.\n   *\n   * @param compiler - The Webpack compiler.\n   */\n  #checkBuffer(compiler: Compiler) {\n    const plugin = compiler.options.plugins?.find((instance) =>\n      this.#isProvidePlugin(instance),\n    ) as ProvidePlugin | undefined;\n\n    // If the `ProvidePlugin` is configured to provide `Buffer`, then we don't\n    // need to warn the user.\n    if (plugin) {\n      const { definitions } = plugin;\n      if (definitions.Buffer) {\n        return;\n      }\n    }\n\n    compiler.hooks.compilation.tap(this.constructor.name, (compilation) => {\n      compilation.hooks.afterProcessAssets.tap(\n        this.constructor.name,\n        (assets) => {\n          // Check if assets use `Buffer`.\n          const bufferAssets = Object.entries(assets)\n            .filter(([name]) => name.endsWith('.js'))\n            .filter(([, asset]) => asset.source().includes('Buffer'));\n\n          if (bufferAssets.length === 0) {\n            return;\n          }\n\n          warn(\n            `The snap attempted to use the Node.js Buffer global, which is not supported in the MetaMask Snaps CLI by default.\\n` +\n              `To use the Buffer global, you must polyfill Buffer by setting ${yellow(\n                `buffer`,\n              )} to ${yellow(`true`)} in the ${yellow(\n                `polyfills`,\n              )} config object in your snap config.\\n` +\n              `To disable this warning, set ${yellow(\n                '`stats.buffer`',\n              )} to ${yellow('`false`')} in your snap config file.`,\n            this.#spinner,\n          );\n        },\n      );\n    });\n  }\n}\n"],"names":["SnapsStatsPlugin","SnapsWatchPlugin","SnapsBuiltInResolver","SnapsBundleWarningsPlugin","apply","compiler","hooks","afterDone","tap","constructor","name","stats","modules","time","errors","toJson","assert","length","formattedErrors","map","getStatsErrorMessage","bind","join","error","pluralize","spinner","stop","process","exitCode","info","watchMode","succeed","options","verbose","statsError","baseMessage","getErrorMessage","message","first","rest","split","indent","red","details","dim","filter","Boolean","invalid","file","start","yellow","afterEmit","tapPromise","fileDependencies","files","forEach","add","bundle","evaluate","safeEvaluate","bundlePath","evaluateError","resolver","getHook","source","tapAsync","module","isModule","request","_","callback","baseRequest","isBuiltin","ignore","includes","fallback","find","alias","unresolvedModules","Set","builtIns","checkBuiltIns","buffer","checkBuffer","afterCompile","builtInResolver","size","formattedModules","Array","warn","instance","isObject","hasProperty","plugin","plugins","isProvidePlugin","definitions","Buffer","compilation","afterProcessAssets","assets","bufferAssets","Object","entries","endsWith","asset"],"mappings":"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"}