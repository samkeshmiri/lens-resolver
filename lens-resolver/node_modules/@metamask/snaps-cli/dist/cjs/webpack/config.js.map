{"version":3,"sources":["../../../src/webpack/config.ts"],"sourcesContent":["import SnapsWebpackPlugin from '@metamask/snaps-webpack-plugin';\nimport type { Ora } from 'ora';\nimport { resolve } from 'path';\nimport TerserPlugin from 'terser-webpack-plugin';\nimport type { Configuration } from 'webpack';\nimport { EnvironmentPlugin, ProgressPlugin, ProvidePlugin } from 'webpack';\n\nimport type { ProcessedWebpackConfig } from '../config';\nimport {\n  SnapsBuiltInResolver,\n  SnapsBundleWarningsPlugin,\n  SnapsStatsPlugin,\n  SnapsWatchPlugin,\n} from './plugins';\nimport {\n  BROWSERSLIST_FILE,\n  getDefaultLoader,\n  getDevTool,\n  getFallbacks,\n  getProgressHandler,\n} from './utils';\n\nexport type WebpackOptions = {\n  /**\n   * Whether to watch for changes.\n   */\n  watch?: boolean;\n\n  /**\n   * Whether to evaluate the bundle. If this is set, it will override the\n   * `evaluate` option in the config object.\n   */\n  evaluate?: boolean;\n\n  /**\n   * The spinner to use for logging.\n   */\n  spinner?: Ora;\n};\n\n/**\n * Get the default Webpack configuration. This is the configuration that will\n * be used if the user doesn't provide a custom Webpack configuration. The\n * configuration is based on the snap config.\n *\n * The default configuration includes:\n *\n * - `SWC` to transpile TypeScript and JavaScript files.\n * - `TerserPlugin` to minify the bundle.\n * - `SnapsWebpackPlugin` to validate the bundle and update the manifest.\n *\n * It can be customized through the `customizeWebpackConfig` function in the\n * snap config, but in most cases, you shouldn't need to do that.\n *\n * @param config - The processed snap Webpack config.\n * @param options - The Webpack options.\n * @returns The default Webpack configuration.\n */\nexport async function getDefaultConfiguration(\n  config: ProcessedWebpackConfig,\n  options: WebpackOptions = {\n    evaluate: config.evaluate,\n  },\n): Promise<Configuration> {\n  const spinnerText = options.spinner?.text;\n  const builtInResolver =\n    config.stats.builtIns &&\n    new SnapsBuiltInResolver(config.stats.builtIns, options.spinner);\n\n  return {\n    /**\n     * The target is set to `browserslist` so that Webpack will compile the\n     * bundle to support the browsers specified in the `.browserslistrc` file.\n     * This Browserslist file contains the browsers that are supported by\n     * MetaMask Snaps.\n     *\n     * @see https://webpack.js.org/configuration/target/\n     */\n    target: `browserslist:${BROWSERSLIST_FILE}`,\n\n    /**\n     * The mode is set to `production` by default, so that Webpack will minify\n     * and optimize the bundle.\n     *\n     * @see https://webpack.js.org/configuration/mode/\n     */\n    mode: 'production',\n\n    /**\n     * The entry point is set to the `input` value from the config object.\n     *\n     * @see https://webpack.js.org/configuration/entry-context/\n     */\n    entry: config.input,\n\n    /**\n     * The devtool option controls how source maps are generated. We set it to\n     * the `sourceMap` value from the config object.\n     *\n     * @see https://webpack.js.org/configuration/devtool/\n     */\n    devtool: getDevTool(config.sourceMap),\n\n    /**\n     * The stats option controls how much information is printed to the console\n     * when Webpack is running. We set it to `none` so that we can control the\n     * output ourselves.\n     *\n     * @see https://webpack.js.org/configuration/stats/\n     */\n    stats: 'none',\n\n    /**\n     * The output options.\n     *\n     * @see https://webpack.js.org/configuration/output/\n     */\n    output: {\n      /**\n       * This indicates whether Webpack should clear the output directory\n       * before building. We set it to the `clean` value from the config\n       * object.\n       *\n       * @see https://webpack.js.org/configuration/output/#outputclean\n       */\n      clean: config.output.clean,\n\n      /**\n       * The filename of the bundle. We set it to the `filename` value from\n       * the config object.\n       *\n       * @see https://webpack.js.org/configuration/output/#outputfilename\n       */\n      filename: config.output.filename,\n\n      /**\n       * The path to the output directory. We set it to the `path` value from\n       * the config object.\n       *\n       * @see https://webpack.js.org/configuration/output/#outputpath\n       */\n      path: config.output.path,\n\n      /**\n       * The public path of the bundle. We set it to `/` by default, so that\n       * the bundle can be loaded from the root of the server.\n       *\n       * @see https://webpack.js.org/configuration/output/#outputpublicpath\n       */\n      publicPath: '/',\n\n      /**\n       * The library configuration. This tells Webpack how to export the\n       * bundle.\n       *\n       * @see https://webpack.js.org/configuration/output/#outputlibrary\n       */\n      library: {\n        /**\n         * This tells Webpack to export the bundle as a CommonJS module. This\n         * is necessary for MetaMask Snaps.\n         *\n         * @see https://webpack.js.org/configuration/output/#outputlibrarytarget\n         */\n        type: 'commonjs',\n      },\n    },\n\n    /**\n     * The module configuration. This is where we tell Webpack how to handle\n     * different types of files.\n     *\n     * @see https://webpack.js.org/configuration/module/\n     */\n    module: {\n      rules: [\n        {\n          test: /\\.[tj]sx?$/u,\n          exclude: /node_modules/u,\n          use: await getDefaultLoader(config),\n        },\n\n        config.experimental.wasm && {\n          test: /\\.wasm$/u,\n          use: {\n            loader: resolve(__dirname, 'loaders', 'wasm'),\n          },\n        },\n      ],\n    },\n\n    /**\n     * The resolve configuration. This tells Webpack how to resolve imports.\n     * We set it to resolve `.js` and `.ts` files.\n     *\n     * @see https://webpack.js.org/configuration/resolve/\n     */\n    resolve: {\n      /**\n       * The extensions to resolve. We set it to resolve `.js` and `.ts`\n       * files.\n       */\n      extensions: ['.js', '.ts'],\n\n      /**\n       * The fallback options. This tells Webpack how to handle imports that\n       * aren't resolved. By default, we set Node.js built-ins to `false`, so\n       * that they are ignored.\n       */\n      fallback: getFallbacks(config.polyfills),\n\n      /**\n       * The plugins to use. We use the {@link SnapsBuiltInResolver} to show\n       * warnings about using Node.js built-ins, when no fallback is specified.\n       */\n      plugins: [builtInResolver],\n    },\n\n    /**\n     * The plugins to use.\n     *\n     * @see https://webpack.js.org/configuration/plugins/\n     */\n    plugins: [\n      /**\n       * The `SnapsWebpackPlugin` is a Webpack plugin that checks and updates\n       * the manifest file, and evaluates the bundle in SES. While not strictly\n       * required, it's highly recommended to use this plugin.\n       */\n      new SnapsWebpackPlugin({\n        manifestPath: config.manifest.path,\n        writeManifest: config.manifest.update,\n        eval: !options.watch && options.evaluate,\n      }),\n\n      /**\n       * The `SnapsStatsPlugin` is a Webpack plugin that handles the stats\n       * output. It's used to show the stats in the terminal, in a format that\n       * is easy to read.\n       */\n      new SnapsStatsPlugin({ verbose: config.stats.verbose }, options.spinner),\n\n      /**\n       * The `EnvironmentPlugin` is a Webpack plugin that adds environment\n       * variables to the bundle. We use it to add the `NODE_ENV` and `DEBUG`\n       * environment variables.\n       */\n      new EnvironmentPlugin(config.environment),\n\n      /**\n       * The `ProgressPlugin` is a Webpack plugin that logs the progress of\n       * the build. We set it to log the progress to the spinner.\n       */\n      new ProgressPlugin({\n        handler: getProgressHandler(options.spinner, spinnerText),\n      }),\n\n      /**\n       * The `SnapsBundleWarningPlugin` is a Webpack plugin that shows a\n       * warning when the bundle is potentially incompatible with MetaMask\n       * Snaps.\n       */\n      new SnapsBundleWarningsPlugin(\n        {\n          builtInResolver,\n          builtIns: Boolean(config.stats.builtIns),\n          buffer: config.stats.buffer,\n        },\n        options.spinner,\n      ),\n\n      /**\n       * The `WatchPlugin` is a Webpack plugin that adds extra files to watch\n       * for changes. This is useful for rebuilding the bundle when the\n       * manifest file changes.\n       */\n      options.watch &&\n        new SnapsWatchPlugin(\n          {\n            bundle: resolve(config.output.path, config.output.filename),\n            evaluate: options.evaluate,\n            files: [config.manifest.path],\n          },\n          options.spinner,\n        ),\n\n      /**\n       * The `ProviderPlugin` is a Webpack plugin that automatically load\n       * modules instead of having to import or require them everywhere.\n       */\n      (config.polyfills === true ||\n        (config.polyfills !== false && config.polyfills.buffer)) &&\n        new ProvidePlugin({\n          Buffer: ['buffer', 'Buffer'],\n        }),\n    ].filter(Boolean),\n\n    /**\n     * The optimization configuration. This tells Webpack how to optimize the\n     * bundle. Most of the time, you won't need to change this, as the default\n     * options set by the `mode` option are sufficient.\n     */\n    optimization: {\n      minimize: config.output.minimize,\n\n      /**\n       * The minimizer to use. We set it to use the `TerserPlugin`.\n       */\n      minimizer: [\n        new TerserPlugin({\n          parallel: true,\n        }),\n      ],\n    },\n\n    /**\n     * The infrastructure logging configuration. This tells Webpack how to\n     * log messages.\n     *\n     * @see https://webpack.js.org/configuration/infrastructure-logging\n     */\n    infrastructureLogging: {\n      /**\n       * The level of logging to use. We set it to `none`, so that we can\n       * control the output ourselves.\n       */\n      level: 'none',\n    },\n  };\n}\n"],"names":["getDefaultConfiguration","config","options","evaluate","spinnerText","spinner","text","builtInResolver","stats","builtIns","SnapsBuiltInResolver","target","BROWSERSLIST_FILE","mode","entry","input","devtool","getDevTool","sourceMap","output","clean","filename","path","publicPath","library","type","module","rules","test","exclude","use","getDefaultLoader","experimental","wasm","loader","resolve","__dirname","extensions","fallback","getFallbacks","polyfills","plugins","SnapsWebpackPlugin","manifestPath","manifest","writeManifest","update","eval","watch","SnapsStatsPlugin","verbose","EnvironmentPlugin","environment","ProgressPlugin","handler","getProgressHandler","SnapsBundleWarningsPlugin","Boolean","buffer","SnapsWatchPlugin","bundle","files","ProvidePlugin","Buffer","filter","optimization","minimize","minimizer","TerserPlugin","parallel","infrastructureLogging","level"],"mappings":"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"}