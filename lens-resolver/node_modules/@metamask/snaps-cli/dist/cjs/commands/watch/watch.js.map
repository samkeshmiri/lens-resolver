{"version":3,"sources":["../../../../src/commands/watch/watch.ts"],"sourcesContent":["import { isFile } from '@metamask/snaps-utils';\n\nimport type { ProcessedConfig, ProcessedWebpackConfig } from '../../config';\nimport { CommandError } from '../../errors';\nimport type { Steps } from '../../utils';\nimport { executeSteps, info } from '../../utils';\nimport { getServer } from '../../webpack';\nimport { watch } from './implementation';\n\ntype WatchOptions = {\n  /**\n   * The port to listen on.\n   */\n  port?: number;\n};\n\ntype WatchContext = {\n  config: ProcessedWebpackConfig;\n  options: WatchOptions;\n};\n\nconst steps: Steps<WatchContext> = [\n  {\n    name: 'Checking the input file.',\n    task: async ({ config }) => {\n      const { input } = config;\n\n      if (!(await isFile(input))) {\n        throw new CommandError(\n          `Input file not found: \"${input}\". Make sure that the \"input\" field in your snap config is correct.`,\n        );\n      }\n    },\n  },\n  {\n    name: 'Starting the development server.',\n    condition: ({ config }) => config.server.enabled,\n    task: async ({ config, options, spinner }) => {\n      const server = getServer(config);\n      const { port } = await server.listen(options.port ?? config.server.port);\n\n      info(`The server is listening on http://localhost:${port}.`, spinner);\n    },\n  },\n  {\n    name: 'Building the snap bundle.',\n    task: async ({ config, spinner }) => {\n      await watch(config, { spinner });\n    },\n  },\n];\n\n/**\n * Watch a directory and its subdirectories for changes, and build when files\n * are added or changed.\n *\n * Ignores 'node_modules' and dotfiles.\n * Creates destination directory if it doesn't exist.\n *\n * @param config - The config object.\n * @param options - The options object.\n */\nexport async function watchHandler(\n  config: ProcessedConfig,\n  options: WatchOptions,\n): Promise<void> {\n  await executeSteps(steps, { config, options });\n}\n"],"names":["watchHandler","steps","name","task","config","input","isFile","CommandError","condition","server","enabled","options","spinner","getServer","port","listen","info","watch","executeSteps"],"mappings":";;;;+BA8DsBA;;;eAAAA;;;4BA9DC;wBAGM;uBAEM;yBACT;gCACJ;AActB,MAAMC,QAA6B;IACjC;QACEC,MAAM;QACNC,MAAM,OAAO,EAAEC,MAAM,EAAE;YACrB,MAAM,EAAEC,KAAK,EAAE,GAAGD;YAElB,IAAI,CAAE,MAAME,IAAAA,kBAAM,EAACD,QAAS;gBAC1B,MAAM,IAAIE,oBAAY,CACpB,CAAC,uBAAuB,EAAEF,MAAM,mEAAmE,CAAC;YAExG;QACF;IACF;IACA;QACEH,MAAM;QACNM,WAAW,CAAC,EAAEJ,MAAM,EAAE,GAAKA,OAAOK,MAAM,CAACC,OAAO;QAChDP,MAAM,OAAO,EAAEC,MAAM,EAAEO,OAAO,EAAEC,OAAO,EAAE;YACvC,MAAMH,SAASI,IAAAA,kBAAS,EAACT;YACzB,MAAM,EAAEU,IAAI,EAAE,GAAG,MAAML,OAAOM,MAAM,CAACJ,QAAQG,IAAI,IAAIV,OAAOK,MAAM,CAACK,IAAI;YAEvEE,IAAAA,WAAI,EAAC,CAAC,4CAA4C,EAAEF,KAAK,CAAC,CAAC,EAAEF;QAC/D;IACF;IACA;QACEV,MAAM;QACNC,MAAM,OAAO,EAAEC,MAAM,EAAEQ,OAAO,EAAE;YAC9B,MAAMK,IAAAA,qBAAK,EAACb,QAAQ;gBAAEQ;YAAQ;QAChC;IACF;CACD;AAYM,eAAeZ,aACpBI,MAAuB,EACvBO,OAAqB;IAErB,MAAMO,IAAAA,mBAAY,EAACjB,OAAO;QAAEG;QAAQO;IAAQ;AAC9C"}