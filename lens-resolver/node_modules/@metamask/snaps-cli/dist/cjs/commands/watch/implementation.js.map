{"version":3,"sources":["../../../../src/commands/watch/implementation.ts"],"sourcesContent":["import { basename } from 'path';\nimport type { Watching } from 'webpack';\n\nimport type { ProcessedWebpackConfig } from '../../config';\nimport type { WebpackOptions } from '../../webpack';\nimport { getCompiler } from '../../webpack';\n\n/**\n * Build the snap bundle and watch for changes. This uses Webpack to build the\n * bundle.\n *\n * @param config - The config object.\n * @param options - The Webpack options.\n * @returns A promise that resolves when the bundle is built for the first time.\n * The promise resolves with a Webpack watching instance that can be used to\n * close the watcher.\n */\nexport async function watch(\n  config: ProcessedWebpackConfig,\n  options?: WebpackOptions,\n) {\n  const compiler = await getCompiler(config, {\n    evaluate: config.evaluate,\n    watch: true,\n    spinner: options?.spinner,\n  });\n\n  return new Promise<Watching>((resolve, reject) => {\n    compiler.watch(\n      {\n        ignored: [\n          '**/node_modules/**/*',\n          `**/${basename(config.output.path)}/**/*`,\n        ],\n      },\n      (watchError) => {\n        if (watchError) {\n          reject(watchError);\n          return;\n        }\n\n        resolve(compiler.watching);\n      },\n    );\n  });\n}\n"],"names":["watch","config","options","compiler","getCompiler","evaluate","spinner","Promise","resolve","reject","ignored","basename","output","path","watchError","watching"],"mappings":";;;;+BAiBsBA;;;eAAAA;;;sBAjBG;yBAKG;AAYrB,eAAeA,MACpBC,MAA8B,EAC9BC,OAAwB;IAExB,MAAMC,WAAW,MAAMC,IAAAA,oBAAW,EAACH,QAAQ;QACzCI,UAAUJ,OAAOI,QAAQ;QACzBL,OAAO;QACPM,SAASJ,SAASI;IACpB;IAEA,OAAO,IAAIC,QAAkB,CAACC,SAASC;QACrCN,SAASH,KAAK,CACZ;YACEU,SAAS;gBACP;gBACA,CAAC,GAAG,EAAEC,IAAAA,cAAQ,EAACV,OAAOW,MAAM,CAACC,IAAI,EAAE,KAAK,CAAC;aAC1C;QACH,GACA,CAACC;YACC,IAAIA,YAAY;gBACdL,OAAOK;gBACP;YACF;YAEAN,QAAQL,SAASY,QAAQ;QAC3B;IAEJ;AACF"}