{"version":3,"sources":["../../../../src/commands/manifest/implementation.ts"],"sourcesContent":["import { checkManifest, indent } from '@metamask/snaps-utils';\nimport { red, yellow } from 'chalk';\nimport type { Ora } from 'ora';\nimport { dirname } from 'path';\n\nimport { error, info, warn } from '../../utils';\n\n/**\n * Check the snap manifest file at the given path. If `write` is `true`, the\n * manifest will be written to disk if it is invalid. If `write` is `false`,\n * the manifest will not be written to disk, and the function will log any\n * errors and warnings to the console.\n *\n * @param path - The path to the manifest file.\n * @param write - Whether to write the manifest to disk if it is invalid.\n * @param spinner - An optional spinner to use for logging.\n */\nexport async function manifest(\n  path: string,\n  write: boolean,\n  spinner?: Ora,\n): Promise<boolean> {\n  const { warnings, errors, updated } = await checkManifest(\n    dirname(path),\n    write,\n  );\n\n  if (write && updated) {\n    info('The snap manifest file has been updated.', spinner);\n  }\n\n  if (!write && errors.length > 0) {\n    const formattedErrors = errors\n      .map((manifestError) => indent(red(`• ${manifestError}`)))\n      .join('\\n');\n\n    error(\n      `The snap manifest file is invalid.\\n\\n${formattedErrors}\\n\\nRun the command with the \\`--fix\\` flag to attempt to fix the manifest.`,\n      spinner,\n    );\n\n    spinner?.stop();\n    process.exitCode = 1;\n    return false;\n  }\n\n  if (warnings.length > 0) {\n    const formattedWarnings = warnings.map((manifestWarning) =>\n      indent(yellow(`• ${manifestWarning}`)),\n    );\n\n    warn(\n      `The snap manifest file has warnings.\\n\\n${formattedWarnings.join('\\n')}`,\n      spinner,\n    );\n  }\n\n  return true;\n}\n"],"names":["manifest","path","write","spinner","warnings","errors","updated","checkManifest","dirname","info","length","formattedErrors","map","manifestError","indent","red","join","error","stop","process","exitCode","formattedWarnings","manifestWarning","yellow","warn"],"mappings":";;;;+BAiBsBA;;;eAAAA;;;4BAjBgB;uBACV;sBAEJ;uBAEU;AAY3B,eAAeA,SACpBC,IAAY,EACZC,KAAc,EACdC,OAAa;IAEb,MAAM,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,OAAO,EAAE,GAAG,MAAMC,IAAAA,yBAAa,EACvDC,IAAAA,aAAO,EAACP,OACRC;IAGF,IAAIA,SAASI,SAAS;QACpBG,IAAAA,WAAI,EAAC,4CAA4CN;IACnD;IAEA,IAAI,CAACD,SAASG,OAAOK,MAAM,GAAG,GAAG;QAC/B,MAAMC,kBAAkBN,OACrBO,GAAG,CAAC,CAACC,gBAAkBC,IAAAA,kBAAM,EAACC,IAAAA,UAAG,EAAC,CAAC,EAAE,EAAEF,cAAc,CAAC,IACtDG,IAAI,CAAC;QAERC,IAAAA,YAAK,EACH,CAAC,sCAAsC,EAAEN,gBAAgB,2EAA2E,CAAC,EACrIR;QAGFA,SAASe;QACTC,QAAQC,QAAQ,GAAG;QACnB,OAAO;IACT;IAEA,IAAIhB,SAASM,MAAM,GAAG,GAAG;QACvB,MAAMW,oBAAoBjB,SAASQ,GAAG,CAAC,CAACU,kBACtCR,IAAAA,kBAAM,EAACS,IAAAA,aAAM,EAAC,CAAC,EAAE,EAAED,gBAAgB,CAAC;QAGtCE,IAAAA,WAAI,EACF,CAAC,wCAAwC,EAAEH,kBAAkBL,IAAI,CAAC,MAAM,CAAC,EACzEb;IAEJ;IAEA,OAAO;AACT"}