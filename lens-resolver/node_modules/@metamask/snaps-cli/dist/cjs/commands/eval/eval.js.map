{"version":3,"sources":["../../../../src/commands/eval/eval.ts"],"sourcesContent":["import { isFile } from '@metamask/snaps-utils';\nimport { resolve } from 'path';\n\nimport type { ProcessedConfig } from '../../config';\nimport { CommandError } from '../../errors';\nimport type { Steps } from '../../utils';\nimport { executeSteps, getRelativePath } from '../../utils';\nimport { evaluate } from './implementation';\n\nexport type EvalOptions = {\n  input?: string;\n};\n\nexport type EvalContext = Required<EvalOptions>;\n\nconst steps: Steps<EvalContext> = [\n  {\n    name: 'Checking the input file.',\n    task: async ({ input }) => {\n      if (!(await isFile(input))) {\n        const relativePath = getRelativePath(input);\n        throw new CommandError(\n          `Input file not found: \"${relativePath}\". Make sure that the \"input\" field in your snap config or the specified input file is correct.`,\n        );\n      }\n    },\n  },\n  {\n    name: 'Evaluating the snap bundle.',\n    task: async ({ input, spinner }) => {\n      await evaluate(input);\n      spinner.succeed('Snap bundle evaluated successfully.');\n    },\n  },\n];\n\n/**\n * Returns the path to the bundle, based on the config and options.\n *\n * - If `options.input` is specified, it is used as the bundle path.\n * - Otherwise, the bundle path is resolved from the config's output path and\n * filename.\n *\n * @param config - The processed config object.\n * @param options - The eval options.\n * @returns The path to the bundle.\n */\nfunction getBundlePath(config: ProcessedConfig, options: EvalOptions): string {\n  if (options.input) {\n    return resolve(process.cwd(), options.input);\n  }\n\n  return resolve(config.output.path, config.output.filename);\n}\n\n/**\n * Runs the snap in a worker, to ensure SES compatibility.\n *\n * @param config - The processed config object.\n * @param options - The eval options.\n * @returns A promise that resolves once the eval has finished.\n * @throws If the eval failed.\n */\nexport async function evaluateHandler(\n  config: ProcessedConfig,\n  options: EvalOptions = {},\n): Promise<void> {\n  const input = getBundlePath(config, options);\n  await executeSteps(steps, { input });\n}\n"],"names":["evaluateHandler","steps","name","task","input","isFile","relativePath","getRelativePath","CommandError","spinner","evaluate","succeed","getBundlePath","config","options","resolve","process","cwd","output","path","filename","executeSteps"],"mappings":";;;;+BA+DsBA;;;eAAAA;;;4BA/DC;sBACC;wBAGK;uBAEiB;gCACrB;AAQzB,MAAMC,QAA4B;IAChC;QACEC,MAAM;QACNC,MAAM,OAAO,EAAEC,KAAK,EAAE;YACpB,IAAI,CAAE,MAAMC,IAAAA,kBAAM,EAACD,QAAS;gBAC1B,MAAME,eAAeC,IAAAA,sBAAe,EAACH;gBACrC,MAAM,IAAII,oBAAY,CACpB,CAAC,uBAAuB,EAAEF,aAAa,+FAA+F,CAAC;YAE3I;QACF;IACF;IACA;QACEJ,MAAM;QACNC,MAAM,OAAO,EAAEC,KAAK,EAAEK,OAAO,EAAE;YAC7B,MAAMC,IAAAA,wBAAQ,EAACN;YACfK,QAAQE,OAAO,CAAC;QAClB;IACF;CACD;AAED;;;;;;;;;;CAUC,GACD,SAASC,cAAcC,MAAuB,EAAEC,OAAoB;IAClE,IAAIA,QAAQV,KAAK,EAAE;QACjB,OAAOW,IAAAA,aAAO,EAACC,QAAQC,GAAG,IAAIH,QAAQV,KAAK;IAC7C;IAEA,OAAOW,IAAAA,aAAO,EAACF,OAAOK,MAAM,CAACC,IAAI,EAAEN,OAAOK,MAAM,CAACE,QAAQ;AAC3D;AAUO,eAAepB,gBACpBa,MAAuB,EACvBC,UAAuB,CAAC,CAAC;IAEzB,MAAMV,QAAQQ,cAAcC,QAAQC;IACpC,MAAMO,IAAAA,mBAAY,EAACpB,OAAO;QAAEG;IAAM;AACpC"}