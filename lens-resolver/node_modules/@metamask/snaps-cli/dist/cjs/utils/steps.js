"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "executeSteps", {
    enumerable: true,
    get: function() {
        return executeSteps;
    }
});
const _chalk = require("chalk");
const _ora = /*#__PURE__*/ _interop_require_default(require("ora"));
const _errors = require("./errors");
const _logging = require("./logging");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function executeSteps(steps, context) {
    const spinner = (0, _ora.default)({
        // Ora writes to `process.stderr` by default.
        stream: process.stdout
    });
    spinner.start();
    try {
        for (const step of steps){
            // If the step has a condition, and it returns false, we skip the step.
            if (step.condition && !step.condition(context)) {
                continue;
            }
            // Calling `start` here instead of setting `spinner.text` seems to work
            // better when the process doesn't have a TTY.
            spinner.start((0, _chalk.dim)(step.name));
            await step.task({
                ...context,
                spinner
            });
        }
        // The spinner may have been stopped by a step, so we only succeed if it's
        // still spinning.
        if (spinner.isSpinning) {
            spinner.succeed('Done!');
        }
    } catch (_error) {
        (0, _logging.error)((0, _errors.getErrorMessage)(_error), spinner);
        spinner.stop();
        process.exitCode = 1;
    }
}

//# sourceMappingURL=steps.js.map