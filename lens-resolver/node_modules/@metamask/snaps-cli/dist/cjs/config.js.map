{"version":3,"sources":["../../src/config.ts"],"sourcesContent":["import {\n  createFromStruct,\n  file,\n  indent,\n  isFile,\n  literal,\n  union,\n  SnapsStructError,\n  named,\n} from '@metamask/snaps-utils';\nimport { hasProperty } from '@metamask/utils';\nimport { transform } from '@swc/core';\nimport type { BrowserifyObject } from 'browserify';\nimport { dim } from 'chalk';\nimport { readFile } from 'fs/promises';\nimport Module from 'module';\nimport { basename, dirname, resolve } from 'path';\nimport type { Infer } from 'superstruct';\nimport {\n  array,\n  boolean,\n  create,\n  defaulted,\n  define,\n  func,\n  number,\n  object,\n  optional,\n  record,\n  string,\n  type,\n  unknown,\n  empty,\n} from 'superstruct';\nimport type { Configuration as WebpackConfiguration } from 'webpack';\n\nimport { TranspilationModes } from './builders';\nimport { ConfigError } from './errors';\nimport type { YargsArgs } from './types/yargs';\nimport { CONFIG_FILE, TS_CONFIG_FILE } from './utils';\n\nconst CONFIG_FILES = [CONFIG_FILE, TS_CONFIG_FILE];\n\n/**\n * The configuration for the Snaps CLI, stored as `snap.config.js` or\n * `snap.config.ts` in the root of the project.\n *\n * @deprecated The Browserify bundler is deprecated and will be removed in a\n * future release. Use the Webpack bundler instead.\n */\nexport type SnapBrowserifyConfig = {\n  /**\n   * The bundler to use to build the snap. For backwards compatibility, if not\n   * specified, Browserify will be used. However, the Browserify bundler is\n   * deprecated and will be removed in a future release, so it's recommended to\n   * use the Webpack bundler instead.\n   */\n  bundler?: 'browserify';\n\n  /**\n   * The options for the Snaps CLI. These are merged with the options passed to\n   * the CLI, with the CLI options taking precedence.\n   *\n   * @deprecated The Browserify bundler is deprecated and will be removed in a\n   * future release. Use the Webpack bundler instead.\n   */\n  cliOptions?: {\n    /**\n     * The path to the snap bundle file.\n     *\n     * @default 'dist/bundle.js'\n     */\n    bundle?: string;\n\n    /**\n     * The directory to output the snap to. This is only used if `bundle` is\n     * not specified.\n     *\n     * @default 'dist'\n     */\n    dist?: string;\n\n    /**\n     * Whether to attempt to evaluate the snap in SES. This can catch some errors\n     * that would otherwise only be caught at runtime.\n     *\n     * @default true\n     */\n    eval?: boolean;\n\n    /**\n     * Whether to validate the snap manifest.\n     *\n     * @default true\n     */\n    manifest?: boolean;\n\n    /**\n     * The name of the bundle file. This is only used if `bundle` is not\n     * specified.\n     *\n     * @default 'bundle.js'\n     */\n    outfileName?: string;\n\n    /**\n     * The port to run the server on.\n     *\n     * @default 8081\n     */\n    port?: number;\n\n    /**\n     * The root directory to serve the snap from.\n     *\n     * @default `process.cwd()`\n     */\n    root?: string;\n\n    /**\n     * Whether to generate source maps for the snap bundle.\n     *\n     * @default false\n     */\n    sourceMaps?: boolean;\n\n    /**\n     * The path to the snap entry point.\n     *\n     * @default 'src/index.js'\n     */\n    src?: string;\n\n    /**\n     * Whether to remove comments from the bundle.\n     *\n     * @default true\n     */\n    stripComments?: boolean;\n\n    /**\n     * Whether to suppress warnings.\n     *\n     * @default false\n     */\n    suppressWarnings?: boolean;\n\n    /**\n     * The transpilation mode to use, which determines which files are\n     * transpiled.\n     *\n     * - `'localAndDeps'`: Transpile the snap entry point and all dependencies.\n     * - `'localOnly'`: Transpile only the snap entry point.\n     * - `'none'`: Don't transpile any files.\n     *\n     * @default 'localOnly'\n     */\n    transpilationMode?: 'localAndDeps' | 'localOnly' | 'none';\n\n    /**\n     * The dependencies to transpile when `transpilationMode` is set to\n     * `'localAndDeps'`. If not specified, all dependencies will be transpiled.\n     */\n    depsToTranspile?: string[];\n\n    /**\n     * Whether to show original errors.\n     *\n     * @default true\n     */\n    verboseErrors?: boolean;\n\n    /**\n     * Whether to write the updated manifest to disk.\n     *\n     * @default true\n     */\n    writeManifest?: boolean;\n\n    /**\n     * Whether to serve the snap locally.\n     *\n     * @default true\n     */\n    serve?: boolean;\n  };\n\n  /**\n   * A function that can be used to customize the Browserify instance used to\n   * build the snap.\n   *\n   * @param bundler - The Browserify instance.\n   * @deprecated The Browserify bundler is deprecated and will be removed in a\n   * future release. Use the Webpack bundler instead.\n   */\n  bundlerCustomizer?: (bundler: BrowserifyObject) => void;\n};\n\n/**\n * The configuration for the Snaps CLI, stored as `snap.config.js` or\n * `snap.config.ts` in the root of the project.\n */\nexport type SnapWebpackConfig = {\n  /**\n   * The bundler to use to build the snap. For backwards compatibility, if not\n   * specified, Browserify will be used. However, the Browserify bundler is\n   * deprecated and will be removed in a future release, so it's recommended to\n   * use the Webpack bundler instead.\n   */\n  bundler: 'webpack';\n\n  /**\n   * The path to the snap entry point. This should be a JavaScript or TypeScript\n   * file.\n   */\n  input: string;\n\n  /**\n   * Whether to generate source maps for the snap. If `true`, source maps will\n   * be generated as separate files. If `'inline'`, source maps will be\n   * inlined in the generated JavaScript bundle.\n   *\n   * @default true\n   */\n  sourceMap?: boolean | 'inline';\n\n  /**\n   * Whether to attempt to evaluate the snap in SES. This can catch some errors\n   * that would otherwise only be caught at runtime.\n   *\n   * @default true\n   */\n  evaluate?: boolean;\n\n  output?: {\n    /**\n     * The path to the directory where the snap will be built. This directory\n     * will be created if it doesn't exist.\n     *\n     * If the path is relative, it will be resolved relative to the current\n     * working directory.\n     *\n     * @default 'dist'\n     */\n    path?: string;\n\n    /**\n     * The name of the JavaScript bundle file.\n     *\n     * @default 'bundle.js'\n     */\n    filename?: string;\n\n    /**\n     * Whether to clean the output directory before building the snap. If\n     * `true`, the output directory will be deleted and recreated. Otherwise,\n     * the output directory will be left as-is.\n     *\n     * @default false\n     */\n    clean?: boolean;\n\n    /**\n     * Whether to minimize the snap bundle. If `true`, the bundle will be\n     * minified. Otherwise, the bundle will be left as-is.\n     *\n     * @default true\n     */\n    minimize?: boolean;\n  };\n\n  manifest?: {\n    /**\n     * The path to the snap manifest file. If the path is relative, it will be\n     * resolved relative to the current working directory.\n     *\n     * @default 'snap.manifest.json'\n     */\n    path?: string;\n\n    /**\n     * Whether to automatically update the manifest. If `true`, the manifest\n     * will be updated with the latest shasum of the snap bundle, and some\n     * common fields will be updated if they are missing or incorrect. If\n     * `false`, the manifest will be left as-is.\n     *\n     * @default true\n     */\n    update?: boolean;\n  };\n\n  server?: {\n    /**\n     * Whether to enable the local server. If `true`, the snap will be served\n     * from a local server, when running the `watch` command. If `false`, the\n     * snap will not be served.\n     *\n     * @default true\n     */\n    enabled?: boolean;\n\n    /**\n     * The root directory to serve the snap from. If the path is relative, it\n     * will be resolved relative to the current working directory.\n     *\n     * @default `process.cwd()`\n     */\n    root?: string;\n\n    /**\n     * The port to run the server on.\n     *\n     * @default 8081\n     */\n    port?: number;\n  };\n\n  /**\n   * The environment variables to set when building the snap. These will be\n   * available in the snap as `process.env`. In addition to these environment\n   * variables, the following environment variables will always be set:\n   *\n   * - `NODE_DEBUG`: `false`\n   * - `NODE_ENV`: `'production'`\n   * - `DEBUG`: `false`\n   *\n   * Any environment variables specified here will override these defaults. You\n   * can also override any variables here by setting them in your shell when\n   * running the CLI.\n   */\n  environment?: Record<string, unknown>;\n\n  /**\n   * Options that control the logging output of the CLI.\n   */\n  stats?: {\n    /**\n     * Whether to enable verbose logging.\n     *\n     * @default false\n     */\n    verbose?: boolean;\n\n    /**\n     * Whether to log warnings about unresolved built-in modules. If `false`,\n     * warnings will not be logged.\n     */\n    builtIns?:\n      | {\n          /**\n           * The built-in modules to ignore when resolving modules. If a module\n           * is ignored, no warning will be logged if it is not resolved.\n           */\n          ignore?: string[];\n        }\n      | false;\n\n    /**\n     * Whether to log warnings about the use of the `Buffer` global. If `false`,\n     * warnings will not be logged. If `true`, the CLI will warn if the `Buffer`\n     * global is used, but not provided by Webpack's `DefinePlugin`.\n     */\n    buffer?: boolean;\n  };\n\n  /**\n   * Whether to provide polyfills for node builtins. If `true`, all the available\n   * polyfills will be provided. If `false` no polyfills will be provided. If a\n   * configuration object is passed only the polyfills set to `true` will be provided.\n   *\n   * @default false\n   * @example\n   * ```ts\n   * polyfills: true\n   *\n   * // or\n   *\n   * polyfills: {\n   *  assert: true,\n   *  buffer: true\n   * }\n   * ```\n   */\n  polyfills?:\n    | boolean\n    | {\n        assert?: boolean;\n        buffer?: boolean;\n        console?: boolean;\n        constants?: boolean;\n        crypto?: boolean;\n        domain?: boolean;\n        events?: boolean;\n        http?: boolean;\n        https?: boolean;\n        os?: boolean;\n        path?: boolean;\n        punycode?: boolean;\n        process?: boolean;\n        querystring?: boolean;\n        stream?: boolean;\n        /* eslint-disable @typescript-eslint/naming-convention */\n        _stream_duplex?: boolean;\n        _stream_passthrough?: boolean;\n        _stream_readable?: boolean;\n        _stream_transform?: boolean;\n        _stream_writable?: boolean;\n        string_decoder?: boolean;\n        /* eslint-enable @typescript-eslint/naming-convention */\n        sys?: boolean;\n        timers?: boolean;\n        tty?: boolean;\n        url?: boolean;\n        util?: boolean;\n        vm?: boolean;\n        zlib?: boolean;\n      };\n\n  /**\n   * A function to customize the Webpack configuration used to build the snap.\n   * This function will be called with the default Webpack configuration, and\n   * should return the modified configuration. If not specified, the default\n   * configuration will be used.\n   *\n   * It's recommended to use the `webpack-merge` package to merge the default\n   * configuration with your customizations. The merge function is exported as\n   * `merge` from the `@metamask/snaps-cli` package.\n   *\n   * @example\n   * ```ts\n   * import type { SnapsConfig } from '@metamask/snaps-cli';\n   * import { merge } from '@metamask/snaps-cli';\n   *\n   * const config: SnapsConfig = {\n   *   bundler: 'webpack',\n   *   entry: 'src/index.ts',\n   *   customizeWebpackConfig: (config) => merge(config, {\n   *     module: {\n   *       rules: [\n   *         {\n   *           test: /\\.wasm$/,\n   *           type: 'assets/resource',\n   *         },\n   *       ],\n   *     },\n   *   }),\n   * };\n   *\n   * export default config;\n   * ```\n   */\n  customizeWebpackConfig?: (\n    config: WebpackConfiguration,\n  ) => WebpackConfiguration;\n\n  /**\n   * Experimental features that can be enabled. These features are not\n   * guaranteed to be stable, and may be removed or changed in a future release.\n   */\n  experimental?: {\n    /**\n     * Whether to enable WebAssembly support. If `true`, the Webpack\n     * configuration will be modified to support WebAssembly. If `false`, the\n     * Webpack configuration will not be modified.\n     *\n     * @default false\n     */\n    wasm?: boolean;\n  };\n};\n\n/**\n * The configuration for the Snaps CLI, stored as `snap.config.js` or\n * `snap.config.ts` in the root of the project.\n */\nexport type SnapConfig = SnapBrowserifyConfig | SnapWebpackConfig;\n\ntype SnapsBrowserifyBundlerCustomizerFunction = (\n  bundler: BrowserifyObject,\n) => void;\n\n// This struct is essentially the same as the `func` struct, but it's defined\n// separately so that we include the function type in the inferred TypeScript\n// type definitions.\nconst SnapsBrowserifyBundlerCustomizerFunctionStruct =\n  define<SnapsBrowserifyBundlerCustomizerFunction>(\n    'function',\n    func().validator,\n  );\n\nexport const SnapsBrowserifyConfigStruct = object({\n  bundler: defaulted(literal('browserify'), 'browserify'),\n  cliOptions: defaulted(\n    object({\n      bundle: optional(file()),\n      dist: defaulted(file(), 'dist'),\n      eval: defaulted(boolean(), true),\n      manifest: defaulted(boolean(), true),\n      port: defaulted(number(), 8081),\n      outfileName: defaulted(string(), 'bundle.js'),\n      root: defaulted(file(), process.cwd()),\n      sourceMaps: defaulted(boolean(), false),\n      src: defaulted(file(), 'src/index.js'),\n      stripComments: defaulted(boolean(), true),\n      suppressWarnings: defaulted(boolean(), false),\n      transpilationMode: defaulted(\n        union([literal('localAndDeps'), literal('localOnly'), literal('none')]),\n        'localOnly',\n      ),\n      depsToTranspile: defaulted(array(string()), []),\n      verboseErrors: defaulted(boolean(), true),\n      writeManifest: defaulted(boolean(), true),\n      serve: defaulted(boolean(), true),\n    }),\n    {},\n  ),\n  bundlerCustomizer: optional(SnapsBrowserifyBundlerCustomizerFunctionStruct),\n});\n\ntype SnapsWebpackCustomizeWebpackConfigFunction = (\n  config: WebpackConfiguration,\n) => WebpackConfiguration;\n\n// This struct is essentially the same as the `func` struct, but it's defined\n// separately so that we include the function type in the inferred TypeScript\n// type definitions.\nconst SnapsWebpackCustomizeWebpackConfigFunctionStruct =\n  define<SnapsWebpackCustomizeWebpackConfigFunction>(\n    'function',\n    func().validator,\n  );\n\nexport const SnapsWebpackConfigStruct = object({\n  bundler: literal('webpack'),\n  input: defaulted(file(), resolve(process.cwd(), 'src/index.js')),\n  sourceMap: defaulted(union([boolean(), literal('inline')]), true),\n  evaluate: defaulted(boolean(), true),\n\n  output: defaulted(\n    object({\n      path: defaulted(file(), resolve(process.cwd(), 'dist')),\n      filename: defaulted(string(), 'bundle.js'),\n      clean: defaulted(boolean(), false),\n      minimize: defaulted(boolean(), true),\n    }),\n    {},\n  ),\n\n  manifest: defaulted(\n    object({\n      path: defaulted(file(), resolve(process.cwd(), 'snap.manifest.json')),\n      update: defaulted(boolean(), true),\n    }),\n    {},\n  ),\n\n  server: defaulted(\n    object({\n      enabled: defaulted(boolean(), true),\n      root: defaulted(file(), process.cwd()),\n      port: defaulted(number(), 8081),\n    }),\n    {},\n  ),\n\n  environment: defaulted(record(string(), unknown()), {\n    NODE_DEBUG: false,\n    NODE_ENV: 'production',\n    DEBUG: false,\n  }),\n\n  stats: defaulted(\n    object({\n      verbose: defaulted(boolean(), false),\n      builtIns: defaulted(\n        union([\n          object({ ignore: defaulted(array(string()), []) }),\n          literal(false),\n        ]),\n        {},\n      ),\n      buffer: defaulted(boolean(), true),\n    }),\n    {},\n  ),\n\n  polyfills: defaulted(\n    union([\n      boolean(),\n      object({\n        assert: defaulted(boolean(), false),\n        buffer: defaulted(boolean(), false),\n        console: defaulted(boolean(), false),\n        constants: defaulted(boolean(), false),\n        crypto: defaulted(boolean(), false),\n        domain: defaulted(boolean(), false),\n        events: defaulted(boolean(), false),\n        http: defaulted(boolean(), false),\n        https: defaulted(boolean(), false),\n        os: defaulted(boolean(), false),\n        path: defaulted(boolean(), false),\n        punycode: defaulted(boolean(), false),\n        process: defaulted(boolean(), false),\n        querystring: defaulted(boolean(), false),\n        stream: defaulted(boolean(), false),\n        /* eslint-disable @typescript-eslint/naming-convention */\n        _stream_duplex: defaulted(boolean(), false),\n        _stream_passthrough: defaulted(boolean(), false),\n        _stream_readable: defaulted(boolean(), false),\n        _stream_transform: defaulted(boolean(), false),\n        _stream_writable: defaulted(boolean(), false),\n        string_decoder: defaulted(boolean(), false),\n        /* eslint-enable @typescript-eslint/naming-convention */\n        sys: defaulted(boolean(), false),\n        timers: defaulted(boolean(), false),\n        tty: defaulted(boolean(), false),\n        url: defaulted(boolean(), false),\n        util: defaulted(boolean(), false),\n        vm: defaulted(boolean(), false),\n        zlib: defaulted(boolean(), false),\n      }),\n    ]),\n    false,\n  ),\n\n  customizeWebpackConfig: optional(\n    SnapsWebpackCustomizeWebpackConfigFunctionStruct,\n  ),\n\n  experimental: defaulted(\n    object({\n      wasm: defaulted(boolean(), false),\n    }),\n    {},\n  ),\n});\n\nexport const SnapsConfigStruct = type({\n  bundler: defaulted(\n    union([literal('browserify'), literal('webpack')]),\n    'browserify',\n  ),\n});\n\nexport const LegacyOptionsStruct = union([\n  named(\n    'object with `transpilationMode` set to `localAndDeps` and `depsToTranspile` set to an array of strings',\n    type({\n      depsToTranspile: array(string()),\n      transpilationMode: literal(TranspilationModes.LocalAndDeps),\n      writeManifest: boolean(),\n      bundlerCustomizer: optional(\n        SnapsBrowserifyBundlerCustomizerFunctionStruct,\n      ),\n    }),\n  ),\n  named(\n    'object without `depsToTranspile`',\n    type({\n      depsToTranspile: named('empty array', empty(array())),\n      transpilationMode: union([\n        literal(TranspilationModes.LocalOnly),\n        literal(TranspilationModes.None),\n      ]),\n      writeManifest: boolean(),\n      bundlerCustomizer: optional(\n        SnapsBrowserifyBundlerCustomizerFunctionStruct,\n      ),\n    }),\n  ),\n]);\n\nexport type LegacyOptions = Infer<typeof LegacyOptionsStruct>;\n\nexport type ProcessedBrowserifyConfig = Infer<\n  typeof SnapsBrowserifyConfigStruct\n>;\n\nexport type ProcessedWebpackConfig = Infer<typeof SnapsWebpackConfigStruct> & {\n  /**\n   * The legacy Browserify config, if the bundler is Browserify. This is used\n   * to support the legacy config format.\n   */\n  legacy?: LegacyOptions;\n};\n\nexport type ProcessedConfig = ProcessedWebpackConfig;\n\n/**\n * Get a validated snap config. This validates the config and adds default\n * values for any missing properties.\n *\n * @param config - The config to validate.\n * @param argv - The CLI arguments.\n * @returns The validated config.\n */\nexport function getConfig(config: unknown, argv: YargsArgs): ProcessedConfig {\n  const prefix = 'The snap config file is invalid';\n  const suffix = dim(\n    // TODO: Link to `docs.metamask.io` once the docs are published.\n    'Refer to the documentation for more information: https://github.com/MetaMask/snaps/tree/main/packages/snaps-cli/',\n  );\n\n  const { bundler } = createFromStruct(\n    config,\n    SnapsConfigStruct,\n    prefix,\n    suffix,\n  );\n\n  if (bundler === 'browserify') {\n    const legacyConfig = createFromStruct(\n      config,\n      SnapsBrowserifyConfigStruct,\n      prefix,\n      suffix,\n    );\n\n    return getWebpackConfig(mergeLegacyOptions(argv, legacyConfig));\n  }\n\n  return createFromStruct(config, SnapsWebpackConfigStruct, prefix, suffix);\n}\n\n/**\n * Load a snap config from a file. This supports both JavaScript and TypeScript\n * config files, in the CommonJS module format and the ES module format.\n *\n * This assumes that the config file exports a default object, either through\n * `module.exports` or `export default`.\n *\n * @param path - The full path to the config file.\n * @param argv - The CLI arguments.\n * @returns The validated config.\n * @throws If the config file is invalid, or if the config file does not have a\n * default export.\n */\nexport async function loadConfig(path: string, argv: YargsArgs) {\n  try {\n    const contents = await readFile(path, 'utf8');\n    const source = await transform(contents, {\n      swcrc: false,\n      jsc: {\n        parser: {\n          syntax: 'typescript',\n        },\n      },\n      module: {\n        type: 'commonjs',\n      },\n    });\n\n    const config = new Module(path);\n\n    // @ts-expect-error - This function is not typed.\n    config.paths = Module._nodeModulePaths(dirname(path));\n\n    // @ts-expect-error - This function is not typed.\n    config._compile(source.code, path);\n\n    if (!hasProperty(config.exports, 'default')) {\n      return getConfig(config.exports, argv);\n    }\n\n    return getConfig(config.exports.default, argv);\n  } catch (error) {\n    if (error instanceof SnapsStructError) {\n      throw new ConfigError(error.message);\n    }\n\n    throw new ConfigError(\n      `Unable to load snap config file at \"${path}\".\\n\\n${indent(\n        error.message,\n      )}`,\n    );\n  }\n}\n\n/**\n * Resolve a snap config. This function will look for a `snap.config.js` or\n * `snap.config.ts` file in the current or specified directory.\n *\n * @param path - The path to resolve the snap config from. Defaults to the\n * current working directory.\n * @param argv - The CLI arguments.\n * @returns The resolved and validated snap config.\n * @throws If a snap config could not be found.\n */\nexport async function resolveConfig(path: string, argv: YargsArgs) {\n  for (const configFile of CONFIG_FILES) {\n    const filePath = resolve(path, configFile);\n    if (await isFile(filePath)) {\n      return await loadConfig(filePath, argv);\n    }\n  }\n\n  throw new ConfigError(\n    `Could not find a \"snap.config.js\" or \"snap.config.ts\" file in the current or specified directory (\"${path}\").`,\n  );\n}\n\n/**\n * Get a snap config from the CLI arguments. This will either load the config\n * from the specified config file, or resolve the config from the current\n * working directory.\n *\n * @param argv - The CLI arguments.\n * @param cwd - The current working directory. Defaults to `process.cwd()`.\n * @returns The resolved and validated snap config.\n */\nexport async function getConfigByArgv(\n  argv: YargsArgs,\n  cwd: string = process.cwd(),\n) {\n  if (argv.config) {\n    if (!(await isFile(argv.config))) {\n      throw new ConfigError(\n        `Could not find a config file at \"${argv.config}\". Make sure that the path is correct.`,\n      );\n    }\n\n    return await loadConfig(argv.config, argv);\n  }\n\n  return await resolveConfig(cwd, argv);\n}\n\n/**\n * Merge legacy CLI options into the config. This is used to support the legacy\n * config format, where options can be specified both in the config file and\n * through CLI flags.\n *\n * @param argv - The CLI arguments.\n * @param config - The config to merge the CLI options into.\n * @returns The config with the CLI options merged in.\n * @deprecated This function is only used to support the legacy config format.\n */\nexport function mergeLegacyOptions(\n  argv: YargsArgs,\n  config: ProcessedBrowserifyConfig,\n) {\n  const cliOptions = Object.keys(config.cliOptions).reduce<\n    ProcessedBrowserifyConfig['cliOptions']\n  >((accumulator, key) => {\n    if (argv[key] !== undefined) {\n      return {\n        ...accumulator,\n        [key]: argv[key],\n      };\n    }\n\n    return accumulator;\n  }, config.cliOptions);\n\n  return {\n    ...config,\n    cliOptions,\n  };\n}\n\n/**\n * Get a Webpack config from a legacy browserify config. This is used to\n * support the legacy config format, and convert it to the new format.\n *\n * @param legacyConfig - The legacy browserify config.\n * @returns The Webpack config.\n */\nexport function getWebpackConfig(\n  legacyConfig: ProcessedBrowserifyConfig,\n): ProcessedWebpackConfig {\n  const defaultConfig = create(\n    { bundler: 'webpack' },\n    SnapsWebpackConfigStruct,\n  );\n\n  // The legacy config has two options for specifying the output path and\n  // filename: `bundle`, and `dist` + `outfileName`. If `bundle` is specified,\n  // we use that as the output path and filename. Otherwise, we use `dist` and\n  // `outfileName`.\n  const path = legacyConfig.cliOptions.bundle\n    ? dirname(legacyConfig.cliOptions.bundle)\n    : legacyConfig.cliOptions.dist;\n\n  const filename = legacyConfig.cliOptions.bundle\n    ? basename(legacyConfig.cliOptions.bundle)\n    : legacyConfig.cliOptions.outfileName;\n\n  return {\n    ...defaultConfig,\n    input: legacyConfig.cliOptions.src,\n    evaluate: legacyConfig.cliOptions.eval,\n    sourceMap: legacyConfig.cliOptions.sourceMaps,\n    output: {\n      path,\n      filename,\n\n      // The legacy config has an option to remove comments from the bundle, but\n      // the terser plugin does this by default, so we only enable the terser if\n      // the legacy config has `stripComments` set to `true`. This is not a\n      // perfect solution, but it's the best we can do without breaking the\n      // legacy config.\n      minimize: legacyConfig.cliOptions.stripComments,\n\n      // The legacy config does not have a `clean` option, so we default to\n      // `false` here.\n      clean: false,\n    },\n    manifest: {\n      // The legacy config does not have a `manifest` option, so we default to\n      // `process.cwd()/snap.manifest.json`.\n      path: resolve(process.cwd(), 'snap.manifest.json'),\n      update: legacyConfig.cliOptions.writeManifest,\n    },\n    server: {\n      enabled: legacyConfig.cliOptions.serve,\n      port: legacyConfig.cliOptions.port,\n      root: legacyConfig.cliOptions.root,\n    },\n    stats: {\n      verbose: false,\n\n      // These plugins are designed to be used with the modern config format, so\n      // we disable them for the legacy config format.\n      builtIns: false,\n      buffer: false,\n    },\n    legacy: createFromStruct(\n      {\n        ...legacyConfig.cliOptions,\n        bundlerCustomizer: legacyConfig.bundlerCustomizer,\n      },\n      LegacyOptionsStruct,\n      'Invalid Browserify CLI options',\n    ),\n  };\n}\n"],"names":["SnapsBrowserifyConfigStruct","SnapsWebpackConfigStruct","SnapsConfigStruct","LegacyOptionsStruct","getConfig","loadConfig","resolveConfig","getConfigByArgv","mergeLegacyOptions","getWebpackConfig","CONFIG_FILES","CONFIG_FILE","TS_CONFIG_FILE","SnapsBrowserifyBundlerCustomizerFunctionStruct","define","func","validator","object","bundler","defaulted","literal","cliOptions","bundle","optional","file","dist","eval","boolean","manifest","port","number","outfileName","string","root","process","cwd","sourceMaps","src","stripComments","suppressWarnings","transpilationMode","union","depsToTranspile","array","verboseErrors","writeManifest","serve","bundlerCustomizer","SnapsWebpackCustomizeWebpackConfigFunctionStruct","input","resolve","sourceMap","evaluate","output","path","filename","clean","minimize","update","server","enabled","environment","record","unknown","NODE_DEBUG","NODE_ENV","DEBUG","stats","verbose","builtIns","ignore","buffer","polyfills","assert","console","constants","crypto","domain","events","http","https","os","punycode","querystring","stream","_stream_duplex","_stream_passthrough","_stream_readable","_stream_transform","_stream_writable","string_decoder","sys","timers","tty","url","util","vm","zlib","customizeWebpackConfig","experimental","wasm","type","named","TranspilationModes","LocalAndDeps","empty","LocalOnly","None","config","argv","prefix","suffix","dim","createFromStruct","legacyConfig","contents","readFile","source","transform","swcrc","jsc","parser","syntax","module","Module","paths","_nodeModulePaths","dirname","_compile","code","hasProperty","exports","default","error","SnapsStructError","ConfigError","message","indent","configFile","filePath","isFile","Object","keys","reduce","accumulator","key","undefined","defaultConfig","create","basename","legacy"],"mappings":"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"}