"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "cli", {
    enumerable: true,
    get: function() {
        return cli;
    }
});
const _yargs = /*#__PURE__*/ _interop_require_default(require("yargs"));
const _helpers = require("yargs/helpers");
const _builders = /*#__PURE__*/ _interop_require_default(require("./builders"));
const _config = require("./config");
const _utils = require("./utils");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
async function cli(argv, commands) {
    await (0, _yargs.default)((0, _helpers.hideBin)(argv)).scriptName('mm-snap').usage('Usage: $0 <command> [options]').example('$0 build', `Build './src/index.js' as './dist/bundle.js'`).example('$0 build --config ./snap.config.build.ts', `Build './src/index.js' as './dist/bundle.js' using the config in './snap.config.build.ts'`).example('$0 manifest --fix', `Check the snap manifest, and fix any errors`).example('$0 watch --port 8000', `The snap input file for changes, and serve it on port 8000`).example('$0 serve --port 8000', `Serve the snap bundle on port 8000`).command(commands).option('config', _builders.default.config).option('verboseErrors', _builders.default.verboseErrors).option('suppressWarnings', _builders.default.suppressWarnings).strict().middleware(async (args)=>{
        // eslint-disable-next-line require-atomic-updates
        args.context = {
            config: await (0, _config.getConfigByArgv)(args)
        };
        (0, _utils.sanitizeInputs)(args);
    }, false).demandCommand(1, 'You must specify at least one command.').fail((message, failure)=>{
        (0, _utils.error)((0, _utils.getYargsErrorMessage)(message, failure));
        // eslint-disable-next-line n/no-process-exit
        process.exit(1);
    }).help().alias('help', 'h').parseAsync();
}

//# sourceMappingURL=cli.js.map