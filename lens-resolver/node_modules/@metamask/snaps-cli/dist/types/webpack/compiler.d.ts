import type { Server } from 'http';
import type { ProcessedConfig, ProcessedWebpackConfig } from '../config';
import type { WebpackOptions } from './config';
/**
 * Get a Webpack compiler for the given config.
 *
 * @param config - The config object.
 * @param options - The Webpack options.
 * @returns The Webpack compiler.
 */
export declare function getCompiler(config: ProcessedWebpackConfig, options?: WebpackOptions): Promise<import("webpack").Compiler>;
/**
 * Get a static server for development purposes.
 *
 * Note: We're intentionally not using `webpack-dev-server` here because it
 * adds a lot of extra stuff to the output that we don't need, and it's
 * difficult to customize.
 *
 * @param config - The config object.
 * @returns An object with a `listen` method that returns a promise that
 * resolves when the server is listening.
 */
export declare function getServer(config: ProcessedConfig): {
    listen: (port?: number) => Promise<{
        port: number;
        server: Server;
        close: () => Promise<void>;
    }>;
};
