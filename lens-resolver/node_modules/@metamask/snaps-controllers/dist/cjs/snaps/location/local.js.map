{"version":3,"sources":["../../../../src/snaps/location/local.ts"],"sourcesContent":["import type { SnapManifest, VirtualFile } from '@metamask/snaps-utils';\nimport { LocalSnapIdStruct, SnapIdPrefixes } from '@metamask/snaps-utils';\nimport { assert, assertStruct } from '@metamask/utils';\n\nimport type { HttpOptions } from './http';\nimport { HttpLocation } from './http';\nimport type { SnapLocation } from './location';\n\nexport class LocalLocation implements SnapLocation {\n  readonly #http: HttpLocation;\n\n  constructor(url: URL, opts: HttpOptions = {}) {\n    assertStruct(url.toString(), LocalSnapIdStruct, 'Invalid Snap Id');\n    // TODO(ritave): Write deepMerge() which merges fetchOptions.\n    assert(\n      opts.fetchOptions === undefined,\n      'Currently adding fetch options to local: is unsupported.',\n    );\n\n    this.#http = new HttpLocation(\n      new URL(url.toString().slice(SnapIdPrefixes.local.length)),\n      { ...opts, fetchOptions: { cache: 'no-cache' } },\n    );\n  }\n\n  async manifest(): Promise<VirtualFile<SnapManifest>> {\n    const vfile = await this.#http.manifest();\n\n    return convertCanonical(vfile);\n  }\n\n  async fetch(path: string): Promise<VirtualFile> {\n    return convertCanonical(await this.#http.fetch(path));\n  }\n\n  get shouldAlwaysReload() {\n    return true;\n  }\n}\n\n/**\n * Converts vfiles with canonical `http:` paths into `local:` paths.\n *\n * @param vfile - The {@link VirtualFile} to convert.\n * @returns The same object with updated `.data.canonicalPath`.\n */\nfunction convertCanonical<Result>(\n  vfile: VirtualFile<Result>,\n): VirtualFile<Result> {\n  assert(vfile.data.canonicalPath !== undefined);\n  vfile.data.canonicalPath = `local:${vfile.data.canonicalPath}`;\n  return vfile;\n}\n"],"names":["LocalLocation","manifest","vfile","http","convertCanonical","fetch","path","shouldAlwaysReload","constructor","url","opts","assertStruct","toString","LocalSnapIdStruct","assert","fetchOptions","undefined","HttpLocation","URL","slice","SnapIdPrefixes","local","length","cache","data","canonicalPath"],"mappings":";;;;+BAQaA;;;eAAAA;;;4BAPqC;uBACb;sBAGR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAIlB;AADJ,MAAMA;IAiBX,MAAMC,WAA+C;QACnD,MAAMC,QAAQ,MAAM,yBAAA,IAAI,EAAEC,QAAKF,QAAQ;QAEvC,OAAOG,iBAAiBF;IAC1B;IAEA,MAAMG,MAAMC,IAAY,EAAwB;QAC9C,OAAOF,iBAAiB,MAAM,yBAAA,IAAI,EAAED,QAAKE,KAAK,CAACC;IACjD;IAEA,IAAIC,qBAAqB;QACvB,OAAO;IACT;IA1BAC,YAAYC,GAAQ,EAAEC,OAAoB,CAAC,CAAC,CAAE;QAF9C,gCAAS;;mBAAT,KAAA;;QAGEC,IAAAA,mBAAY,EAACF,IAAIG,QAAQ,IAAIC,6BAAiB,EAAE;QAChD,6DAA6D;QAC7DC,IAAAA,aAAM,EACJJ,KAAKK,YAAY,KAAKC,WACtB;uCAGIb,QAAO,IAAIc,kBAAY,CAC3B,IAAIC,IAAIT,IAAIG,QAAQ,GAAGO,KAAK,CAACC,0BAAc,CAACC,KAAK,CAACC,MAAM,IACxD;YAAE,GAAGZ,IAAI;YAAEK,cAAc;gBAAEQ,OAAO;YAAW;QAAE;IAEnD;AAeF;AAEA;;;;;CAKC,GACD,SAASnB,iBACPF,KAA0B;IAE1BY,IAAAA,aAAM,EAACZ,MAAMsB,IAAI,CAACC,aAAa,KAAKT;IACpCd,MAAMsB,IAAI,CAACC,aAAa,GAAG,CAAC,MAAM,EAAEvB,MAAMsB,IAAI,CAACC,aAAa,CAAC,CAAC;IAC9D,OAAOvB;AACT"}