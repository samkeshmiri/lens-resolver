{"version":3,"sources":["../../../src/services/ExecutionService.ts"],"sourcesContent":["import type { RestrictedControllerMessenger } from '@metamask/base-controller';\nimport type { SnapId, SnapRpcHookArgs } from '@metamask/snaps-utils';\nimport type { Json } from '@metamask/types';\n\ntype TerminateSnap = (snapId: string) => Promise<void>;\ntype TerminateAll = () => Promise<void>;\ntype ExecuteSnap = (snapData: SnapExecutionData) => Promise<unknown>;\n\ntype HandleRpcRequest = (\n  snapId: string,\n  options: SnapRpcHookArgs,\n) => Promise<unknown>;\n\nexport interface ExecutionService {\n  terminateSnap: TerminateSnap;\n  terminateAllSnaps: TerminateAll;\n  executeSnap: ExecuteSnap;\n  handleRpcRequest: HandleRpcRequest;\n}\n\nexport type SnapExecutionData = {\n  snapId: string;\n  sourceCode: string;\n  endowments?: Json;\n};\n\nexport type SnapErrorJson = {\n  message: string;\n  code: number;\n  data?: Json;\n};\n\nconst controllerName = 'ExecutionService';\n\nexport type ErrorMessageEvent = {\n  type: 'ExecutionService:unhandledError';\n  payload: [SnapId, SnapErrorJson];\n};\n\nexport type OutboundRequest = {\n  type: 'ExecutionService:outboundRequest';\n  payload: [SnapId];\n};\n\nexport type OutboundResponse = {\n  type: 'ExecutionService:outboundResponse';\n  payload: [SnapId];\n};\n\nexport type ExecutionServiceEvents =\n  | ErrorMessageEvent\n  | OutboundRequest\n  | OutboundResponse;\n\n/**\n * Handles RPC request.\n */\nexport type HandleRpcRequestAction = {\n  type: `${typeof controllerName}:handleRpcRequest`;\n  handler: ExecutionService['handleRpcRequest'];\n};\n\n/**\n * Executes a given snap.\n */\nexport type ExecuteSnapAction = {\n  type: `${typeof controllerName}:executeSnap`;\n  handler: ExecutionService['executeSnap'];\n};\n\n/**\n * Terminates a given snap.\n */\nexport type TerminateSnapAction = {\n  type: `${typeof controllerName}:terminateSnap`;\n  handler: ExecutionService['terminateSnap'];\n};\n\n/**\n * Terminates all snaps.\n */\nexport type TerminateAllSnapsAction = {\n  type: `${typeof controllerName}:terminateAllSnaps`;\n  handler: ExecutionService['terminateAllSnaps'];\n};\n\nexport type ExecutionServiceActions =\n  | HandleRpcRequestAction\n  | ExecuteSnapAction\n  | TerminateSnapAction\n  | TerminateAllSnapsAction;\n\nexport type ExecutionServiceMessenger = RestrictedControllerMessenger<\n  'ExecutionService',\n  ExecutionServiceActions,\n  ExecutionServiceEvents,\n  ExecutionServiceActions['type'],\n  ExecutionServiceEvents['type']\n>;\n"],"names":["controllerName"],"mappings":";;;;AAgCA,MAAMA,iBAAiB"}