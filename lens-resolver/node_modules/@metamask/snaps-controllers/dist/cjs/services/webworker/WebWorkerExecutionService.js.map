{"version":3,"sources":["../../../../src/services/webworker/WebWorkerExecutionService.ts"],"sourcesContent":["import type { BasePostMessageStream } from '@metamask/post-message-stream';\nimport { WindowPostMessageStream } from '@metamask/post-message-stream';\nimport { createWindow } from '@metamask/snaps-utils';\nimport { assert } from '@metamask/utils';\nimport { nanoid } from 'nanoid';\n\nimport type { ExecutionServiceArgs, Job } from '../AbstractExecutionService';\nimport { AbstractExecutionService } from '../AbstractExecutionService';\nimport { ProxyPostMessageStream } from '../ProxyPostMessageStream';\n\ntype WebWorkerExecutionEnvironmentServiceArgs = {\n  documentUrl: URL;\n} & ExecutionServiceArgs;\n\nexport const WORKER_POOL_ID = 'snaps-worker-pool';\n\nexport class WebWorkerExecutionService extends AbstractExecutionService<string> {\n  #documentUrl: URL;\n\n  #runtimeStream?: BasePostMessageStream;\n\n  /**\n   * Create a new webworker execution service.\n   *\n   * @param args - The constructor arguments.\n   * @param args.documentUrl - The URL of the worker pool document to use as the\n   * execution environment.\n   * @param args.messenger - The messenger to use for communication with the\n   * `SnapController`.\n   * @param args.setupSnapProvider - The function to use to set up the snap\n   * provider.\n   */\n  constructor({\n    documentUrl,\n    messenger,\n    setupSnapProvider,\n  }: WebWorkerExecutionEnvironmentServiceArgs) {\n    super({\n      messenger,\n      setupSnapProvider,\n    });\n\n    this.#documentUrl = documentUrl;\n  }\n\n  /**\n   * Send a termination command to the worker pool document.\n   *\n   * @param job - The job to terminate.\n   */\n  protected async terminateJob(job: Job<string>) {\n    // The `AbstractExecutionService` will have already closed the job stream,\n    // so we write to the runtime stream directly.\n    assert(this.#runtimeStream, 'Runtime stream not initialized.');\n    this.#runtimeStream.write({\n      jobId: job.id,\n      data: {\n        jsonrpc: '2.0',\n        method: 'terminateJob',\n        id: nanoid(),\n      },\n    });\n  }\n\n  /**\n   * Create a new stream for the specified job. This wraps the runtime stream\n   * in a stream specific to the job.\n   *\n   * @param jobId - The job ID.\n   */\n  protected async initEnvStream(jobId: string) {\n    // Lazily create the worker pool document.\n    await this.createDocument();\n\n    // `createDocument` should have initialized the runtime stream.\n    assert(this.#runtimeStream, 'Runtime stream not initialized.');\n\n    const stream = new ProxyPostMessageStream({\n      stream: this.#runtimeStream,\n      jobId,\n    });\n\n    return { worker: jobId, stream };\n  }\n\n  /**\n   * Creates the worker pool document to be used as the execution environment.\n   *\n   * If the document already exists, this does nothing.\n   */\n  private async createDocument() {\n    // We only want to create a single pool.\n    if (document.getElementById(WORKER_POOL_ID)) {\n      return;\n    }\n\n    const window = await createWindow(\n      this.#documentUrl.href,\n      WORKER_POOL_ID,\n      false,\n    );\n\n    this.#runtimeStream = new WindowPostMessageStream({\n      name: 'parent',\n      target: 'child',\n      targetWindow: window,\n      targetOrigin: '*',\n    });\n  }\n}\n"],"names":["WORKER_POOL_ID","WebWorkerExecutionService","AbstractExecutionService","terminateJob","job","assert","runtimeStream","write","jobId","id","data","jsonrpc","method","nanoid","initEnvStream","createDocument","stream","ProxyPostMessageStream","worker","document","getElementById","window","createWindow","documentUrl","href","WindowPostMessageStream","name","target","targetWindow","targetOrigin","constructor","messenger","setupSnapProvider"],"mappings":";;;;;;;;;;;IAcaA,cAAc;eAAdA;;IAEAC,yBAAyB;eAAzBA;;;mCAf2B;4BACX;uBACN;wBACA;0CAGkB;wCACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMhC,MAAMD,iBAAiB;IAG5B,4CAEA;AAHK,MAAMC,kCAAkCC,kDAAwB;IA6BrE;;;;GAIC,GACD,MAAgBC,aAAaC,GAAgB,EAAE;QAC7C,0EAA0E;QAC1E,8CAA8C;QAC9CC,IAAAA,aAAM,2BAAC,IAAI,EAAEC,iBAAe;QAC5B,yBAAA,IAAI,EAAEA,gBAAcC,KAAK,CAAC;YACxBC,OAAOJ,IAAIK,EAAE;YACbC,MAAM;gBACJC,SAAS;gBACTC,QAAQ;gBACRH,IAAII,IAAAA,cAAM;YACZ;QACF;IACF;IAEA;;;;;GAKC,GACD,MAAgBC,cAAcN,KAAa,EAAE;QAC3C,0CAA0C;QAC1C,MAAM,IAAI,CAACO,cAAc;QAEzB,+DAA+D;QAC/DV,IAAAA,aAAM,2BAAC,IAAI,EAAEC,iBAAe;QAE5B,MAAMU,SAAS,IAAIC,8CAAsB,CAAC;YACxCD,MAAM,2BAAE,IAAI,EAAEV;YACdE;QACF;QAEA,OAAO;YAAEU,QAAQV;YAAOQ;QAAO;IACjC;IAEA;;;;GAIC,GACD,MAAcD,iBAAiB;QAC7B,wCAAwC;QACxC,IAAII,SAASC,cAAc,CAACpB,iBAAiB;YAC3C;QACF;QAEA,MAAMqB,SAAS,MAAMC,IAAAA,wBAAY,EAC/B,yBAAA,IAAI,EAAEC,cAAYC,IAAI,EACtBxB,gBACA;uCAGIM,gBAAgB,IAAImB,0CAAuB,CAAC;YAChDC,MAAM;YACNC,QAAQ;YACRC,cAAcP;YACdQ,cAAc;QAChB;IACF;IAvFA;;;;;;;;;;GAUC,GACDC,YAAY,EACVP,WAAW,EACXQ,SAAS,EACTC,iBAAiB,EACwB,CAAE;QAC3C,KAAK,CAAC;YACJD;YACAC;QACF;QAvBF,gCAAA;;mBAAA,KAAA;;QAEA,gCAAA;;mBAAA,KAAA;;uCAuBQT,cAAcA;IACtB;AAkEF"}