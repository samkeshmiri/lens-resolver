{"version":3,"sources":["../../../../src/services/offscreen/OffscreenExecutionService.ts"],"sourcesContent":["import { BrowserRuntimePostMessageStream } from '@metamask/post-message-stream';\nimport { nanoid } from 'nanoid';\n\nimport type { ExecutionServiceArgs, Job } from '../AbstractExecutionService';\nimport { AbstractExecutionService } from '../AbstractExecutionService';\nimport { ProxyPostMessageStream } from '../ProxyPostMessageStream';\n\ntype OffscreenExecutionEnvironmentServiceArgs = {\n  documentUrl: URL;\n  frameUrl: URL;\n} & ExecutionServiceArgs;\n\nexport class OffscreenExecutionService extends AbstractExecutionService<string> {\n  public readonly documentUrl: URL;\n\n  public readonly frameUrl: URL;\n\n  readonly #runtimeStream: BrowserRuntimePostMessageStream;\n\n  /**\n   * Create a new offscreen execution service.\n   *\n   * @param args - The constructor arguments.\n   * @param args.documentUrl - The URL of the offscreen document to use as the\n   * execution environment. This must be a URL relative to the location where\n   * this is called. This cannot be a public (http(s)) URL.\n   * @param args.frameUrl - The URL of the iframe to load inside the offscreen\n   * document.\n   * @param args.messenger - The messenger to use for communication with the\n   * `SnapController`.\n   * @param args.setupSnapProvider - The function to use to set up the snap\n   * provider.\n   */\n  constructor({\n    documentUrl,\n    frameUrl,\n    messenger,\n    setupSnapProvider,\n  }: OffscreenExecutionEnvironmentServiceArgs) {\n    super({\n      messenger,\n      setupSnapProvider,\n    });\n\n    this.documentUrl = documentUrl;\n    this.frameUrl = frameUrl;\n    this.#runtimeStream = new BrowserRuntimePostMessageStream({\n      name: 'parent',\n      target: 'child',\n    });\n  }\n\n  /**\n   * Send a termination command to the offscreen document.\n   *\n   * @param job - The job to terminate.\n   */\n  protected async terminateJob(job: Job<string>) {\n    // The `AbstractExecutionService` will have already closed the job stream,\n    // so we write to the runtime stream directly.\n    this.#runtimeStream.write({\n      jobId: job.id,\n      data: {\n        jsonrpc: '2.0',\n        method: 'terminateJob',\n        id: nanoid(),\n      },\n    });\n  }\n\n  /**\n   * Create a new stream for the specified job. This wraps the runtime stream\n   * in a stream specific to the job.\n   *\n   * @param jobId - The job ID.\n   */\n  protected async initEnvStream(jobId: string) {\n    // Lazily create the offscreen document.\n    await this.createDocument();\n\n    const stream = new ProxyPostMessageStream({\n      stream: this.#runtimeStream,\n      extra: {\n        // TODO: Rather than injecting the frame URL here, we should come up\n        // with a better way to do this. The frame URL is needed to avoid hard\n        // coding it in the offscreen execution environment.\n        frameUrl: this.frameUrl.toString(),\n      },\n      jobId,\n    });\n\n    return { worker: jobId, stream };\n  }\n\n  /**\n   * Creates the offscreen document to be used as the execution environment.\n   *\n   * If the document already exists, this does nothing.\n   */\n  private async createDocument() {\n    // Extensions can only have a single offscreen document.\n    if (await chrome.offscreen.hasDocument()) {\n      return;\n    }\n\n    await chrome.offscreen.createDocument({\n      justification: 'MetaMask Snaps Execution Environment',\n      reasons: ['IFRAME_SCRIPTING' as chrome.offscreen.Reason],\n      url: this.documentUrl.toString(),\n    });\n  }\n}\n"],"names":["BrowserRuntimePostMessageStream","nanoid","AbstractExecutionService","ProxyPostMessageStream","OffscreenExecutionService","terminateJob","job","runtimeStream","write","jobId","id","data","jsonrpc","method","initEnvStream","createDocument","stream","extra","frameUrl","toString","worker","chrome","offscreen","hasDocument","justification","reasons","url","documentUrl","constructor","messenger","setupSnapProvider","name","target"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,+BAA+B,QAAQ,gCAAgC;AAChF,SAASC,MAAM,QAAQ,SAAS;AAGhC,SAASC,wBAAwB,QAAQ,8BAA8B;AACvE,SAASC,sBAAsB,QAAQ,4BAA4B;IAYxD;AALX,OAAO,MAAMC,kCAAkCF;IAwC7C;;;;GAIC,GACD,MAAgBG,aAAaC,GAAgB,EAAE;QAC7C,0EAA0E;QAC1E,8CAA8C;QAC9C,yBAAA,IAAI,EAAEC,gBAAcC,KAAK,CAAC;YACxBC,OAAOH,IAAII,EAAE;YACbC,MAAM;gBACJC,SAAS;gBACTC,QAAQ;gBACRH,IAAIT;YACN;QACF;IACF;IAEA;;;;;GAKC,GACD,MAAgBa,cAAcL,KAAa,EAAE;QAC3C,wCAAwC;QACxC,MAAM,IAAI,CAACM,cAAc;QAEzB,MAAMC,SAAS,IAAIb,uBAAuB;YACxCa,MAAM,2BAAE,IAAI,EAAET;YACdU,OAAO;gBACL,oEAAoE;gBACpE,sEAAsE;gBACtE,oDAAoD;gBACpDC,UAAU,IAAI,CAACA,QAAQ,CAACC,QAAQ;YAClC;YACAV;QACF;QAEA,OAAO;YAAEW,QAAQX;YAAOO;QAAO;IACjC;IAEA;;;;GAIC,GACD,MAAcD,iBAAiB;QAC7B,wDAAwD;QACxD,IAAI,MAAMM,OAAOC,SAAS,CAACC,WAAW,IAAI;YACxC;QACF;QAEA,MAAMF,OAAOC,SAAS,CAACP,cAAc,CAAC;YACpCS,eAAe;YACfC,SAAS;gBAAC;aAA8C;YACxDC,KAAK,IAAI,CAACC,WAAW,CAACR,QAAQ;QAChC;IACF;IA3FA;;;;;;;;;;;;;GAaC,GACDS,YAAY,EACVD,WAAW,EACXT,QAAQ,EACRW,SAAS,EACTC,iBAAiB,EACwB,CAAE;QAC3C,KAAK,CAAC;YACJD;YACAC;QACF;QA7BF,uBAAgBH,eAAhB,KAAA;QAEA,uBAAgBT,YAAhB,KAAA;QAEA,gCAAS;;mBAAT,KAAA;;QA2BE,IAAI,CAACS,WAAW,GAAGA;QACnB,IAAI,CAACT,QAAQ,GAAGA;uCACVX,gBAAgB,IAAIP,gCAAgC;YACxD+B,MAAM;YACNC,QAAQ;QACV;IACF;AA6DF"}