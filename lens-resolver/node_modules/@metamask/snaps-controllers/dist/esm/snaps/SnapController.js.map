{"version":3,"sources":["../../../src/snaps/SnapController.ts"],"sourcesContent":["import type {\n  AddApprovalRequest,\n  UpdateRequestState,\n} from '@metamask/approval-controller';\nimport type { RestrictedControllerMessenger } from '@metamask/base-controller';\nimport { BaseControllerV2 as BaseController } from '@metamask/base-controller';\nimport type {\n  Caveat,\n  GetEndowments,\n  GetPermissions,\n  GetSubjects,\n  GrantPermissions,\n  HasPermission,\n  HasPermissions,\n  PermissionConstraint,\n  PermissionsRequest,\n  RequestedPermissions,\n  RevokeAllPermissions,\n  RevokePermissionForAllSubjects,\n  RevokePermissions,\n  SubjectPermissions,\n  ValidPermission,\n  UpdateCaveat,\n  GetSubjectMetadata,\n} from '@metamask/permission-controller';\nimport { SubjectType } from '@metamask/permission-controller';\nimport { WALLET_SNAP_PERMISSION_KEY } from '@metamask/rpc-methods';\nimport type { BlockReason } from '@metamask/snaps-registry';\nimport type {\n  InstallSnapsResult,\n  PersistedSnap,\n  ProcessSnapResult,\n  RequestedSnapPermissions,\n  Snap,\n  SnapId,\n  SnapManifest,\n  SnapRpcHook,\n  SnapRpcHookArgs,\n  StatusContext,\n  StatusEvents,\n  StatusStates,\n  TruncatedSnap,\n  TruncatedSnapFields,\n  ValidatedSnapId,\n  VirtualFile,\n} from '@metamask/snaps-utils';\nimport {\n  assertIsSnapManifest,\n  DEFAULT_ENDOWMENTS,\n  DEFAULT_REQUESTED_SNAP_VERSION,\n  normalizeRelative,\n  resolveVersionRange,\n  SnapCaveatType,\n  SnapStatus,\n  SnapStatusEvents,\n  assertIsValidSnapId,\n  logError,\n  logWarning,\n  validateFetchedSnap,\n} from '@metamask/snaps-utils';\nimport type { Json, NonEmptyArray, SemVerRange } from '@metamask/utils';\nimport {\n  assert,\n  assertIsJsonRpcRequest,\n  Duration,\n  gtRange,\n  gtVersion,\n  hasProperty,\n  inMilliseconds,\n  isNonEmptyArray,\n  isValidSemVerRange,\n  satisfiesVersionRange,\n  timeSince,\n} from '@metamask/utils';\nimport type { StateMachine } from '@xstate/fsm';\nimport { createMachine, interpret } from '@xstate/fsm';\nimport { ethErrors } from 'eth-rpc-errors';\nimport type { Patch } from 'immer';\nimport { nanoid } from 'nanoid';\n\nimport { forceStrict, validateMachine } from '../fsm';\nimport { log } from '../logging';\nimport type {\n  ExecuteSnapAction,\n  ExecutionServiceEvents,\n  HandleRpcRequestAction,\n  SnapErrorJson,\n  TerminateAllSnapsAction,\n  TerminateSnapAction,\n} from '../services';\nimport { hasTimedOut, setDiff, withTimeout } from '../utils';\nimport { handlerEndowments, SnapEndowments } from './endowments';\nimport { getRpcCaveatOrigins } from './endowments/rpc';\nimport type { SnapLocation } from './location';\nimport { detectSnapLocation } from './location';\nimport { processSnapPermissions } from './permissions';\nimport type {\n  GetMetadata,\n  GetResult,\n  SnapsRegistryInfo,\n  SnapsRegistryMetadata,\n  SnapsRegistryRequest,\n} from './registry';\nimport { SnapsRegistryStatus } from './registry';\nimport { RequestQueue } from './RequestQueue';\nimport { Timer } from './Timer';\n\nexport const controllerName = 'SnapController';\n\n// TODO: Figure out how to name these\nexport const SNAP_APPROVAL_INSTALL = 'wallet_installSnap';\nexport const SNAP_APPROVAL_UPDATE = 'wallet_updateSnap';\nexport const SNAP_APPROVAL_RESULT = 'wallet_installSnapResult';\n\nconst TRUNCATED_SNAP_PROPERTIES = new Set<TruncatedSnapFields>([\n  'initialPermissions',\n  'id',\n  'version',\n  'enabled',\n  'blocked',\n]);\n\nexport type PendingRequest = {\n  requestId: unknown;\n  timer: Timer;\n};\n\n/**\n * A wrapper type for any data stored during runtime of Snaps.\n * It is not persisted in state as it contains non-serializable data and is only relevant for the\n * current session.\n */\nexport interface SnapRuntimeData {\n  /**\n   * A promise that resolves when the Snap has finished installing\n   */\n  installPromise: null | Promise<PersistedSnap>;\n\n  /**\n   * A Unix timestamp for the last time the Snap received an RPC request\n   */\n  lastRequest: null | number;\n\n  /**\n   * The current number of active references where this Snap is being used\n   */\n  activeReferences: number;\n\n  /**\n   * The current pending inbound requests, meaning requests that are processed by snaps.\n   */\n  pendingInboundRequests: PendingRequest[];\n\n  /**\n   * The current pending outbound requests, meaning requests made from snaps towards the MetaMask\n   * extension.\n   */\n  pendingOutboundRequests: number;\n\n  /**\n   * RPC handler designated for the Snap\n   */\n  rpcHandler: null | SnapRpcHook;\n\n  /**\n   * The finite state machine interpreter for possible states that the Snap can be in such as\n   * stopped, running, blocked\n   *\n   * @see {@link SnapController:constructor}\n   */\n  interpreter: StateMachine.Service<StatusContext, StatusEvents, StatusStates>;\n\n  /**\n   * The snap source code\n   */\n  sourceCode: null | string;\n\n  /**\n   * The snap state (encrypted)\n   */\n  state: null | string;\n}\n\nexport type SnapError = {\n  message: string;\n  code: number;\n  data?: Json;\n};\n\n/**\n * The return type of {@link SnapController.#fetchSnap} and its sibling methods.\n */\ntype FetchSnapResult = {\n  /**\n   * The manifest of the fetched Snap.\n   */\n  manifest: VirtualFile<SnapManifest>;\n\n  /**\n   * Auxillary files references in manifest.\n   */\n  files: VirtualFile[];\n\n  /**\n   * Location that was used to fetch the snap.\n   *\n   * Helpful if you want to pass it forward since files will be still cached.\n   */\n  location: SnapLocation;\n};\n\n// Types that probably should be defined elsewhere in prod\ntype CloseAllConnectionsFunction = (origin: string) => void;\ntype StoredSnaps = Record<ValidatedSnapId, Snap>;\n\nexport type SnapControllerState = {\n  snaps: StoredSnaps;\n  // This type needs to be defined but is always empty in practice.\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  snapStates: {};\n  snapErrors: {\n    [internalID: string]: SnapError & { internalID: string };\n  };\n};\n\nexport type PersistedSnapControllerState = SnapControllerState & {\n  snaps: Record<ValidatedSnapId, PersistedSnap>;\n  snapStates: Record<ValidatedSnapId, string>;\n};\n\ntype RollbackSnapshot = {\n  statePatches: Patch[];\n  sourceCode: string | null;\n  permissions: {\n    revoked: unknown;\n    granted: unknown[];\n    requestData: unknown;\n  };\n  newVersion: string;\n};\n\ntype PendingApproval = {\n  id: string;\n  promise: Promise<unknown>;\n};\n\n// Controller Messenger Actions\n\n/**\n * Gets the specified Snap from state.\n */\nexport type GetSnap = {\n  type: `${typeof controllerName}:get`;\n  handler: SnapController['get'];\n};\n\n/**\n * Handles sending an inbound request to a snap and returns its result.\n */\nexport type HandleSnapRequest = {\n  type: `${typeof controllerName}:handleRequest`;\n  handler: SnapController['handleRequest'];\n};\n\n/**\n * Gets the specified Snap's persisted state.\n */\nexport type GetSnapState = {\n  type: `${typeof controllerName}:getSnapState`;\n  handler: SnapController['getSnapState'];\n};\n\n/**\n * Checks if the specified snap exists in state.\n */\nexport type HasSnap = {\n  type: `${typeof controllerName}:has`;\n  handler: SnapController['has'];\n};\n\n/**\n * Updates the specified Snap's persisted state.\n */\nexport type UpdateSnapState = {\n  type: `${typeof controllerName}:updateSnapState`;\n  handler: SnapController['updateSnapState'];\n};\n\n/**\n * Clears the specified Snap's persisted state.\n */\nexport type ClearSnapState = {\n  type: `${typeof controllerName}:clearSnapState`;\n  handler: SnapController['clearSnapState'];\n};\n\n/**\n * Checks all installed snaps against the blocklist.\n */\nexport type UpdateBlockedSnaps = {\n  type: `${typeof controllerName}:updateBlockedSnaps`;\n  handler: SnapController['updateBlockedSnaps'];\n};\n\nexport type EnableSnap = {\n  type: `${typeof controllerName}:enable`;\n  handler: SnapController['enableSnap'];\n};\n\nexport type DisableSnap = {\n  type: `${typeof controllerName}:disable`;\n  handler: SnapController['disableSnap'];\n};\n\nexport type RemoveSnap = {\n  type: `${typeof controllerName}:remove`;\n  handler: SnapController['removeSnap'];\n};\n\nexport type GetPermittedSnaps = {\n  type: `${typeof controllerName}:getPermitted`;\n  handler: SnapController['getPermittedSnaps'];\n};\n\nexport type GetAllSnaps = {\n  type: `${typeof controllerName}:getAll`;\n  handler: SnapController['getAllSnaps'];\n};\n\nexport type IncrementActiveReferences = {\n  type: `${typeof controllerName}:incrementActiveReferences`;\n  handler: SnapController['incrementActiveReferences'];\n};\n\nexport type DecrementActiveReferences = {\n  type: `${typeof controllerName}:decrementActiveReferences`;\n  handler: SnapController['decrementActiveReferences'];\n};\n\nexport type InstallSnaps = {\n  type: `${typeof controllerName}:install`;\n  handler: SnapController['installSnaps'];\n};\n\nexport type RemoveSnapError = {\n  type: `${typeof controllerName}:removeSnapError`;\n  handler: SnapController['removeSnapError'];\n};\n\nexport type GetRegistryMetadata = {\n  type: `${typeof controllerName}:getRegistryMetadata`;\n  handler: SnapController['getRegistryMetadata'];\n};\n\nexport type DisconnectOrigin = {\n  type: `${typeof controllerName}:disconnectOrigin`;\n  handler: SnapController['removeSnapFromSubject'];\n};\n\nexport type RevokeDynamicPermissions = {\n  type: `${typeof controllerName}:revokeDynamicPermissions`;\n  handler: SnapController['revokeDynamicSnapPermissions'];\n};\n\nexport type SnapControllerActions =\n  | ClearSnapState\n  | GetSnap\n  | GetSnapState\n  | HandleSnapRequest\n  | HasSnap\n  | UpdateBlockedSnaps\n  | UpdateSnapState\n  | EnableSnap\n  | DisableSnap\n  | RemoveSnap\n  | GetPermittedSnaps\n  | InstallSnaps\n  | RemoveSnapError\n  | GetAllSnaps\n  | IncrementActiveReferences\n  | DecrementActiveReferences\n  | GetRegistryMetadata\n  | DisconnectOrigin\n  | RevokeDynamicPermissions;\n\n// Controller Messenger Events\n\nexport type SnapStateChange = {\n  type: `${typeof controllerName}:stateChange`;\n  payload: [SnapControllerState, Patch[]];\n};\n\n/**\n * Emitted when a Snap has been added to state during installation.\n */\nexport type SnapAdded = {\n  type: `${typeof controllerName}:snapAdded`;\n  payload: [snap: Snap, svgIcon: string | undefined];\n};\n\n/**\n * Emitted when an installed snap has been blocked.\n */\nexport type SnapBlocked = {\n  type: `${typeof controllerName}:snapBlocked`;\n  payload: [snapId: string, blockedSnapInfo?: BlockReason];\n};\n\n/**\n * Emitted when a snap has been started after being added and authorized during\n * installation.\n */\nexport type SnapInstalled = {\n  type: `${typeof controllerName}:snapInstalled`;\n  payload: [snap: TruncatedSnap];\n};\n\n/**\n * Emitted when a snap is removed.\n */\nexport type SnapRemoved = {\n  type: `${typeof controllerName}:snapRemoved`;\n  payload: [snap: TruncatedSnap];\n};\n\n/**\n * Emitted when an installed snap has been unblocked.\n */\nexport type SnapUnblocked = {\n  type: `${typeof controllerName}:snapUnblocked`;\n  payload: [snapId: string];\n};\n\n/**\n * Emitted when a snap is updated.\n */\nexport type SnapUpdated = {\n  type: `${typeof controllerName}:snapUpdated`;\n  payload: [snap: TruncatedSnap, oldVersion: string];\n};\n\n/**\n * Emitted when a snap is rolled back.\n */\nexport type SnapRolledback = {\n  type: `${typeof controllerName}:snapRolledback`;\n  payload: [snap: TruncatedSnap, failedVersion: string];\n};\n/**\n * Emitted when a Snap is terminated. This is different from the snap being\n * stopped as it can also be triggered when a snap fails initialization.\n */\nexport type SnapTerminated = {\n  type: `${typeof controllerName}:snapTerminated`;\n  payload: [snap: TruncatedSnap];\n};\n\nexport type SnapControllerEvents =\n  | SnapAdded\n  | SnapBlocked\n  | SnapInstalled\n  | SnapRemoved\n  | SnapStateChange\n  | SnapUnblocked\n  | SnapUpdated\n  | SnapRolledback\n  | SnapTerminated;\n\nexport type AllowedActions =\n  | GetEndowments\n  | GetPermissions\n  | GetSubjects\n  | GetSubjectMetadata\n  | HasPermission\n  | HasPermissions\n  | RevokePermissions\n  | RevokeAllPermissions\n  | RevokePermissionForAllSubjects\n  | GrantPermissions\n  | AddApprovalRequest\n  | HandleRpcRequestAction\n  | ExecuteSnapAction\n  | TerminateAllSnapsAction\n  | TerminateSnapAction\n  | UpdateCaveat\n  | UpdateRequestState\n  | GetResult\n  | GetMetadata;\n\nexport type AllowedEvents = ExecutionServiceEvents;\n\ntype SnapControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  SnapControllerActions | AllowedActions,\n  SnapControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\ntype FeatureFlags = {\n  /**\n   * We still need to implement new UI approval page in metamask-extension before we can allow\n   * DApps to update Snaps. After it's added, this flag can be removed.\n   *\n   * @see {SNAP_APPROVAL_UPDATE}\n   * @see {SnapController.processRequestedSnap}\n   */\n  dappsCanUpdateSnaps?: true;\n  requireAllowlist?: true;\n  allowLocalSnaps?: true;\n};\n\ntype SnapControllerArgs = {\n  /**\n   * A teardown function that allows the host to clean up its instrumentation\n   * for a running snap.\n   */\n  closeAllConnections: CloseAllConnectionsFunction;\n\n  /**\n   * A list of permissions that are allowed to be dynamic, meaning they can be revoked from the snap whenever.\n   */\n  dynamicPermissions: string[];\n\n  /**\n   * The names of endowment permissions whose values are the names of JavaScript\n   * APIs that will be added to the snap execution environment at runtime.\n   */\n  environmentEndowmentPermissions: string[];\n\n  /**\n   * Excluded permissions with its associated error message used to forbid certain permssions.\n   */\n  excludedPermissions: Record<string, string>;\n\n  /**\n   * The function that will be used by the controller fo make network requests.\n   * Should be compatible with {@link fetch}.\n   */\n  fetchFunction?: typeof fetch;\n\n  /**\n   * Flags that enable or disable features in the controller.\n   * See {@link FeatureFlags}.\n   */\n  featureFlags: FeatureFlags;\n\n  /**\n   * How frequently to check whether a snap is idle.\n   */\n  idleTimeCheckInterval?: number;\n\n  /**\n   * The maximum amount of time that a snap may be idle.\n   */\n  maxIdleTime?: number;\n\n  /**\n   * The controller messenger.\n   */\n  messenger: SnapControllerMessenger;\n\n  /**\n   * The maximum amount of time a snap may take to process an RPC request,\n   * unless it is permitted to take longer.\n   */\n  maxRequestTime?: number;\n\n  /**\n   * The npm registry URL that will be used to fetch published snaps.\n   */\n  npmRegistryUrl?: string;\n\n  /**\n   * Persisted state that will be used for rehydration.\n   */\n  state?: PersistedSnapControllerState;\n\n  /**\n   * A function that takes Snap Id and converts it into a class that fetches files.\n   *\n   * Used for test overrides.\n   */\n  detectSnapLocation?: typeof detectSnapLocation;\n};\ntype AddSnapArgs = {\n  id: ValidatedSnapId;\n  origin: string;\n  location: SnapLocation;\n  versionRange: SemVerRange;\n};\n\n// When we set a snap, we need all required properties to be present and\n// validated.\ntype SetSnapArgs = Omit<AddSnapArgs, 'location' | 'versionRange'> & {\n  manifest: VirtualFile<SnapManifest>;\n  files: VirtualFile[];\n  isUpdate?: boolean;\n};\n\nconst defaultState: SnapControllerState = {\n  snapErrors: {},\n  snaps: {},\n  snapStates: {},\n};\n\n/**\n * Truncates the properties of a snap to only ones that are easily serializable.\n *\n * @param snap - The snap to truncate.\n * @returns Object with serializable snap properties.\n */\nfunction truncateSnap(snap: Snap): TruncatedSnap {\n  const truncatedSnap = Object.keys(snap).reduce<Partial<TruncatedSnap>>(\n    (serialized, key) => {\n      if (TRUNCATED_SNAP_PROPERTIES.has(key as any)) {\n        serialized[key as keyof TruncatedSnap] = snap[\n          key as keyof TruncatedSnap\n        ] as any;\n      }\n\n      return serialized;\n    },\n    {},\n  );\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n  return truncatedSnap as TruncatedSnap;\n}\n\nconst name = 'SnapController';\n\n/*\n * A snap is initialized in three phases:\n * - Add: Loads the snap from a remote source and parses it.\n * - Authorize: Requests the snap's required permissions from the user.\n * - Start: Initializes the snap in its SES realm with the authorized permissions.\n */\n\nexport class SnapController extends BaseController<\n  string,\n  SnapControllerState,\n  SnapControllerMessenger\n> {\n  #closeAllConnections: CloseAllConnectionsFunction;\n\n  #dynamicPermissions: string[];\n\n  #environmentEndowmentPermissions: string[];\n\n  #excludedPermissions: Record<string, string>;\n\n  #featureFlags: FeatureFlags;\n\n  #fetchFunction: typeof fetch;\n\n  #idleTimeCheckInterval: number;\n\n  #maxIdleTime: number;\n\n  // This property cannot be hash private yet because of tests.\n  private readonly maxRequestTime: number;\n\n  #detectSnapLocation: typeof detectSnapLocation;\n\n  // This property cannot be hash private yet because of tests.\n  private readonly snapsRuntimeData: Map<ValidatedSnapId, SnapRuntimeData>;\n\n  #rollbackSnapshots: Map<SnapId, RollbackSnapshot>;\n\n  #timeoutForLastRequestStatus?: number;\n\n  #statusMachine!: StateMachine.Machine<\n    StatusContext,\n    StatusEvents,\n    StatusStates\n  >;\n\n  constructor({\n    closeAllConnections,\n    messenger,\n    state,\n    dynamicPermissions = ['eth_accounts'],\n    environmentEndowmentPermissions = [],\n    excludedPermissions = {},\n    idleTimeCheckInterval = inMilliseconds(5, Duration.Second),\n    maxIdleTime = inMilliseconds(30, Duration.Second),\n    maxRequestTime = inMilliseconds(60, Duration.Second),\n    fetchFunction = globalThis.fetch.bind(globalThis),\n    featureFlags = {},\n    detectSnapLocation: detectSnapLocationFunction = detectSnapLocation,\n  }: SnapControllerArgs) {\n    super({\n      messenger,\n      metadata: {\n        snapErrors: {\n          persist: false,\n          anonymous: false,\n        },\n        snapStates: {\n          persist: () => {\n            return Object.keys(this.state.snaps).reduce<\n              Record<ValidatedSnapId, SnapRuntimeData['state']>\n            >((acc, cur) => {\n              acc[cur as ValidatedSnapId] = this.#getRuntimeExpect(\n                cur as ValidatedSnapId,\n              ).state;\n              return acc;\n            }, {});\n          },\n          anonymous: false,\n        },\n        snaps: {\n          persist: (snaps) => {\n            return Object.values(snaps)\n              .map((snap) => {\n                return {\n                  ...snap,\n                  sourceCode: this.#getRuntimeExpect(snap.id).sourceCode,\n                  // At the time state is rehydrated, no snap will be running.\n                  status: SnapStatus.Stopped,\n                };\n              })\n              .reduce((memo: Record<ValidatedSnapId, Snap>, snap) => {\n                memo[snap.id] = snap;\n                return memo;\n              }, {});\n          },\n          anonymous: false,\n        },\n      },\n      name,\n      state: {\n        ...defaultState,\n        ...{\n          ...state,\n          snaps: Object.values(state?.snaps ?? {}).reduce(\n            (memo: Record<ValidatedSnapId, Snap>, snap: PersistedSnap) => {\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              // sourceCode is stripped out to prevent piping to MetaMask UI,\n              // it is stored in the runtime while we're running a snap and then\n              // persisted to state when needed.\n              const { sourceCode, ...rest } = snap;\n              memo[snap.id] = rest;\n              return memo;\n            },\n            {},\n          ),\n        },\n      },\n    });\n\n    this.#closeAllConnections = closeAllConnections;\n    this.#dynamicPermissions = dynamicPermissions;\n    this.#environmentEndowmentPermissions = environmentEndowmentPermissions;\n    this.#excludedPermissions = excludedPermissions;\n    this.#featureFlags = featureFlags;\n    this.#fetchFunction = fetchFunction;\n    this.#idleTimeCheckInterval = idleTimeCheckInterval;\n    this.#maxIdleTime = maxIdleTime;\n    this.maxRequestTime = maxRequestTime;\n    this.#detectSnapLocation = detectSnapLocationFunction;\n    this._onUnhandledSnapError = this._onUnhandledSnapError.bind(this);\n    this._onOutboundRequest = this._onOutboundRequest.bind(this);\n    this._onOutboundResponse = this._onOutboundResponse.bind(this);\n    this.#rollbackSnapshots = new Map();\n    this.snapsRuntimeData = new Map();\n    this.#pollForLastRequestStatus();\n\n    /* eslint-disable @typescript-eslint/unbound-method */\n    this.messagingSystem.subscribe(\n      'ExecutionService:unhandledError',\n      this._onUnhandledSnapError,\n    );\n\n    this.messagingSystem.subscribe(\n      'ExecutionService:outboundRequest',\n      this._onOutboundRequest,\n    );\n\n    this.messagingSystem.subscribe(\n      'ExecutionService:outboundResponse',\n      this._onOutboundResponse,\n    );\n    /* eslint-enable @typescript-eslint/unbound-method */\n\n    this.#initializeStateMachine();\n    this.#registerMessageHandlers();\n\n    Object.values(state?.snaps ?? {}).forEach((snap) =>\n      this.#setupRuntime(snap.id, {\n        sourceCode: snap.sourceCode,\n        state: state?.snapStates?.[snap.id] ?? null,\n      }),\n    );\n  }\n\n  /**\n   * We track status of a Snap using a finite-state-machine.\n   * It keeps track of whether the snap is started / stopped / etc.\n   *\n   * @see {@link SnapController.transition} for interacting with the machine.\n   */\n  // We initialize the machine in the instance because the status is currently tightly coupled\n  // with the SnapController - the guard checks for enabled status inside the SnapController state.\n  // In the future, side-effects could be added to the machine during transitions.\n  #initializeStateMachine() {\n    const disableGuard = ({ snapId }: StatusContext) => {\n      return this.getExpect(snapId).enabled;\n    };\n\n    const statusConfig: StateMachine.Config<\n      StatusContext,\n      StatusEvents,\n      StatusStates\n    > = {\n      initial: SnapStatus.Installing,\n      states: {\n        [SnapStatus.Installing]: {\n          on: {\n            [SnapStatusEvents.Start]: {\n              target: SnapStatus.Running,\n              cond: disableGuard,\n            },\n          },\n        },\n        [SnapStatus.Updating]: {\n          on: {\n            [SnapStatusEvents.Start]: {\n              target: SnapStatus.Running,\n              cond: disableGuard,\n            },\n            [SnapStatusEvents.Stop]: SnapStatus.Stopped,\n          },\n        },\n        [SnapStatus.Running]: {\n          on: {\n            [SnapStatusEvents.Stop]: SnapStatus.Stopped,\n            [SnapStatusEvents.Crash]: SnapStatus.Crashed,\n          },\n        },\n        [SnapStatus.Stopped]: {\n          on: {\n            [SnapStatusEvents.Start]: {\n              target: SnapStatus.Running,\n              cond: disableGuard,\n            },\n            [SnapStatusEvents.Update]: SnapStatus.Updating,\n          },\n        },\n        [SnapStatus.Crashed]: {\n          on: {\n            [SnapStatusEvents.Start]: {\n              target: SnapStatus.Running,\n              cond: disableGuard,\n            },\n            [SnapStatusEvents.Update]: SnapStatus.Updating,\n          },\n        },\n      },\n    };\n    this.#statusMachine = createMachine(statusConfig);\n    validateMachine(this.#statusMachine);\n  }\n\n  /**\n   * Constructor helper for registering the controller's messaging system\n   * actions.\n   */\n  #registerMessageHandlers(): void {\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:clearSnapState`,\n      (...args) => this.clearSnapState(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:get`,\n      (...args) => this.get(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:getSnapState`,\n      async (...args) => this.getSnapState(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:handleRequest`,\n      async (...args) => this.handleRequest(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:has`,\n      (...args) => this.has(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:updateBlockedSnaps`,\n      async () => this.updateBlockedSnaps(),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:updateSnapState`,\n      async (...args) => this.updateSnapState(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:enable`,\n      (...args) => this.enableSnap(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:disable`,\n      async (...args) => this.disableSnap(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:remove`,\n      async (...args) => this.removeSnap(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:getPermitted`,\n      (...args) => this.getPermittedSnaps(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:install`,\n      async (...args) => this.installSnaps(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:removeSnapError`,\n      (...args) => this.removeSnapError(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:getAll`,\n      (...args) => this.getAllSnaps(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:incrementActiveReferences`,\n      (...args) => this.incrementActiveReferences(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:decrementActiveReferences`,\n      (...args) => this.decrementActiveReferences(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:getRegistryMetadata`,\n      async (...args) => this.getRegistryMetadata(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:disconnectOrigin`,\n      (...args) => this.removeSnapFromSubject(...args),\n    );\n\n    this.messagingSystem.registerActionHandler(\n      `${controllerName}:revokeDynamicPermissions`,\n      (...args) => this.revokeDynamicSnapPermissions(...args),\n    );\n  }\n\n  #pollForLastRequestStatus() {\n    this.#timeoutForLastRequestStatus = setTimeout(() => {\n      this.#stopSnapsLastRequestPastMax().catch((error) => {\n        // TODO: Decide how to handle errors.\n        logError(error);\n      });\n\n      this.#pollForLastRequestStatus();\n    }, this.#idleTimeCheckInterval) as unknown as number;\n  }\n\n  /**\n   * Checks all installed snaps against the block list and\n   * blocks/unblocks snaps as appropriate. See {@link SnapController.blockSnap}\n   * for more information.\n   */\n  async updateBlockedSnaps(): Promise<void> {\n    const blockedSnaps = await this.messagingSystem.call(\n      'SnapsRegistry:get',\n      Object.values(this.state.snaps).reduce<SnapsRegistryRequest>(\n        (blockListArg, snap) => {\n          blockListArg[snap.id] = {\n            version: snap.version,\n            checksum: snap.manifest.source.shasum,\n          };\n          return blockListArg;\n        },\n        {},\n      ),\n    );\n\n    await Promise.all(\n      Object.entries(blockedSnaps).map(async ([snapId, { status, reason }]) => {\n        if (status === SnapsRegistryStatus.Blocked) {\n          return this.#blockSnap(snapId as ValidatedSnapId, reason);\n        }\n\n        return this.#unblockSnap(snapId as ValidatedSnapId);\n      }),\n    );\n  }\n\n  /**\n   * Blocks an installed snap and prevents it from being started again. Emits\n   * {@link SnapBlocked}. Does nothing if the snap is not installed.\n   *\n   * @param snapId - The snap to block.\n   * @param blockedSnapInfo - Information detailing why the snap is blocked.\n   */\n  async #blockSnap(\n    snapId: ValidatedSnapId,\n    blockedSnapInfo?: BlockReason,\n  ): Promise<void> {\n    if (!this.has(snapId)) {\n      return;\n    }\n\n    try {\n      this.update((state: any) => {\n        state.snaps[snapId].blocked = true;\n        state.snaps[snapId].blockInformation = blockedSnapInfo;\n      });\n\n      await this.disableSnap(snapId);\n    } catch (error) {\n      logError(\n        `Encountered error when stopping blocked snap \"${snapId}\".`,\n        error,\n      );\n    }\n\n    this.messagingSystem.publish(\n      `${controllerName}:snapBlocked`,\n      snapId,\n      blockedSnapInfo,\n    );\n  }\n\n  /**\n   * Unblocks a snap so that it can be enabled and started again. Emits\n   * {@link SnapUnblocked}. Does nothing if the snap is not installed or already\n   * unblocked.\n   *\n   * @param snapId - The id of the snap to unblock.\n   */\n  #unblockSnap(snapId: ValidatedSnapId) {\n    if (!this.has(snapId) || !this.state.snaps[snapId].blocked) {\n      return;\n    }\n\n    this.update((state: any) => {\n      state.snaps[snapId].blocked = false;\n      delete state.snaps[snapId].blockInformation;\n    });\n\n    this.messagingSystem.publish(`${controllerName}:snapUnblocked`, snapId);\n  }\n\n  async #assertIsInstallAllowed(\n    snapId: ValidatedSnapId,\n    snapInfo: SnapsRegistryInfo,\n  ) {\n    const results = await this.messagingSystem.call('SnapsRegistry:get', {\n      [snapId]: snapInfo,\n    });\n    const result = results[snapId];\n    if (result.status === SnapsRegistryStatus.Blocked) {\n      throw new Error(\n        `Cannot install version \"${\n          snapInfo.version\n        }\" of snap \"${snapId}\": The version is blocked. ${\n          result.reason?.explanation ?? ''\n        }`,\n      );\n    } else if (\n      this.#featureFlags.requireAllowlist &&\n      result.status !== SnapsRegistryStatus.Verified\n    ) {\n      throw new Error(\n        `Cannot install version \"${snapInfo.version}\" of snap \"${snapId}\": The snap is not on the allow list.`,\n      );\n    }\n  }\n\n  async #stopSnapsLastRequestPastMax() {\n    const entries = [...this.snapsRuntimeData.entries()];\n    return Promise.all(\n      entries\n        .filter(\n          ([_snapId, runtime]) =>\n            runtime.activeReferences === 0 &&\n            runtime.pendingInboundRequests.length === 0 &&\n            // lastRequest should always be set here but TypeScript wants this check\n            runtime.lastRequest &&\n            this.#maxIdleTime &&\n            timeSince(runtime.lastRequest) > this.#maxIdleTime,\n        )\n        .map(async ([snapId]) => this.stopSnap(snapId, SnapStatusEvents.Stop)),\n    );\n  }\n\n  _onUnhandledSnapError(snapId: SnapId, error: SnapErrorJson) {\n    this.stopSnap(snapId as ValidatedSnapId, SnapStatusEvents.Crash)\n      .then(() => this.addSnapError(error))\n      .catch((stopSnapError) => {\n        // TODO: Decide how to handle errors.\n        logError(stopSnapError);\n      });\n  }\n\n  _onOutboundRequest(snapId: SnapId) {\n    const runtime = this.#getRuntimeExpect(snapId as ValidatedSnapId);\n    // Ideally we would only pause the pending request that is making the outbound request\n    // but right now we don't have a way to know which request initiated the outbound request\n    runtime.pendingInboundRequests\n      .filter((pendingRequest) => pendingRequest.timer.status === 'running')\n      .forEach((pendingRequest) => pendingRequest.timer.pause());\n    runtime.pendingOutboundRequests += 1;\n  }\n\n  _onOutboundResponse(snapId: SnapId) {\n    const runtime = this.#getRuntimeExpect(snapId as ValidatedSnapId);\n    runtime.pendingOutboundRequests -= 1;\n    if (runtime.pendingOutboundRequests === 0) {\n      runtime.pendingInboundRequests\n        .filter((pendingRequest) => pendingRequest.timer.status === 'paused')\n        .forEach((pendingRequest) => pendingRequest.timer.resume());\n    }\n  }\n\n  /**\n   * Transitions between states using `snapStatusStateMachineConfig` as the template to figure out\n   * the next state. This transition function uses a very minimal subset of XState conventions:\n   * - supports initial state\n   * - .on supports raw event target string\n   * - .on supports {target, cond} object\n   * - the arguments for `cond` is the `SerializedSnap` instead of Xstate convention of `(event,\n   * context) => boolean`\n   *\n   * @param snapId - The id of the snap to transition.\n   * @param event - The event enum to use to transition.\n   */\n  #transition(\n    snapId: ValidatedSnapId,\n    event: StatusEvents | StatusEvents['type'],\n  ) {\n    const { interpreter } = this.#getRuntimeExpect(snapId);\n    interpreter.send(event);\n    this.update((state: any) => {\n      state.snaps[snapId].status = interpreter.state.value;\n    });\n  }\n\n  /**\n   * Starts the given snap. Throws an error if no such snap exists\n   * or if it is already running.\n   *\n   * @param snapId - The id of the Snap to start.\n   */\n  async startSnap(snapId: ValidatedSnapId): Promise<void> {\n    const runtime = this.#getRuntimeExpect(snapId);\n\n    if (this.state.snaps[snapId].enabled === false) {\n      throw new Error(`Snap \"${snapId}\" is disabled.`);\n    }\n\n    assert(runtime.sourceCode);\n\n    await this.#startSnap({\n      snapId,\n      sourceCode: runtime.sourceCode,\n    });\n  }\n\n  /**\n   * Enables the given snap. A snap can only be started if it is enabled. A snap\n   * can only be enabled if it isn't blocked.\n   *\n   * @param snapId - The id of the Snap to enable.\n   */\n  enableSnap(snapId: ValidatedSnapId): void {\n    this.getExpect(snapId);\n\n    if (this.state.snaps[snapId].blocked) {\n      throw new Error(`Snap \"${snapId}\" is blocked and cannot be enabled.`);\n    }\n\n    this.update((state: any) => {\n      state.snaps[snapId].enabled = true;\n    });\n  }\n\n  /**\n   * Disables the given snap. A snap can only be started if it is enabled.\n   *\n   * @param snapId - The id of the Snap to disable.\n   * @returns A promise that resolves once the snap has been disabled.\n   */\n  async disableSnap(snapId: ValidatedSnapId): Promise<void> {\n    if (!this.has(snapId)) {\n      throw new Error(`Snap \"${snapId}\" not found.`);\n    }\n\n    this.update((state: any) => {\n      state.snaps[snapId].enabled = false;\n    });\n\n    if (this.isRunning(snapId)) {\n      return this.stopSnap(snapId, SnapStatusEvents.Stop);\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n   * Stops the given snap, removes all hooks, closes all connections, and\n   * terminates its worker.\n   *\n   * @param snapId - The id of the Snap to stop.\n   * @param statusEvent - The Snap status event that caused the snap to be\n   * stopped.\n   */\n  public async stopSnap(\n    snapId: ValidatedSnapId,\n    statusEvent:\n      | SnapStatusEvents.Stop\n      | SnapStatusEvents.Crash = SnapStatusEvents.Stop,\n  ): Promise<void> {\n    const runtime = this.#getRuntime(snapId);\n    if (!runtime) {\n      throw new Error(`The snap \"${snapId}\" is not running.`);\n    }\n\n    // Reset request tracking\n    runtime.lastRequest = null;\n    runtime.pendingInboundRequests = [];\n    runtime.pendingOutboundRequests = 0;\n    try {\n      if (this.isRunning(snapId)) {\n        this.#closeAllConnections(snapId);\n        await this.#terminateSnap(snapId);\n      }\n    } finally {\n      if (this.isRunning(snapId)) {\n        this.#transition(snapId, statusEvent);\n      }\n    }\n  }\n\n  /**\n   * Terminates the specified snap and emits the `snapTerminated` event.\n   *\n   * @param snapId - The snap to terminate.\n   */\n  async #terminateSnap(snapId: ValidatedSnapId) {\n    await this.messagingSystem.call('ExecutionService:terminateSnap', snapId);\n    this.messagingSystem.publish(\n      'SnapController:snapTerminated',\n      this.getTruncatedExpect(snapId),\n    );\n  }\n\n  /**\n   * Returns whether the given snap is running.\n   * Throws an error if the snap doesn't exist.\n   *\n   * @param snapId - The id of the Snap to check.\n   * @returns `true` if the snap is running, otherwise `false`.\n   */\n  isRunning(snapId: ValidatedSnapId): boolean {\n    return this.getExpect(snapId).status === 'running';\n  }\n\n  /**\n   * Returns whether the given snap has been added to state.\n   *\n   * @param snapId - The id of the Snap to check for.\n   * @returns `true` if the snap exists in the controller state, otherwise `false`.\n   */\n  has(snapId: ValidatedSnapId): boolean {\n    return Boolean(this.get(snapId));\n  }\n\n  /**\n   * Gets the snap with the given id if it exists, including all data.\n   * This should not be used if the snap is to be serializable, as e.g.\n   * the snap sourceCode may be quite large.\n   *\n   * @param snapId - The id of the Snap to get.\n   * @returns The entire snap object from the controller state.\n   */\n  get(snapId: SnapId): Snap | undefined {\n    return this.state.snaps[snapId as ValidatedSnapId];\n  }\n\n  /**\n   * Gets the snap with the given id, throws if doesn't.\n   * This should not be used if the snap is to be serializable, as e.g.\n   * the snap sourceCode may be quite large.\n   *\n   * @see {@link SnapController.get}\n   * @throws {@link Error}. If the snap doesn't exist\n   * @param snapId - The id of the snap to get.\n   * @returns The entire snap object.\n   */\n  getExpect(snapId: ValidatedSnapId): Snap {\n    const snap = this.get(snapId);\n    assert(snap !== undefined, new Error(`Snap \"${snapId}\" not found.`));\n    return snap;\n  }\n\n  /**\n   * Gets the snap with the given id if it exists, excluding any\n   * non-serializable or expensive-to-serialize data.\n   *\n   * @param snapId - The id of the Snap to get.\n   * @returns A truncated version of the snap state, that is less expensive to serialize.\n   */\n  // TODO(ritave): this.get returns undefined, this.getTruncated returns null\n  getTruncated(snapId: ValidatedSnapId): TruncatedSnap | null {\n    const snap = this.get(snapId);\n\n    return snap ? truncateSnap(snap) : null;\n  }\n\n  /**\n   * Gets the snap with the given id, throw if it doesn't exist.\n   *\n   * @throws {@link Error}. If snap doesn't exist\n   * @param snapId - The id of the snap to get.\n   * @returns A truncated version of the snap state, that is less expensive to serialize.\n   */\n  getTruncatedExpect(snapId: ValidatedSnapId): TruncatedSnap {\n    return truncateSnap(this.getExpect(snapId));\n  }\n\n  /**\n   * Updates the own state of the snap with the given id.\n   * This is distinct from the state MetaMask uses to manage snaps.\n   *\n   * @param snapId - The id of the Snap whose state should be updated.\n   * @param newSnapState - The new state of the snap.\n   */\n  async updateSnapState(\n    snapId: ValidatedSnapId,\n    newSnapState: string,\n  ): Promise<void> {\n    const runtime = this.#getRuntimeExpect(snapId);\n    runtime.state = newSnapState;\n  }\n\n  /**\n   * Clears the state of the snap with the given id.\n   * This is distinct from the state MetaMask uses to manage snaps.\n   *\n   * @param snapId - The id of the Snap whose state should be cleared.\n   */\n  clearSnapState(snapId: ValidatedSnapId) {\n    const runtime = this.#getRuntimeExpect(snapId);\n    runtime.state = null;\n  }\n\n  /**\n   * Adds error from a snap to the SnapController state.\n   *\n   * @param snapError - The error to store on the SnapController.\n   */\n  addSnapError(snapError: SnapError): void {\n    this.update((state: any) => {\n      const id = nanoid();\n      state.snapErrors[id] = {\n        ...snapError,\n        internalID: id,\n      };\n    });\n  }\n\n  /**\n   * Removes an error by internalID from the SnapControllers state.\n   *\n   * @param internalID - The internal error ID to remove on the SnapController.\n   */\n  removeSnapError(internalID: string) {\n    this.update((state: any) => {\n      delete state.snapErrors[internalID];\n    });\n  }\n\n  /**\n   * Clears all errors from the SnapControllers state.\n   */\n  clearSnapErrors() {\n    this.update((state: any) => {\n      state.snapErrors = {};\n    });\n  }\n\n  /**\n   * Gets the own state of the snap with the given id.\n   * This is distinct from the state MetaMask uses to manage snaps.\n   *\n   * @param snapId - The id of the Snap whose state to get.\n   * @returns A promise that resolves with the decrypted snap state or null if no state exists.\n   * @throws If the snap state decryption fails.\n   */\n  async getSnapState(snapId: ValidatedSnapId): Promise<Json> {\n    const { state } = this.#getRuntimeExpect(snapId);\n    return state ?? null;\n  }\n\n  /**\n   * Completely clear the controller's state: delete all associated data,\n   * handlers, event listeners, and permissions; tear down all snap providers.\n   */\n  async clearState() {\n    const snapIds = Object.keys(this.state.snaps);\n    snapIds.forEach((snapId) => {\n      this.#closeAllConnections(snapId);\n    });\n\n    await this.messagingSystem.call('ExecutionService:terminateAllSnaps');\n    snapIds.forEach((snapId) => this.#revokeAllSnapPermissions(snapId));\n\n    this.update((state: any) => {\n      state.snaps = {};\n      state.snapStates = {};\n    });\n  }\n\n  /**\n   * Removes the given snap from state, and clears all associated handlers\n   * and listeners.\n   *\n   * @param snapId - The id of the Snap.\n   * @returns A promise that resolves once the snap has been removed.\n   */\n  async removeSnap(snapId: ValidatedSnapId): Promise<void> {\n    return this.removeSnaps([snapId]);\n  }\n\n  /**\n   * Stops the given snaps, removes them from state, and clears all associated\n   * permissions, handlers, and listeners.\n   *\n   * @param snapIds - The ids of the Snaps.\n   */\n  async removeSnaps(snapIds: ValidatedSnapId[]): Promise<void> {\n    if (!Array.isArray(snapIds)) {\n      throw new Error('Expected array of snap ids.');\n    }\n\n    await Promise.all(\n      snapIds.map(async (snapId) => {\n        const truncated = this.getTruncatedExpect(snapId);\n        // Disable the snap and revoke all of its permissions before deleting\n        // it. This ensures that the snap will not be restarted or otherwise\n        // affect the host environment while we are deleting it.\n        await this.disableSnap(snapId);\n        this.#revokeAllSnapPermissions(snapId);\n\n        this.#removeSnapFromSubjects(snapId);\n\n        this.snapsRuntimeData.delete(snapId);\n\n        this.update((state: any) => {\n          delete state.snaps[snapId];\n          delete state.snapStates[snapId];\n        });\n\n        this.messagingSystem.publish(`SnapController:snapRemoved`, truncated);\n      }),\n    );\n  }\n\n  /**\n   * Removes a snap's permission (caveat) from the specified subject.\n   *\n   * @param origin - The origin from which to remove the snap.\n   * @param snapId - The id of the snap to remove.\n   */\n  removeSnapFromSubject(origin: string, snapId: ValidatedSnapId) {\n    const subjectPermissions = this.messagingSystem.call(\n      'PermissionController:getPermissions',\n      origin,\n    ) as SubjectPermissions<PermissionConstraint>;\n\n    const snapIdsCaveat = subjectPermissions?.[\n      WALLET_SNAP_PERMISSION_KEY\n    ]?.caveats?.find((caveat) => caveat.type === SnapCaveatType.SnapIds) as\n      | Caveat<string, Json>\n      | undefined;\n\n    if (!snapIdsCaveat) {\n      return;\n    }\n\n    const caveatHasSnap = Boolean(\n      (snapIdsCaveat.value as Record<string, Json>)?.[snapId],\n    );\n    if (caveatHasSnap) {\n      const newCaveatValue = {\n        ...(snapIdsCaveat.value as Record<string, Json>),\n      };\n      delete newCaveatValue[snapId];\n      if (Object.keys(newCaveatValue).length > 0) {\n        this.messagingSystem.call(\n          'PermissionController:updateCaveat',\n          origin,\n          WALLET_SNAP_PERMISSION_KEY,\n          SnapCaveatType.SnapIds,\n          newCaveatValue,\n        );\n      } else {\n        this.messagingSystem.call('PermissionController:revokePermissions', {\n          [origin]: [WALLET_SNAP_PERMISSION_KEY],\n        });\n      }\n    }\n  }\n\n  /**\n   * Checks if a list of permissions are dynamic and allowed to be revoked, if they are they will all be revoked.\n   *\n   * @param snapId - The snap ID.\n   * @param permissionNames - The names of the permissions.\n   * @throws If non-dynamic permissions are passed.\n   */\n  revokeDynamicSnapPermissions(\n    snapId: string,\n    permissionNames: NonEmptyArray<string>,\n  ) {\n    assert(\n      permissionNames.every((permissionName) =>\n        this.#dynamicPermissions.includes(permissionName),\n      ),\n      'Non-dynamic permissions cannot be revoked',\n    );\n    this.messagingSystem.call('PermissionController:revokePermissions', {\n      [snapId]: permissionNames,\n    });\n  }\n\n  /**\n   * Removes a snap's permission (caveat) from all subjects.\n   *\n   * @param snapId - The id of the Snap.\n   */\n  #removeSnapFromSubjects(snapId: ValidatedSnapId) {\n    const subjects = this.messagingSystem.call(\n      'PermissionController:getSubjectNames',\n    );\n    for (const subject of subjects) {\n      this.removeSnapFromSubject(subject, snapId);\n    }\n  }\n\n  /**\n   * Safely revokes all permissions granted to a Snap.\n   *\n   * @param snapId - The snap ID.\n   */\n  #revokeAllSnapPermissions(snapId: string) {\n    if (\n      this.messagingSystem.call('PermissionController:hasPermissions', snapId)\n    ) {\n      this.messagingSystem.call(\n        'PermissionController:revokeAllPermissions',\n        snapId,\n      );\n    }\n  }\n\n  /**\n   * Handles incrementing the activeReferences counter.\n   *\n   * @param snapId - The snap id of the snap that was referenced.\n   */\n  incrementActiveReferences(snapId: ValidatedSnapId) {\n    const runtime = this.#getRuntimeExpect(snapId);\n    runtime.activeReferences += 1;\n  }\n\n  /**\n   * Handles decrement the activeReferences counter.\n   *\n   * @param snapId - The snap id of the snap that was referenced..\n   */\n  decrementActiveReferences(snapId: ValidatedSnapId) {\n    const runtime = this.#getRuntimeExpect(snapId);\n    assert(\n      runtime.activeReferences > 0,\n      'SnapController reference management is in an invalid state.',\n    );\n    runtime.activeReferences -= 1;\n  }\n\n  /**\n   * Gets all snaps in their truncated format.\n   *\n   * @returns All installed snaps in their truncated format.\n   */\n  getAllSnaps(): TruncatedSnap[] {\n    return Object.values(this.state.snaps).map(truncateSnap);\n  }\n\n  /**\n   * Gets the serialized permitted snaps of the given origin, if any.\n   *\n   * @param origin - The origin whose permitted snaps to retrieve.\n   * @returns The serialized permitted snaps for the origin.\n   */\n  getPermittedSnaps(origin: string): InstallSnapsResult {\n    const permissions =\n      this.messagingSystem.call(\n        'PermissionController:getPermissions',\n        origin,\n      ) ?? {};\n    const snaps =\n      permissions[WALLET_SNAP_PERMISSION_KEY]?.caveats?.find(\n        (caveat) => caveat.type === SnapCaveatType.SnapIds,\n      )?.value ?? {};\n    return Object.keys(snaps).reduce<InstallSnapsResult>(\n      (permittedSnaps, snapId) => {\n        const snap = this.get(snapId);\n        const truncatedSnap = this.getTruncated(snapId as ValidatedSnapId);\n\n        if (truncatedSnap && snap?.status !== SnapStatus.Installing) {\n          permittedSnaps[snapId] = truncatedSnap;\n        }\n        return permittedSnaps;\n      },\n      {},\n    );\n  }\n\n  /**\n   * Installs the snaps requested by the given origin, returning the snap\n   * object if the origin is permitted to install it, and an authorization error\n   * otherwise.\n   *\n   * @param origin - The origin that requested to install the snaps.\n   * @param requestedSnaps - The snaps to install.\n   * @returns An object of snap ids and snap objects, or errors if a\n   * snap couldn't be installed.\n   */\n  async installSnaps(\n    origin: string,\n    requestedSnaps: RequestedSnapPermissions,\n  ): Promise<InstallSnapsResult> {\n    const result: InstallSnapsResult = {};\n\n    const snapIds = Object.keys(requestedSnaps);\n\n    const pendingUpdates = [];\n    const pendingInstalls = [];\n\n    try {\n      for (const [snapId, { version: rawVersion }] of Object.entries(\n        requestedSnaps,\n      )) {\n        assertIsValidSnapId(snapId);\n\n        const [error, version] = resolveVersionRange(rawVersion);\n\n        if (error) {\n          throw ethErrors.rpc.invalidParams(\n            `The \"version\" field must be a valid SemVer version range if specified. Received: \"${rawVersion}\".`,\n          );\n        }\n\n        const location = this.#detectSnapLocation(snapId, {\n          versionRange: version,\n          fetch: this.#fetchFunction,\n          allowLocal: this.#featureFlags.allowLocalSnaps,\n        });\n\n        // Existing snaps may need to be updated, unless they should be re-installed (e.g. local snaps)\n        // Everything else is treated as an install\n        const isUpdate = this.has(snapId) && !location.shouldAlwaysReload;\n\n        if (isUpdate && this.#isValidUpdate(snapId, version)) {\n          pendingUpdates.push(snapId);\n          let rollbackSnapshot = this.#getRollbackSnapshot(snapId);\n          if (rollbackSnapshot === undefined) {\n            const prevSourceCode = this.#getRuntimeExpect(snapId).sourceCode;\n            rollbackSnapshot = this.#createRollbackSnapshot(snapId);\n            rollbackSnapshot.sourceCode = prevSourceCode;\n            rollbackSnapshot.newVersion = version;\n          } else {\n            throw new Error('This snap is already being updated.');\n          }\n        } else if (!isUpdate) {\n          pendingInstalls.push(snapId);\n        }\n\n        result[snapId] = await this.processRequestedSnap(\n          origin,\n          snapId,\n          location,\n          version,\n        );\n      }\n      snapIds.forEach((snapId) => this.#rollbackSnapshots.delete(snapId));\n    } catch (error) {\n      const installed = pendingInstalls.filter((snapId) => this.has(snapId));\n      await this.removeSnaps(installed);\n      const snapshottedSnaps = [...this.#rollbackSnapshots.keys()];\n      const snapsToRollback = pendingUpdates.filter((snapId) =>\n        snapshottedSnaps.includes(snapId),\n      );\n      await this.#rollbackSnaps(snapsToRollback);\n\n      throw error;\n    }\n    return result;\n  }\n\n  /**\n   * Adds, authorizes, and runs the given snap with a snap provider.\n   * Results from this method should be efficiently serializable.\n   *\n   * @param origin - The origin requesting the snap.\n   * @param snapId - The id of the snap.\n   * @param location - The location implementation of the snap.\n   * @param versionRange - The semver range of the snap to install.\n   * @returns The resulting snap object, or an error if something went wrong.\n   */\n  private async processRequestedSnap(\n    origin: string,\n    snapId: ValidatedSnapId,\n    location: SnapLocation,\n    versionRange: SemVerRange,\n  ): Promise<ProcessSnapResult> {\n    const existingSnap = this.getTruncated(snapId);\n\n    // For devX we always re-install local snaps.\n    if (existingSnap && !location.shouldAlwaysReload) {\n      if (satisfiesVersionRange(existingSnap.version, versionRange)) {\n        return existingSnap;\n      }\n\n      if (this.#featureFlags.dappsCanUpdateSnaps === true) {\n        return await this.updateSnap(origin, snapId, location, versionRange);\n      }\n      throw ethErrors.rpc.invalidParams(\n        `Version mismatch with already installed snap. ${snapId}@${existingSnap.version} doesn't satisfy requested version ${versionRange}.`,\n      );\n    }\n\n    let pendingApproval = this.#createApproval({\n      origin,\n      snapId,\n      type: SNAP_APPROVAL_INSTALL,\n    });\n\n    // Existing snaps must be stopped before overwriting\n    if (existingSnap && this.isRunning(snapId)) {\n      await this.stopSnap(snapId, SnapStatusEvents.Stop);\n    }\n\n    // Existing snaps that should be re-installed should not maintain their existing permissions\n    if (existingSnap && location.shouldAlwaysReload) {\n      this.#revokeAllSnapPermissions(snapId);\n    }\n\n    try {\n      const { sourceCode } = await this.#add({\n        origin,\n        id: snapId,\n        location,\n        versionRange,\n      });\n\n      await this.authorize(snapId, pendingApproval);\n\n      pendingApproval = this.#createApproval({\n        origin,\n        snapId,\n        type: SNAP_APPROVAL_RESULT,\n      });\n\n      await this.#startSnap({\n        snapId,\n        sourceCode,\n      });\n\n      const truncated = this.getTruncatedExpect(snapId);\n\n      this.#updateApproval(pendingApproval.id, {\n        loading: false,\n        type: SNAP_APPROVAL_INSTALL,\n      });\n\n      this.messagingSystem.publish(`SnapController:snapInstalled`, truncated);\n\n      return truncated;\n    } catch (error) {\n      logError(`Error when adding ${snapId}.`, error);\n\n      this.#updateApproval(pendingApproval.id, {\n        loading: false,\n        type: SNAP_APPROVAL_INSTALL,\n        error: error instanceof Error ? error.message : error.toString(),\n      });\n\n      throw error;\n    }\n  }\n\n  #createApproval({\n    origin,\n    snapId,\n    type,\n  }: {\n    origin: string;\n    snapId: ValidatedSnapId;\n    type: string;\n  }): PendingApproval {\n    const id = nanoid();\n    const promise = this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        origin,\n        id,\n        type,\n        requestData: {\n          // Mirror previous installation metadata\n          metadata: { id, origin: snapId, dappOrigin: origin },\n          snapId,\n        },\n        requestState: {\n          loading: true,\n        },\n      },\n      true,\n    );\n\n    return { id, promise };\n  }\n\n  #updateApproval(id: string, requestState: Record<string, Json>) {\n    try {\n      this.messagingSystem.call('ApprovalController:updateRequestState', {\n        id,\n        requestState,\n      });\n    } catch {\n      // Do nothing\n    }\n  }\n\n  /**\n   * Updates an installed snap. The flow is similar to\n   * {@link SnapController.installSnaps}. The user will be asked if they want\n   * to update, then approve any permission changes, and finally the snap will\n   * be restarted.\n   *\n   * The update will fail if the user rejects any prompt or if the new version\n   * of the snap is blocked.\n   *\n   * If the original version of the snap was blocked and the update succeeded,\n   * the snap will be unblocked and enabled before it is restarted.\n   *\n   * @param origin - The origin requesting the snap update.\n   * @param snapId - The id of the Snap to be updated.\n   * @param location - The location implementation of the snap.\n   * @param newVersionRange - A semver version range in which the maximum version will be chosen.\n   * @returns The snap metadata if updated, `null` otherwise.\n   */\n  async updateSnap(\n    origin: string,\n    snapId: ValidatedSnapId,\n    location: SnapLocation,\n    newVersionRange: string = DEFAULT_REQUESTED_SNAP_VERSION,\n  ): Promise<TruncatedSnap> {\n    if (!isValidSemVerRange(newVersionRange)) {\n      throw new Error(\n        `Received invalid snap version range: \"${newVersionRange}\".`,\n      );\n    }\n\n    let pendingApproval = this.#createApproval({\n      origin,\n      snapId,\n      type: SNAP_APPROVAL_UPDATE,\n    });\n\n    try {\n      const snap = this.getExpect(snapId);\n\n      const newSnap = await this.#fetchSnap(snapId, location);\n\n      const newVersion = newSnap.manifest.result.version;\n      if (!gtVersion(newVersion, snap.version)) {\n        throw ethErrors.rpc.invalidParams(\n          `Snap \"${snapId}@${snap.version}\" is already installed. Couldn't update to a version inside requested \"${newVersionRange}\" range.`,\n        );\n      }\n\n      if (!satisfiesVersionRange(newVersion, newVersionRange)) {\n        throw new Error(\n          `Version mismatch. Manifest for \"${snapId}\" specifies version \"${newVersion}\" which doesn't satisfy requested version range \"${newVersionRange}\".`,\n        );\n      }\n\n      await this.#assertIsInstallAllowed(snapId, {\n        version: newVersion,\n        checksum: newSnap.manifest.result.source.shasum,\n      });\n\n      const processedPermissions = processSnapPermissions(\n        newSnap.manifest.result.initialPermissions,\n      );\n\n      this.#validateSnapPermissions(processedPermissions);\n\n      const { newPermissions, unusedPermissions, approvedPermissions } =\n        this.#calculatePermissionsChange(snapId, processedPermissions);\n\n      this.#updateApproval(pendingApproval.id, {\n        permissions: newPermissions,\n        newVersion: newSnap.manifest.result.version,\n        newPermissions,\n        approvedPermissions,\n        unusedPermissions,\n        loading: false,\n      });\n\n      const { permissions: approvedNewPermissions, ...requestData } =\n        (await pendingApproval.promise) as PermissionsRequest;\n\n      pendingApproval = this.#createApproval({\n        origin,\n        snapId,\n        type: SNAP_APPROVAL_RESULT,\n      });\n\n      if (this.isRunning(snapId)) {\n        await this.stopSnap(snapId, SnapStatusEvents.Stop);\n      }\n\n      this.#transition(snapId, SnapStatusEvents.Update);\n\n      this.#set({\n        origin,\n        id: snapId,\n        manifest: newSnap.manifest,\n        files: newSnap.files,\n        isUpdate: true,\n      });\n\n      const unusedPermissionsKeys = Object.keys(unusedPermissions);\n      if (isNonEmptyArray(unusedPermissionsKeys)) {\n        this.messagingSystem.call('PermissionController:revokePermissions', {\n          [snapId]: unusedPermissionsKeys,\n        });\n      }\n\n      if (isNonEmptyArray(Object.keys(approvedNewPermissions))) {\n        this.messagingSystem.call('PermissionController:grantPermissions', {\n          approvedPermissions: approvedNewPermissions,\n          subject: { origin: snapId },\n          requestData,\n        });\n      }\n\n      const rollbackSnapshot = this.#getRollbackSnapshot(snapId);\n      if (rollbackSnapshot !== undefined) {\n        rollbackSnapshot.permissions.revoked = unusedPermissions;\n        rollbackSnapshot.permissions.granted = Object.keys(\n          approvedNewPermissions,\n        );\n        rollbackSnapshot.permissions.requestData = requestData;\n      }\n\n      const normalizedSourcePath = normalizeRelative(\n        newSnap.manifest.result.source.location.npm.filePath,\n      );\n\n      const sourceCode = newSnap.files\n        .find((file) => file.path === normalizedSourcePath)\n        ?.toString();\n\n      assert(\n        typeof sourceCode === 'string' && sourceCode.length > 0,\n        `Invalid source code for snap \"${snapId}\".`,\n      );\n\n      try {\n        await this.#startSnap({ snapId, sourceCode });\n      } catch {\n        throw new Error(`Snap ${snapId} crashed with updated source code.`);\n      }\n\n      const truncatedSnap = this.getTruncatedExpect(snapId);\n      this.messagingSystem.publish(\n        'SnapController:snapUpdated',\n        truncatedSnap,\n        snap.version,\n      );\n\n      this.#updateApproval(pendingApproval.id, {\n        loading: false,\n        type: SNAP_APPROVAL_UPDATE,\n      });\n\n      return truncatedSnap;\n    } catch (error) {\n      logError(`Error when updating ${snapId},`, error);\n\n      this.#updateApproval(pendingApproval.id, {\n        loading: false,\n        error: error instanceof Error ? error.message : error.toString(),\n        type: SNAP_APPROVAL_UPDATE,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Get metadata for the given snap ID.\n   *\n   * @param snapId - The ID of the snap to get metadata for.\n   * @returns The metadata for the given snap ID, or `null` if the snap is not\n   * verified.\n   */\n  async getRegistryMetadata(\n    snapId: ValidatedSnapId,\n  ): Promise<SnapsRegistryMetadata | null> {\n    return await this.messagingSystem.call('SnapsRegistry:getMetadata', snapId);\n  }\n\n  /**\n   * Returns a promise representing the complete installation of the requested snap.\n   * If the snap is already being installed, the previously pending promise will be returned.\n   *\n   * @param args - Object containing the snap id and either the URL of the snap's manifest,\n   * or the snap's manifest and source code. The object may also optionally contain a target\n   * version.\n   * @returns The resulting snap object.\n   */\n  async #add(args: AddSnapArgs): Promise<PersistedSnap> {\n    const { id: snapId, location, versionRange } = args;\n\n    this.#setupRuntime(snapId, { sourceCode: null, state: null });\n    const runtime = this.#getRuntimeExpect(snapId);\n    if (!runtime.installPromise) {\n      log(`Adding snap: ${snapId}`);\n\n      // If fetching and setting the snap succeeds, this property will be set\n      // to null in the authorize() method.\n      runtime.installPromise = (async () => {\n        const fetchedSnap = await this.#fetchSnap(snapId, location);\n        const manifest = fetchedSnap.manifest.result;\n        if (!satisfiesVersionRange(manifest.version, versionRange)) {\n          throw new Error(\n            `Version mismatch. Manifest for \"${snapId}\" specifies version \"${manifest.version}\" which doesn't satisfy requested version range \"${versionRange}\".`,\n          );\n        }\n        await this.#assertIsInstallAllowed(snapId, {\n          version: manifest.version,\n          checksum: manifest.source.shasum,\n        });\n\n        return this.#set({\n          ...args,\n          ...fetchedSnap,\n          id: snapId,\n        });\n      })();\n    }\n\n    try {\n      return await runtime.installPromise;\n    } catch (error) {\n      // Reset promise so users can retry installation in case the problem is\n      // temporary.\n      runtime.installPromise = null;\n      throw error;\n    }\n  }\n\n  async #startSnap(snapData: { snapId: ValidatedSnapId; sourceCode: string }) {\n    const { snapId } = snapData;\n    if (this.isRunning(snapId)) {\n      throw new Error(`Snap \"${snapId}\" is already started.`);\n    }\n\n    try {\n      const result = await this.#executeWithTimeout(\n        snapId,\n        this.messagingSystem.call('ExecutionService:executeSnap', {\n          ...snapData,\n          endowments: await this.#getEndowments(snapId),\n        }),\n      );\n      this.#transition(snapId, SnapStatusEvents.Start);\n      return result;\n    } catch (error) {\n      await this.#terminateSnap(snapId);\n      throw error;\n    }\n  }\n\n  /**\n   * Gets the names of all endowments that will be added to the Snap's\n   * Compartment when it executes. These should be the names of global\n   * JavaScript APIs accessible in the root realm of the execution environment.\n   *\n   * Throws an error if the endowment getter for a permission returns a truthy\n   * value that is not an array of strings.\n   *\n   * @param snapId - The id of the snap whose SES endowments to get.\n   * @returns An array of the names of the endowments.\n   */\n  async #getEndowments(snapId: string): Promise<string[]> {\n    let allEndowments: string[] = [];\n\n    for (const permissionName of this.#environmentEndowmentPermissions) {\n      if (\n        this.messagingSystem.call(\n          'PermissionController:hasPermission',\n          snapId,\n          permissionName,\n        )\n      ) {\n        const endowments = await this.messagingSystem.call(\n          'PermissionController:getEndowments',\n          snapId,\n          permissionName,\n        );\n\n        if (endowments) {\n          // We don't have any guarantees about the type of the endowments\n          // value, so we have to guard at runtime.\n          if (\n            !Array.isArray(endowments) ||\n            endowments.some((value) => typeof value !== 'string')\n          ) {\n            throw new Error('Expected an array of string endowment names.');\n          }\n\n          allEndowments = allEndowments.concat(endowments as string[]);\n        }\n      }\n    }\n\n    const dedupedEndowments = [\n      ...new Set([...DEFAULT_ENDOWMENTS, ...allEndowments]),\n    ];\n\n    if (\n      dedupedEndowments.length <\n      // This is a bug in TypeScript: https://github.com/microsoft/TypeScript/issues/48313\n      // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n      DEFAULT_ENDOWMENTS.length + allEndowments.length\n    ) {\n      logError(\n        `Duplicate endowments found for ${snapId}. Default endowments should not be requested.`,\n        allEndowments,\n      );\n    }\n    return dedupedEndowments;\n  }\n\n  /**\n   * Sets a snap in state. Called when a snap is installed or updated. Performs\n   * various validation checks on the received arguments, and will throw if\n   * validation fails.\n   *\n   * The snap will be enabled and unblocked by the time this method returns,\n   * regardless of its previous state.\n   *\n   * See {@link SnapController.add} and {@link SnapController.updateSnap} for\n   * usage.\n   *\n   * @param args - The add snap args.\n   * @returns The resulting snap object.\n   */\n  #set(args: SetSnapArgs): PersistedSnap {\n    const { id: snapId, origin, manifest, files, isUpdate = false } = args;\n\n    assertIsSnapManifest(manifest.result);\n    const { version } = manifest.result;\n\n    const normalizedSourcePath = normalizeRelative(\n      manifest.result.source.location.npm.filePath,\n    );\n\n    const { iconPath } = manifest.result.source.location.npm;\n    const normalizedIconPath = iconPath && normalizeRelative(iconPath);\n\n    const sourceCode = files\n      .find((file) => file.path === normalizedSourcePath)\n      ?.toString();\n\n    const svgIcon = normalizedIconPath\n      ? files.find((file) => file.path === normalizedIconPath)\n      : undefined;\n\n    assert(\n      typeof sourceCode === 'string' && sourceCode.length > 0,\n      `Invalid source code for snap \"${snapId}\".`,\n    );\n\n    const snapsState = this.state.snaps;\n\n    const existingSnap = snapsState[snapId];\n\n    const previousVersionHistory = existingSnap?.versionHistory ?? [];\n    const versionHistory = [\n      ...previousVersionHistory,\n      {\n        version,\n        date: Date.now(),\n        origin,\n      },\n    ];\n\n    const snap: Snap = {\n      // Restore relevant snap state if it exists\n      ...existingSnap,\n\n      // Note that the snap will be unblocked and enabled, regardless of its\n      // previous state.\n      blocked: false,\n      enabled: true,\n\n      id: snapId,\n      initialPermissions: manifest.result.initialPermissions,\n      manifest: manifest.result,\n      status: this.#statusMachine.config.initial as StatusStates['value'],\n      version,\n      versionHistory,\n    };\n    // If the snap was blocked, it isn't any longer\n    delete snap.blockInformation;\n\n    // store the snap back in state\n    const { inversePatches } = this.update((state: any) => {\n      state.snaps[snapId] = snap;\n    });\n\n    // checking for isUpdate here as this function is also used in\n    // the install flow, we do not care to create snapshots for installs\n    if (isUpdate) {\n      const rollbackSnapshot = this.#getRollbackSnapshot(snapId);\n      if (rollbackSnapshot !== undefined) {\n        rollbackSnapshot.statePatches = inversePatches;\n      }\n    }\n\n    const runtime = this.#getRuntimeExpect(snapId);\n    runtime.sourceCode = sourceCode;\n\n    this.messagingSystem.publish(\n      `SnapController:snapAdded`,\n      snap,\n      svgIcon?.toString(),\n    );\n    return { ...snap, sourceCode };\n  }\n\n  /**\n   * Fetches the manifest and source code of a snap.\n   *\n   * This function is not hash private yet because of tests.\n   *\n   * @param snapId - The id of the Snap.\n   * @param location - Source from which snap will be fetched.\n   * @returns A tuple of the Snap manifest object and the Snap source code.\n   */\n  async #fetchSnap(\n    snapId: ValidatedSnapId,\n    location: SnapLocation,\n  ): Promise<FetchSnapResult> {\n    try {\n      const manifest = await location.manifest();\n      const sourceCode = await location.fetch(\n        manifest.result.source.location.npm.filePath,\n      );\n      const { iconPath } = manifest.result.source.location.npm;\n      const svgIcon = iconPath ? await location.fetch(iconPath) : undefined;\n\n      const files = [sourceCode];\n      if (svgIcon) {\n        files.push(svgIcon);\n      }\n\n      validateFetchedSnap({ manifest, sourceCode, svgIcon });\n\n      return { manifest, files, location };\n    } catch (error) {\n      // TODO(ritave): Export `getErrorMessage()` from @metamask/utils and use it here\n      //               https://github.com/MetaMask/utils/blob/62d022ef83c91fa4d150e51913be4441508a0ab1/src/assert.ts\n      const message = error instanceof Error ? error.message : error.toString();\n      throw new Error(`Failed to fetch Snap \"${snapId}\": ${message}.`);\n    }\n  }\n\n  #validateSnapPermissions(\n    processedPermissions: Record<string, Pick<PermissionConstraint, 'caveats'>>,\n  ) {\n    const permissionKeys = Object.keys(processedPermissions);\n\n    const handlerPermissions = Object.values(handlerEndowments);\n\n    assert(\n      permissionKeys.some((key) => handlerPermissions.includes(key)),\n      `A snap must request at least one of the following permissions: ${handlerPermissions.join(\n        ', ',\n      )}.`,\n    );\n\n    const excludedPermissionErrors = permissionKeys.reduce<string[]>(\n      (errors, permission) => {\n        if (hasProperty(this.#excludedPermissions, permission)) {\n          errors.push(this.#excludedPermissions[permission]);\n        }\n\n        return errors;\n      },\n      [],\n    );\n\n    assert(\n      excludedPermissionErrors.length === 0,\n      `One or more permissions are not allowed:\\n${excludedPermissionErrors.join(\n        '\\n',\n      )}`,\n    );\n  }\n\n  /**\n   * Initiates a request for the given snap's initial permissions.\n   * Must be called in order. See processRequestedSnap.\n   *\n   * This function is not hash private yet because of tests.\n   *\n   * @param snapId - The id of the Snap.\n   * @param pendingApproval - Pending approval to update.\n   * @returns The snap's approvedPermissions.\n   */\n  private async authorize(\n    snapId: ValidatedSnapId,\n    pendingApproval: PendingApproval,\n  ): Promise<void> {\n    log(`Authorizing snap: ${snapId}`);\n    const snapsState = this.state.snaps;\n    const snap = snapsState[snapId];\n    const { initialPermissions } = snap;\n\n    try {\n      const processedPermissions = processSnapPermissions(initialPermissions);\n\n      this.#validateSnapPermissions(processedPermissions);\n\n      this.#updateApproval(pendingApproval.id, {\n        loading: false,\n        permissions: processedPermissions,\n      });\n\n      const { permissions: approvedPermissions, ...requestData } =\n        (await pendingApproval.promise) as PermissionsRequest;\n\n      if (isNonEmptyArray(Object.keys(approvedPermissions))) {\n        this.messagingSystem.call('PermissionController:grantPermissions', {\n          approvedPermissions,\n          subject: { origin: snapId },\n          requestData,\n        });\n      }\n    } finally {\n      const runtime = this.#getRuntimeExpect(snapId);\n      runtime.installPromise = null;\n    }\n  }\n\n  destroy() {\n    super.destroy();\n\n    if (this.#timeoutForLastRequestStatus) {\n      clearTimeout(this.#timeoutForLastRequestStatus);\n    }\n\n    /* eslint-disable @typescript-eslint/unbound-method */\n    this.messagingSystem.unsubscribe(\n      'ExecutionService:unhandledError',\n      this._onUnhandledSnapError,\n    );\n\n    this.messagingSystem.unsubscribe(\n      'ExecutionService:outboundRequest',\n      this._onOutboundRequest,\n    );\n\n    this.messagingSystem.unsubscribe(\n      'ExecutionService:outboundResponse',\n      this._onOutboundResponse,\n    );\n    /* eslint-enable @typescript-eslint/unbound-method */\n  }\n\n  /**\n   * Passes a JSON-RPC request object to the RPC handler function of a snap.\n   *\n   * @param options - A bag of options.\n   * @param options.snapId - The ID of the recipient snap.\n   * @param options.origin - The origin of the RPC request.\n   * @param options.handler - The handler to trigger on the snap for the request.\n   * @param options.request - The JSON-RPC request object.\n   * @returns The result of the JSON-RPC request.\n   */\n  async handleRequest({\n    snapId,\n    origin,\n    handler: handlerType,\n    request: rawRequest,\n  }: SnapRpcHookArgs & { snapId: ValidatedSnapId }): Promise<unknown> {\n    const request = {\n      jsonrpc: '2.0',\n      id: nanoid(),\n      ...rawRequest,\n    };\n\n    assertIsJsonRpcRequest(request);\n\n    const permissionName = handlerEndowments[handlerType];\n    const hasPermission = this.messagingSystem.call(\n      'PermissionController:hasPermission',\n      snapId,\n      permissionName,\n    );\n\n    if (!hasPermission) {\n      throw new Error(\n        `Snap \"${snapId}\" is not permitted to use \"${permissionName}\".`,\n      );\n    }\n\n    if (permissionName === SnapEndowments.Rpc) {\n      const subject = this.messagingSystem.call(\n        'SubjectMetadataController:getSubjectMetadata',\n        origin,\n      );\n      const isSnap = subject?.subjectType === SubjectType.Snap;\n\n      const permissions = this.messagingSystem.call(\n        'PermissionController:getPermissions',\n        snapId,\n      );\n\n      const rpcPermission = permissions?.[SnapEndowments.Rpc];\n      assert(rpcPermission);\n\n      const origins = getRpcCaveatOrigins(rpcPermission);\n      assert(origins);\n\n      if ((isSnap && !origins.snaps) || (!isSnap && !origins.dapps)) {\n        throw new Error(\n          `Snap \"${snapId}\" is not permitted to handle JSON-RPC requests from \"${origin}\".`,\n        );\n      }\n    }\n\n    const handler = await this.#getRpcRequestHandler(snapId);\n    if (!handler) {\n      throw new Error(\n        `Snap RPC message handler not found for snap \"${snapId}\".`,\n      );\n    }\n\n    return handler({ origin, handler: handlerType, request });\n  }\n\n  /**\n   * Gets the RPC message handler for the given snap.\n   *\n   * @param snapId - The id of the Snap whose message handler to get.\n   * @returns The RPC handler for the given snap.\n   */\n  #getRpcRequestHandler(snapId: ValidatedSnapId): SnapRpcHook {\n    const runtime = this.#getRuntimeExpect(snapId);\n    const existingHandler = runtime.rpcHandler;\n    if (existingHandler) {\n      return existingHandler;\n    }\n\n    const requestQueue = new RequestQueue(5);\n    // We need to set up this promise map to map snapIds to their respective startPromises,\n    // because otherwise we would lose context on the correct startPromise.\n    const startPromises = new Map<string, Promise<void>>();\n\n    const rpcHandler = async ({\n      origin,\n      handler: handlerType,\n      request,\n    }: SnapRpcHookArgs) => {\n      if (this.state.snaps[snapId].enabled === false) {\n        throw new Error(`Snap \"${snapId}\" is disabled.`);\n      }\n\n      if (this.state.snaps[snapId].status === SnapStatus.Installing) {\n        throw new Error(\n          `Snap \"${snapId}\" is currently being installed. Please try again later.`,\n        );\n      }\n\n      if (!this.isRunning(snapId)) {\n        let localStartPromise = startPromises.get(snapId);\n        if (!localStartPromise) {\n          localStartPromise = this.startSnap(snapId);\n          startPromises.set(snapId, localStartPromise);\n        } else if (requestQueue.get(origin) >= requestQueue.maxQueueSize) {\n          throw new Error(\n            'Exceeds maximum number of requests waiting to be resolved, please try again.',\n          );\n        }\n\n        requestQueue.increment(origin);\n        try {\n          await localStartPromise;\n        } finally {\n          requestQueue.decrement(origin);\n          // Only delete startPromise for a snap if its value hasn't changed\n          if (startPromises.get(snapId) === localStartPromise) {\n            startPromises.delete(snapId);\n          }\n        }\n      }\n\n      const timer = new Timer(this.maxRequestTime);\n      this.#recordSnapRpcRequestStart(snapId, request.id, timer);\n\n      const handleRpcRequestPromise = this.messagingSystem.call(\n        'ExecutionService:handleRpcRequest',\n        snapId,\n        { origin, handler: handlerType, request },\n      );\n\n      // This will either get the result or reject due to the timeout.\n      try {\n        const result = await this.#executeWithTimeout(\n          snapId,\n          handleRpcRequestPromise,\n          timer,\n        );\n        this.#recordSnapRpcRequestFinish(snapId, request.id);\n        return result;\n      } catch (error) {\n        await this.stopSnap(snapId, SnapStatusEvents.Crash);\n        throw error;\n      }\n    };\n\n    runtime.rpcHandler = rpcHandler;\n    return rpcHandler;\n  }\n\n  /**\n   * Awaits the specified promise and rejects if the promise doesn't resolve\n   * before the timeout.\n   *\n   * @param snapId - The snap id.\n   * @param promise - The promise to await.\n   * @param timer - An optional timer object to control the timeout.\n   * @returns The result of the promise or rejects if the promise times out.\n   * @template PromiseValue - The value of the Promise.\n   */\n  async #executeWithTimeout<PromiseValue>(\n    snapId: ValidatedSnapId,\n    promise: Promise<PromiseValue>,\n    timer?: Timer,\n  ): Promise<PromiseValue> {\n    const isLongRunning = this.messagingSystem.call(\n      'PermissionController:hasPermission',\n      snapId,\n      SnapEndowments.LongRunning,\n    );\n\n    // Long running snaps have timeouts disabled\n    if (isLongRunning) {\n      logWarning(\n        `${SnapEndowments.LongRunning} will soon be deprecated. For more information please see https://github.com/MetaMask/snaps-monorepo/issues/945.`,\n      );\n      return promise;\n    }\n\n    const result = await withTimeout(promise, timer ?? this.maxRequestTime);\n    if (result === hasTimedOut) {\n      throw new Error('The request timed out.');\n    }\n    return result;\n  }\n\n  #recordSnapRpcRequestStart(\n    snapId: ValidatedSnapId,\n    requestId: unknown,\n    timer: Timer,\n  ) {\n    const runtime = this.#getRuntimeExpect(snapId);\n    runtime.pendingInboundRequests.push({ requestId, timer });\n    runtime.lastRequest = null;\n  }\n\n  #recordSnapRpcRequestFinish(snapId: ValidatedSnapId, requestId: unknown) {\n    const runtime = this.#getRuntimeExpect(snapId);\n    runtime.pendingInboundRequests = runtime.pendingInboundRequests.filter(\n      (request) => request.requestId !== requestId,\n    );\n\n    if (runtime.pendingInboundRequests.length === 0) {\n      runtime.lastRequest = Date.now();\n    }\n  }\n\n  /**\n   * Retrieves the rollback snapshot of a snap.\n   *\n   * @param snapId - The snap id.\n   * @returns A `RollbackSnapshot` or `undefined` if one doesn't exist.\n   */\n  #getRollbackSnapshot(snapId: ValidatedSnapId): RollbackSnapshot | undefined {\n    return this.#rollbackSnapshots.get(snapId);\n  }\n\n  /**\n   * Creates a `RollbackSnapshot` that is used to help ensure\n   * atomicity in multiple snap updates.\n   *\n   * @param snapId - The snap id.\n   * @throws {@link Error}. If the snap exists before creation or if creation fails.\n   * @returns A `RollbackSnapshot`.\n   */\n  #createRollbackSnapshot(snapId: ValidatedSnapId): RollbackSnapshot {\n    assert(\n      this.#rollbackSnapshots.get(snapId) === undefined,\n      new Error(`Snap \"${snapId}\" rollback snapshot already exists.`),\n    );\n\n    this.#rollbackSnapshots.set(snapId, {\n      statePatches: [],\n      sourceCode: '',\n      permissions: { revoked: null, granted: [], requestData: null },\n      newVersion: '',\n    });\n\n    const newRollbackSnapshot = this.#rollbackSnapshots.get(snapId);\n\n    assert(\n      newRollbackSnapshot !== undefined,\n      new Error(`Snapshot creation failed for ${snapId}.`),\n    );\n    return newRollbackSnapshot;\n  }\n\n  /**\n   * Rolls back a snap to its previous state, permissions\n   * and source code based on the `RollbackSnapshot` that\n   * is captured during the update process. After rolling back,\n   * the function also emits an event indicating that the\n   * snap has been rolled back and it clears the snapshot\n   * for that snap.\n   *\n   * @param snapId - The snap id.\n   * @throws {@link Error}. If a snapshot does not exist.\n   */\n  async #rollbackSnap(snapId: ValidatedSnapId) {\n    const rollbackSnapshot = this.#getRollbackSnapshot(snapId);\n    if (!rollbackSnapshot) {\n      throw new Error('A snapshot does not exist for this snap.');\n    }\n\n    await this.stopSnap(snapId, SnapStatusEvents.Stop);\n    // Always set to stopped even if it wasn't running initially\n    if (this.get(snapId)?.status !== SnapStatus.Stopped) {\n      this.#transition(snapId, SnapStatusEvents.Stop);\n    }\n\n    const { statePatches, sourceCode, permissions } = rollbackSnapshot;\n\n    if (statePatches?.length) {\n      this.applyPatches(statePatches);\n    }\n\n    // Reset snap status, as we may have been in another state when we stored state patches\n    // But now we are 100% in a stopped state\n    if (this.get(snapId)?.status !== SnapStatus.Stopped) {\n      this.update((state) => {\n        state.snaps[snapId].status = SnapStatus.Stopped;\n      });\n    }\n\n    if (sourceCode) {\n      const runtime = this.#getRuntimeExpect(snapId);\n      runtime.sourceCode = sourceCode;\n    }\n\n    if (permissions.revoked && Object.keys(permissions.revoked).length) {\n      this.messagingSystem.call('PermissionController:grantPermissions', {\n        approvedPermissions: permissions.revoked as RequestedPermissions,\n        subject: { origin: snapId },\n        requestData: permissions.requestData as Record<string, unknown>,\n      });\n    }\n\n    if (permissions.granted?.length) {\n      this.messagingSystem.call('PermissionController:revokePermissions', {\n        [snapId]: permissions.granted as NonEmptyArray<string>,\n      });\n    }\n\n    const truncatedSnap = this.getTruncatedExpect(snapId);\n\n    this.messagingSystem.publish(\n      'SnapController:snapRolledback',\n      truncatedSnap,\n      rollbackSnapshot.newVersion,\n    );\n\n    this.#rollbackSnapshots.delete(snapId);\n  }\n\n  /**\n   * Iterates through an array of snap ids\n   * and calls `rollbackSnap` on them.\n   *\n   * @param snapIds - An array of snap ids.\n   */\n  async #rollbackSnaps(snapIds: ValidatedSnapId[]) {\n    for (const snapId of snapIds) {\n      await this.#rollbackSnap(snapId);\n    }\n  }\n\n  #getRuntime(snapId: ValidatedSnapId): SnapRuntimeData | undefined {\n    return this.snapsRuntimeData.get(snapId);\n  }\n\n  #getRuntimeExpect(snapId: ValidatedSnapId): SnapRuntimeData {\n    const runtime = this.#getRuntime(snapId);\n    assert(\n      runtime !== undefined,\n      new Error(`Snap \"${snapId}\" runtime data not found`),\n    );\n    return runtime;\n  }\n\n  #setupRuntime(\n    snapId: ValidatedSnapId,\n    data: { sourceCode: string | null; state: string | null },\n  ) {\n    if (this.snapsRuntimeData.has(snapId)) {\n      return;\n    }\n\n    const snap = this.get(snapId);\n    const interpreter = interpret(this.#statusMachine);\n    interpreter.start({\n      context: { snapId },\n      value:\n        snap?.status ??\n        (this.#statusMachine.config.initial as StatusStates['value']),\n    });\n\n    forceStrict(interpreter);\n\n    this.snapsRuntimeData.set(snapId, {\n      lastRequest: null,\n      rpcHandler: null,\n      installPromise: null,\n      activeReferences: 0,\n      pendingInboundRequests: [],\n      pendingOutboundRequests: 0,\n      interpreter,\n      ...data,\n    });\n  }\n\n  #calculatePermissionsChange(\n    snapId: ValidatedSnapId,\n    desiredPermissionsSet: RequestedSnapPermissions,\n  ): {\n    newPermissions: RequestedSnapPermissions;\n    unusedPermissions: SubjectPermissions<\n      ValidPermission<string, Caveat<string, any>>\n    >;\n    approvedPermissions: SubjectPermissions<\n      ValidPermission<string, Caveat<string, any>>\n    >;\n  } {\n    const oldPermissions =\n      this.messagingSystem.call(\n        'PermissionController:getPermissions',\n        snapId,\n      ) ?? {};\n\n    const newPermissions = setDiff(desiredPermissionsSet, oldPermissions);\n    // TODO(ritave): The assumption that these are unused only holds so long as we do not\n    //               permit dynamic permission requests.\n    const unusedPermissions = setDiff(oldPermissions, desiredPermissionsSet);\n\n    // It's a Set Intersection of oldPermissions and desiredPermissionsSet\n    // oldPermissions ∖ (oldPermissions ∖ desiredPermissionsSet) ⟺ oldPermissions ∩ desiredPermissionsSet\n    const approvedPermissions = setDiff(oldPermissions, unusedPermissions);\n\n    return { newPermissions, unusedPermissions, approvedPermissions };\n  }\n\n  /**\n   * Checks if a snap will pass version validation checks\n   * with the new version range that is requested. The first\n   * check that is done is to check if the existing snap version\n   * falls inside the requested range. If it does, we want to return\n   * false because we do not care to create a rollback snapshot in\n   * that scenario. The second check is to ensure that the current\n   * snap version is not greater than all possible versions in\n   * the requested version range. If it is, then we also want\n   * to return false in that scenario.\n   *\n   * @param snapId - The snap id.\n   * @param newVersionRange - The new version range being requsted.\n   * @returns `true` if validation checks pass and `false` if they do not.\n   */\n  #isValidUpdate(\n    snapId: ValidatedSnapId,\n    newVersionRange: SemVerRange,\n  ): boolean {\n    const existingSnap = this.getExpect(snapId);\n\n    if (satisfiesVersionRange(existingSnap.version, newVersionRange)) {\n      return false;\n    }\n\n    if (gtRange(existingSnap.version, newVersionRange)) {\n      return false;\n    }\n\n    return true;\n  }\n}\n"],"names":["BaseControllerV2","BaseController","SubjectType","WALLET_SNAP_PERMISSION_KEY","assertIsSnapManifest","DEFAULT_ENDOWMENTS","DEFAULT_REQUESTED_SNAP_VERSION","normalizeRelative","resolveVersionRange","SnapCaveatType","SnapStatus","SnapStatusEvents","assertIsValidSnapId","logError","logWarning","validateFetchedSnap","assert","assertIsJsonRpcRequest","Duration","gtRange","gtVersion","hasProperty","inMilliseconds","isNonEmptyArray","isValidSemVerRange","satisfiesVersionRange","timeSince","createMachine","interpret","ethErrors","nanoid","forceStrict","validateMachine","log","hasTimedOut","setDiff","withTimeout","handlerEndowments","SnapEndowments","getRpcCaveatOrigins","detectSnapLocation","processSnapPermissions","SnapsRegistryStatus","RequestQueue","Timer","controllerName","SNAP_APPROVAL_INSTALL","SNAP_APPROVAL_UPDATE","SNAP_APPROVAL_RESULT","TRUNCATED_SNAP_PROPERTIES","Set","defaultState","snapErrors","snaps","snapStates","truncateSnap","snap","truncatedSnap","Object","keys","reduce","serialized","key","has","name","SnapController","updateBlockedSnaps","blockedSnaps","messagingSystem","call","values","state","blockListArg","id","version","checksum","manifest","source","shasum","Promise","all","entries","map","snapId","status","reason","Blocked","blockSnap","unblockSnap","_onUnhandledSnapError","error","stopSnap","Crash","then","addSnapError","catch","stopSnapError","_onOutboundRequest","runtime","getRuntimeExpect","pendingInboundRequests","filter","pendingRequest","timer","forEach","pause","pendingOutboundRequests","_onOutboundResponse","resume","startSnap","enabled","Error","sourceCode","enableSnap","getExpect","blocked","update","disableSnap","isRunning","Stop","resolve","statusEvent","getRuntime","lastRequest","closeAllConnections","terminateSnap","transition","Boolean","get","undefined","getTruncated","getTruncatedExpect","updateSnapState","newSnapState","clearSnapState","snapError","internalID","removeSnapError","clearSnapErrors","getSnapState","clearState","snapIds","revokeAllSnapPermissions","removeSnap","removeSnaps","Array","isArray","truncated","removeSnapFromSubjects","snapsRuntimeData","delete","publish","removeSnapFromSubject","origin","subjectPermissions","snapIdsCaveat","caveats","find","caveat","type","SnapIds","caveatHasSnap","value","newCaveatValue","length","revokeDynamicSnapPermissions","permissionNames","every","permissionName","dynamicPermissions","includes","incrementActiveReferences","activeReferences","decrementActiveReferences","getAllSnaps","getPermittedSnaps","permissions","permittedSnaps","Installing","installSnaps","requestedSnaps","result","pendingUpdates","pendingInstalls","rawVersion","rpc","invalidParams","location","versionRange","fetch","fetchFunction","allowLocal","featureFlags","allowLocalSnaps","isUpdate","shouldAlwaysReload","isValidUpdate","push","rollbackSnapshot","getRollbackSnapshot","prevSourceCode","createRollbackSnapshot","newVersion","processRequestedSnap","rollbackSnapshots","installed","snapshottedSnaps","snapsToRollback","rollbackSnaps","existingSnap","dappsCanUpdateSnaps","updateSnap","pendingApproval","createApproval","add","authorize","updateApproval","loading","message","toString","newVersionRange","newSnap","fetchSnap","assertIsInstallAllowed","processedPermissions","initialPermissions","validateSnapPermissions","newPermissions","unusedPermissions","approvedPermissions","calculatePermissionsChange","approvedNewPermissions","requestData","promise","Update","set","files","unusedPermissionsKeys","subject","revoked","granted","normalizedSourcePath","npm","filePath","file","path","getRegistryMetadata","snapsState","installPromise","destroy","timeoutForLastRequestStatus","clearTimeout","unsubscribe","handleRequest","handler","handlerType","request","rawRequest","jsonrpc","hasPermission","Rpc","isSnap","subjectType","Snap","rpcPermission","origins","dapps","getRpcRequestHandler","constructor","messenger","environmentEndowmentPermissions","excludedPermissions","idleTimeCheckInterval","Second","maxIdleTime","maxRequestTime","globalThis","bind","detectSnapLocationFunction","metadata","persist","anonymous","acc","cur","Stopped","memo","rest","Map","pollForLastRequestStatus","subscribe","initializeStateMachine","registerMessageHandlers","setupRuntime","disableGuard","statusConfig","initial","states","on","Start","target","Running","cond","Updating","Crashed","statusMachine","registerActionHandler","args","setTimeout","stopSnapsLastRequestPastMax","blockedSnapInfo","blockInformation","snapInfo","results","explanation","requireAllowlist","Verified","_snapId","event","interpreter","send","subjects","dappOrigin","requestState","fetchedSnap","snapData","executeWithTimeout","endowments","getEndowments","allEndowments","some","concat","dedupedEndowments","iconPath","normalizedIconPath","svgIcon","previousVersionHistory","versionHistory","date","Date","now","config","inversePatches","statePatches","permissionKeys","handlerPermissions","join","excludedPermissionErrors","errors","permission","existingHandler","rpcHandler","requestQueue","startPromises","localStartPromise","maxQueueSize","increment","decrement","recordSnapRpcRequestStart","handleRpcRequestPromise","recordSnapRpcRequestFinish","isLongRunning","LongRunning","requestId","newRollbackSnapshot","applyPatches","rollbackSnap","data","start","context","desiredPermissionsSet","oldPermissions"],"mappings":"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"}