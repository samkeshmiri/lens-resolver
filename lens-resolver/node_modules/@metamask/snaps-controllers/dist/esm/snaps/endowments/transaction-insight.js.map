{"version":3,"sources":["../../../../src/snaps/endowments/transaction-insight.ts"],"sourcesContent":["import type {\n  PermissionSpecificationBuilder,\n  EndowmentGetterParams,\n  ValidPermissionSpecification,\n  PermissionValidatorConstraint,\n  PermissionConstraint,\n  CaveatSpecificationConstraint,\n  Caveat,\n} from '@metamask/permission-controller';\nimport { PermissionType, SubjectType } from '@metamask/permission-controller';\nimport { SnapCaveatType } from '@metamask/snaps-utils';\nimport type { Json, NonEmptyArray } from '@metamask/utils';\nimport { assert, hasProperty, isObject, isPlainObject } from '@metamask/utils';\nimport { ethErrors } from 'eth-rpc-errors';\n\nimport { SnapEndowments } from './enum';\n\nconst permissionName = SnapEndowments.TransactionInsight;\n\ntype TransactionInsightEndowmentSpecification = ValidPermissionSpecification<{\n  permissionType: PermissionType.Endowment;\n  targetName: typeof permissionName;\n  endowmentGetter: (_options?: EndowmentGetterParams) => undefined;\n  allowedCaveats: Readonly<NonEmptyArray<string>> | null;\n  validator: PermissionValidatorConstraint;\n}>;\n\n/**\n * `endowment:transaction-insight` returns nothing; it is intended to be used as a flag\n * by the extension to detect whether the snap has the capability to show information on the transaction confirmation screen.\n *\n * @param _builderOptions - Optional specification builder options.\n * @returns The specification for the transaction-insight endowment.\n */\nconst specificationBuilder: PermissionSpecificationBuilder<\n  PermissionType.Endowment,\n  any,\n  TransactionInsightEndowmentSpecification\n> = (_builderOptions?: unknown) => {\n  return {\n    permissionType: PermissionType.Endowment,\n    targetName: permissionName,\n    allowedCaveats: [SnapCaveatType.TransactionOrigin],\n    endowmentGetter: (_getterOptions?: EndowmentGetterParams) => undefined,\n    validator: ({ caveats }) => {\n      if (\n        (caveats !== null && caveats?.length > 1) ||\n        (caveats?.length === 1 &&\n          caveats[0].type !== SnapCaveatType.TransactionOrigin)\n      ) {\n        throw ethErrors.rpc.invalidParams({\n          message: `Expected a single \"${SnapCaveatType.TransactionOrigin}\" caveat.`,\n        });\n      }\n    },\n    subjectTypes: [SubjectType.Snap],\n  };\n};\n\nexport const transactionInsightEndowmentBuilder = Object.freeze({\n  targetName: permissionName,\n  specificationBuilder,\n} as const);\n\n/**\n * Validates the type of the caveat value.\n *\n * @param caveat - The caveat to validate.\n * @throws If the caveat value is invalid.\n */\nfunction validateCaveat(caveat: Caveat<string, any>): void {\n  if (!hasProperty(caveat, 'value') || !isPlainObject(caveat)) {\n    throw ethErrors.rpc.invalidParams({\n      message: 'Expected a plain object.',\n    });\n  }\n\n  const { value } = caveat;\n\n  assert(\n    typeof value === 'boolean',\n    'Expected caveat value to have type \"boolean\"',\n  );\n}\n\n/**\n * Map a raw value from the `initialPermissions` to a caveat specification.\n * Note that this function does not do any validation, that's handled by the\n * PermissionsController when the permission is requested.\n *\n * @param value - The raw value from the `initialPermissions`.\n * @returns The caveat specification.\n */\nexport function getTransactionInsightCaveatMapper(\n  value: Json,\n): Pick<PermissionConstraint, 'caveats'> {\n  if (\n    !value ||\n    !isObject(value) ||\n    (isObject(value) && Object.keys(value).length === 0)\n  ) {\n    return { caveats: null };\n  }\n  return {\n    caveats: [\n      {\n        type: SnapCaveatType.TransactionOrigin,\n        value:\n          hasProperty(value, 'allowTransactionOrigin') &&\n          (value.allowTransactionOrigin as boolean),\n      },\n    ],\n  };\n}\n\n/**\n * Getter function to get the transaction origin caveat from a permission.\n *\n * This does basic validation of the caveat, but does not validate the type or\n * value of the namespaces object itself, as this is handled by the\n * `PermissionsController` when the permission is requested.\n *\n * @param permission - The permission to get the transaction origin caveat from.\n * @returns The transaction origin, or `null` if the permission does not have a\n * transaction origin caveat.\n */\nexport function getTransactionOriginCaveat(\n  permission?: PermissionConstraint,\n): boolean | null {\n  if (!permission?.caveats) {\n    return null;\n  }\n\n  assert(permission.caveats.length === 1);\n  assert(permission.caveats[0].type === SnapCaveatType.TransactionOrigin);\n\n  const caveat = permission.caveats[0] as Caveat<string, boolean>;\n\n  return caveat.value ?? null;\n}\n\nexport const transactionInsightCaveatSpecifications: Record<\n  SnapCaveatType.TransactionOrigin,\n  CaveatSpecificationConstraint\n> = {\n  [SnapCaveatType.TransactionOrigin]: Object.freeze({\n    type: SnapCaveatType.TransactionOrigin,\n    validator: (caveat: Caveat<string, any>) => validateCaveat(caveat),\n  }),\n};\n"],"names":["PermissionType","SubjectType","SnapCaveatType","assert","hasProperty","isObject","isPlainObject","ethErrors","SnapEndowments","permissionName","TransactionInsight","specificationBuilder","_builderOptions","permissionType","Endowment","targetName","allowedCaveats","TransactionOrigin","endowmentGetter","_getterOptions","undefined","validator","caveats","length","type","rpc","invalidParams","message","subjectTypes","Snap","transactionInsightEndowmentBuilder","Object","freeze","validateCaveat","caveat","value","getTransactionInsightCaveatMapper","keys","allowTransactionOrigin","getTransactionOriginCaveat","permission","transactionInsightCaveatSpecifications"],"mappings":"AASA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kCAAkC;AAC9E,SAASC,cAAc,QAAQ,wBAAwB;AAEvD,SAASC,MAAM,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,aAAa,QAAQ,kBAAkB;AAC/E,SAASC,SAAS,QAAQ,iBAAiB;AAE3C,SAASC,cAAc,QAAQ,SAAS;AAExC,MAAMC,iBAAiBD,eAAeE,kBAAkB;AAUxD;;;;;;CAMC,GACD,MAAMC,uBAIF,CAACC;IACH,OAAO;QACLC,gBAAgBb,eAAec,SAAS;QACxCC,YAAYN;QACZO,gBAAgB;YAACd,eAAee,iBAAiB;SAAC;QAClDC,iBAAiB,CAACC,iBAA2CC;QAC7DC,WAAW,CAAC,EAAEC,OAAO,EAAE;YACrB,IACE,AAACA,YAAY,QAAQA,SAASC,SAAS,KACtCD,SAASC,WAAW,KACnBD,OAAO,CAAC,EAAE,CAACE,IAAI,KAAKtB,eAAee,iBAAiB,EACtD;gBACA,MAAMV,UAAUkB,GAAG,CAACC,aAAa,CAAC;oBAChCC,SAAS,CAAC,mBAAmB,EAAEzB,eAAee,iBAAiB,CAAC,SAAS,CAAC;gBAC5E;YACF;QACF;QACAW,cAAc;YAAC3B,YAAY4B,IAAI;SAAC;IAClC;AACF;AAEA,OAAO,MAAMC,qCAAqCC,OAAOC,MAAM,CAAC;IAC9DjB,YAAYN;IACZE;AACF,GAAY;AAEZ;;;;;CAKC,GACD,SAASsB,eAAeC,MAA2B;IACjD,IAAI,CAAC9B,YAAY8B,QAAQ,YAAY,CAAC5B,cAAc4B,SAAS;QAC3D,MAAM3B,UAAUkB,GAAG,CAACC,aAAa,CAAC;YAChCC,SAAS;QACX;IACF;IAEA,MAAM,EAAEQ,KAAK,EAAE,GAAGD;IAElB/B,OACE,OAAOgC,UAAU,WACjB;AAEJ;AAEA;;;;;;;CAOC,GACD,OAAO,SAASC,kCACdD,KAAW;IAEX,IACE,CAACA,SACD,CAAC9B,SAAS8B,UACT9B,SAAS8B,UAAUJ,OAAOM,IAAI,CAACF,OAAOZ,MAAM,KAAK,GAClD;QACA,OAAO;YAAED,SAAS;QAAK;IACzB;IACA,OAAO;QACLA,SAAS;YACP;gBACEE,MAAMtB,eAAee,iBAAiB;gBACtCkB,OACE/B,YAAY+B,OAAO,6BAClBA,MAAMG,sBAAsB;YACjC;SACD;IACH;AACF;AAEA;;;;;;;;;;CAUC,GACD,OAAO,SAASC,2BACdC,UAAiC;IAEjC,IAAI,CAACA,YAAYlB,SAAS;QACxB,OAAO;IACT;IAEAnB,OAAOqC,WAAWlB,OAAO,CAACC,MAAM,KAAK;IACrCpB,OAAOqC,WAAWlB,OAAO,CAAC,EAAE,CAACE,IAAI,KAAKtB,eAAee,iBAAiB;IAEtE,MAAMiB,SAASM,WAAWlB,OAAO,CAAC,EAAE;IAEpC,OAAOY,OAAOC,KAAK,IAAI;AACzB;AAEA,OAAO,MAAMM,yCAGT;IACF,CAACvC,eAAee,iBAAiB,CAAC,EAAEc,OAAOC,MAAM,CAAC;QAChDR,MAAMtB,eAAee,iBAAiB;QACtCI,WAAW,CAACa,SAAgCD,eAAeC;IAC7D;AACF,EAAE"}