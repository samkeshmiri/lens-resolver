{"version":3,"sources":["../../src/fsm.ts"],"sourcesContent":["import { assert } from '@metamask/utils';\nimport type { EventObject, StateMachine, Typestate } from '@xstate/fsm';\nimport { InterpreterStatus } from '@xstate/fsm';\n\n/**\n * Validates the set-up of a @xstate/fsm machine.\n *\n * 1. Ensures that all named actions in the config have a provided implementation.\n *\n * @param machine - The machine to validate.\n * @throws {@link AssertionError}. If the validation fails.\n */\nexport function validateMachine<\n  TContext extends object,\n  TEvent extends EventObject,\n  TState extends Typestate<TContext>,\n>(machine: StateMachine.Machine<TContext, TEvent, TState>) {\n  assert('_options' in machine, 'The machine is not an @xstate/fsm machine');\n  const typed = machine as StateMachine.Machine<TContext, TEvent, TState> & {\n    _options: { actions?: StateMachine.ActionMap<TContext, TEvent> };\n  };\n\n  // 1.\n  const toArray = <Type>(obj: Type | Type[]): Type[] => {\n    if (Array.isArray(obj)) {\n      return obj;\n    } else if (obj === undefined || obj === null) {\n      return [];\n    }\n    return [obj];\n  };\n\n  const allActions = new Set<string>();\n  const addActions = (actions: any) =>\n    toArray(actions)\n      .flatMap((action) => {\n        if (typeof action === 'string') {\n          return [action];\n        }\n        assert(typeof action === 'function');\n        return [];\n      })\n      .forEach(allActions.add.bind(allActions));\n\n  for (const state of Object.values<typeof typed.config.states[string]>(\n    typed.config.states,\n  )) {\n    addActions(state.entry);\n    addActions(state.exit);\n    for (const transition of Object.values<any>(state.on ?? {})) {\n      addActions(transition.actions);\n    }\n  }\n\n  allActions.forEach((action) =>\n    assert(\n      typed._options.actions !== undefined && action in typed._options.actions,\n      `Action \"${action}\" doesn't have an implementation`,\n    ),\n  );\n}\n\n/**\n * Ensure that the interpreter is strict.\n * Strict means that the transition must occur.\n * The event must exist in .on {} state config and it's guard must succeed.\n *\n * The error will be thrown when an invalid `interpreter.send()` is called\n * and will be bubbled there.\n *\n * TODO(ritave): Doesn't support self transitions.\n *\n * @param interpreter - The interpreter that will be force into strict mode.\n * @throws {@link Error} Thrown when the transition is invalid.\n */\nexport function forceStrict(interpreter: StateMachine.Service<any, any, any>) {\n  // As soon as a listener subscribes, it is called. It might be called in\n  // an initial state which doesn't have the .changed property\n  let onInitialCalled = false;\n  interpreter.subscribe((state) => {\n    assert(!onInitialCalled || state.changed, 'Invalid state transition');\n    onInitialCalled = true;\n  });\n\n  const ogSend = interpreter.send.bind(interpreter);\n  interpreter.send = (...args) => {\n    assert(\n      interpreter.status === InterpreterStatus.Running,\n      'Interpreter is stopped',\n    );\n    return ogSend(...args);\n  };\n}\n"],"names":["assert","InterpreterStatus","validateMachine","machine","typed","toArray","obj","Array","isArray","undefined","allActions","Set","addActions","actions","flatMap","action","forEach","add","bind","state","Object","values","config","states","entry","exit","transition","on","_options","forceStrict","interpreter","onInitialCalled","subscribe","changed","ogSend","send","args","status","Running"],"mappings":"AAAA,SAASA,MAAM,QAAQ,kBAAkB;AAEzC,SAASC,iBAAiB,QAAQ,cAAc;AAEhD;;;;;;;CAOC,GACD,OAAO,SAASC,gBAIdC,OAAuD;IACvDH,OAAO,cAAcG,SAAS;IAC9B,MAAMC,QAAQD;IAId,KAAK;IACL,MAAME,UAAU,CAAOC;QACrB,IAAIC,MAAMC,OAAO,CAACF,MAAM;YACtB,OAAOA;QACT,OAAO,IAAIA,QAAQG,aAAaH,QAAQ,MAAM;YAC5C,OAAO,EAAE;QACX;QACA,OAAO;YAACA;SAAI;IACd;IAEA,MAAMI,aAAa,IAAIC;IACvB,MAAMC,aAAa,CAACC,UAClBR,QAAQQ,SACLC,OAAO,CAAC,CAACC;YACR,IAAI,OAAOA,WAAW,UAAU;gBAC9B,OAAO;oBAACA;iBAAO;YACjB;YACAf,OAAO,OAAOe,WAAW;YACzB,OAAO,EAAE;QACX,GACCC,OAAO,CAACN,WAAWO,GAAG,CAACC,IAAI,CAACR;IAEjC,KAAK,MAAMS,SAASC,OAAOC,MAAM,CAC/BjB,MAAMkB,MAAM,CAACC,MAAM,EAClB;QACDX,WAAWO,MAAMK,KAAK;QACtBZ,WAAWO,MAAMM,IAAI;QACrB,KAAK,MAAMC,cAAcN,OAAOC,MAAM,CAAMF,MAAMQ,EAAE,IAAI,CAAC,GAAI;YAC3Df,WAAWc,WAAWb,OAAO;QAC/B;IACF;IAEAH,WAAWM,OAAO,CAAC,CAACD,SAClBf,OACEI,MAAMwB,QAAQ,CAACf,OAAO,KAAKJ,aAAaM,UAAUX,MAAMwB,QAAQ,CAACf,OAAO,EACxE,CAAC,QAAQ,EAAEE,OAAO,gCAAgC,CAAC;AAGzD;AAEA;;;;;;;;;;;;CAYC,GACD,OAAO,SAASc,YAAYC,WAAgD;IAC1E,wEAAwE;IACxE,4DAA4D;IAC5D,IAAIC,kBAAkB;IACtBD,YAAYE,SAAS,CAAC,CAACb;QACrBnB,OAAO,CAAC+B,mBAAmBZ,MAAMc,OAAO,EAAE;QAC1CF,kBAAkB;IACpB;IAEA,MAAMG,SAASJ,YAAYK,IAAI,CAACjB,IAAI,CAACY;IACrCA,YAAYK,IAAI,GAAG,CAAC,GAAGC;QACrBpC,OACE8B,YAAYO,MAAM,KAAKpC,kBAAkBqC,OAAO,EAChD;QAEF,OAAOJ,UAAUE;IACnB;AACF"}