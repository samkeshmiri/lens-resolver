"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    NodeType: function() {
        return NodeType;
    },
    CopyableStruct: function() {
        return CopyableStruct;
    },
    DividerStruct: function() {
        return DividerStruct;
    },
    HeadingStruct: function() {
        return HeadingStruct;
    },
    PanelStruct: function() {
        return PanelStruct;
    },
    SpinnerStruct: function() {
        return SpinnerStruct;
    },
    TextStruct: function() {
        return TextStruct;
    },
    ComponentStruct: function() {
        return ComponentStruct;
    }
});
const _superstruct = require("superstruct");
const NodeStruct = (0, _superstruct.object)({
    type: (0, _superstruct.string)()
});
const ParentStruct = (0, _superstruct.assign)(NodeStruct, (0, _superstruct.object)({
    // This node references itself indirectly, so we need to use `lazy()`.
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    children: (0, _superstruct.array)((0, _superstruct.lazy)(()=>ComponentStruct))
}));
const LiteralStruct = (0, _superstruct.assign)(NodeStruct, (0, _superstruct.object)({
    value: (0, _superstruct.unknown)()
}));
var NodeType;
(function(NodeType) {
    NodeType["Copyable"] = 'copyable';
    NodeType["Divider"] = 'divider';
    NodeType["Heading"] = 'heading';
    NodeType["Panel"] = 'panel';
    NodeType["Spinner"] = 'spinner';
    NodeType["Text"] = 'text';
})(NodeType || (NodeType = {}));
const CopyableStruct = (0, _superstruct.assign)(LiteralStruct, (0, _superstruct.object)({
    type: (0, _superstruct.literal)(NodeType.Copyable),
    value: (0, _superstruct.string)()
}));
const DividerStruct = (0, _superstruct.assign)(NodeStruct, (0, _superstruct.object)({
    type: (0, _superstruct.literal)(NodeType.Divider)
}));
const HeadingStruct = (0, _superstruct.assign)(LiteralStruct, (0, _superstruct.object)({
    type: (0, _superstruct.literal)(NodeType.Heading),
    value: (0, _superstruct.string)()
}));
const PanelStruct = (0, _superstruct.assign)(ParentStruct, (0, _superstruct.object)({
    type: (0, _superstruct.literal)(NodeType.Panel)
}));
const SpinnerStruct = (0, _superstruct.assign)(NodeStruct, (0, _superstruct.object)({
    type: (0, _superstruct.literal)(NodeType.Spinner)
}));
const TextStruct = (0, _superstruct.assign)(LiteralStruct, (0, _superstruct.object)({
    type: (0, _superstruct.literal)(NodeType.Text),
    value: (0, _superstruct.string)(),
    markdown: (0, _superstruct.optional)((0, _superstruct.boolean)())
}));
const ComponentStruct = (0, _superstruct.union)([
    CopyableStruct,
    DividerStruct,
    HeadingStruct,
    PanelStruct,
    SpinnerStruct,
    TextStruct
]);

//# sourceMappingURL=nodes.js.map