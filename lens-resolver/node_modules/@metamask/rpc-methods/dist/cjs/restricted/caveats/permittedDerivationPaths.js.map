{"version":3,"sources":["../../../../src/restricted/caveats/permittedDerivationPaths.ts"],"sourcesContent":["import type {\n  Caveat,\n  PermissionConstraint,\n  RestrictedMethodCaveatSpecificationConstraint,\n} from '@metamask/permission-controller';\nimport type { Bip32Entropy } from '@metamask/snaps-utils';\nimport {\n  SnapCaveatType,\n  Bip32EntropyStruct,\n  isEqual,\n} from '@metamask/snaps-utils';\nimport type { Json } from '@metamask/utils';\nimport { assertStruct } from '@metamask/utils';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { array, size, type } from 'superstruct';\n\n/**\n * Map a raw value from the `initialPermissions` to a caveat specification.\n * Note that this function does not do any validation, that's handled by the\n * PermissionsController when the permission is requested.\n *\n * @param value - The raw value from the `initialPermissions`.\n * @returns The caveat specification.\n */\nexport function permittedDerivationPathsCaveatMapper(\n  value: Json,\n): Pick<PermissionConstraint, 'caveats'> {\n  return {\n    caveats: [\n      {\n        type: SnapCaveatType.PermittedDerivationPaths,\n        value,\n      },\n    ],\n  };\n}\n\n/**\n * Validate a caveat path object. The object must consist of a `path` array and\n * a `curve` string. Paths must start with `m`, and must contain at\n * least two indices. If `ed25519` is used, this checks if all the path indices\n * are hardened.\n *\n * @param value - The value to validate.\n * @throws If the value is invalid.\n */\nexport function validateBIP32Path(\n  value: unknown,\n): asserts value is Bip32Entropy {\n  assertStruct(\n    value,\n    Bip32EntropyStruct,\n    'Invalid BIP-32 entropy path definition',\n    ethErrors.rpc.invalidParams,\n  );\n}\n\n/**\n * Validate the path values associated with a caveat. This validates that the\n * value is a non-empty array with valid derivation paths and curves.\n *\n * @param caveat - The caveat to validate.\n * @throws If the value is invalid.\n */\nexport function validateBIP32CaveatPaths(\n  caveat: Caveat<string, any>,\n): asserts caveat is Caveat<string, Bip32Entropy[]> {\n  assertStruct(\n    caveat,\n    type({ value: size(array(Bip32EntropyStruct), 1, Infinity) }),\n    'Invalid BIP-32 entropy caveat',\n    ethErrors.rpc.internal,\n  );\n}\n\nexport const PermittedDerivationPathsCaveatSpecification: Record<\n  SnapCaveatType.PermittedDerivationPaths,\n  RestrictedMethodCaveatSpecificationConstraint\n> = {\n  [SnapCaveatType.PermittedDerivationPaths]: Object.freeze({\n    type: SnapCaveatType.PermittedDerivationPaths,\n    decorator: (\n      method,\n      caveat: Caveat<SnapCaveatType.PermittedDerivationPaths, Bip32Entropy[]>,\n    ) => {\n      return async (args) => {\n        const { params } = args;\n        validateBIP32Path(params);\n\n        const path = caveat.value.find(\n          (caveatPath) =>\n            isEqual(\n              params.path.slice(0, caveatPath.path.length),\n              caveatPath.path,\n            ) && caveatPath.curve === params.curve,\n        );\n\n        if (!path) {\n          throw ethErrors.provider.unauthorized({\n            message:\n              'The requested path is not permitted. Allowed paths must be specified in the snap manifest.',\n          });\n        }\n\n        return await method(args);\n      };\n    },\n    validator: (caveat) => validateBIP32CaveatPaths(caveat),\n  }),\n};\n"],"names":["permittedDerivationPathsCaveatMapper","validateBIP32Path","validateBIP32CaveatPaths","PermittedDerivationPathsCaveatSpecification","value","caveats","type","SnapCaveatType","PermittedDerivationPaths","assertStruct","Bip32EntropyStruct","ethErrors","rpc","invalidParams","caveat","size","array","Infinity","internal","Object","freeze","decorator","method","args","params","path","find","caveatPath","isEqual","slice","length","curve","provider","unauthorized","message","validator"],"mappings":";;;;;;;;;;;IAwBgBA,oCAAoC;eAApCA;;IAsBAC,iBAAiB;eAAjBA;;IAkBAC,wBAAwB;eAAxBA;;IAWHC,2CAA2C;eAA3CA;;;4BAjEN;uBAEsB;8BACH;6BACQ;AAU3B,SAASH,qCACdI,KAAW;IAEX,OAAO;QACLC,SAAS;YACP;gBACEC,MAAMC,0BAAc,CAACC,wBAAwB;gBAC7CJ;YACF;SACD;IACH;AACF;AAWO,SAASH,kBACdG,KAAc;IAEdK,IAAAA,mBAAY,EACVL,OACAM,8BAAkB,EAClB,0CACAC,uBAAS,CAACC,GAAG,CAACC,aAAa;AAE/B;AASO,SAASX,yBACdY,MAA2B;IAE3BL,IAAAA,mBAAY,EACVK,QACAR,IAAAA,iBAAI,EAAC;QAAEF,OAAOW,IAAAA,iBAAI,EAACC,IAAAA,kBAAK,EAACN,8BAAkB,GAAG,GAAGO;IAAU,IAC3D,iCACAN,uBAAS,CAACC,GAAG,CAACM,QAAQ;AAE1B;AAEO,MAAMf,8CAGT;IACF,CAACI,0BAAc,CAACC,wBAAwB,CAAC,EAAEW,OAAOC,MAAM,CAAC;QACvDd,MAAMC,0BAAc,CAACC,wBAAwB;QAC7Ca,WAAW,CACTC,QACAR;YAEA,OAAO,OAAOS;gBACZ,MAAM,EAAEC,MAAM,EAAE,GAAGD;gBACnBtB,kBAAkBuB;gBAElB,MAAMC,OAAOX,OAAOV,KAAK,CAACsB,IAAI,CAC5B,CAACC,aACCC,IAAAA,mBAAO,EACLJ,OAAOC,IAAI,CAACI,KAAK,CAAC,GAAGF,WAAWF,IAAI,CAACK,MAAM,GAC3CH,WAAWF,IAAI,KACZE,WAAWI,KAAK,KAAKP,OAAOO,KAAK;gBAG1C,IAAI,CAACN,MAAM;oBACT,MAAMd,uBAAS,CAACqB,QAAQ,CAACC,YAAY,CAAC;wBACpCC,SACE;oBACJ;gBACF;gBAEA,OAAO,MAAMZ,OAAOC;YACtB;QACF;QACAY,WAAW,CAACrB,SAAWZ,yBAAyBY;IAClD;AACF"}