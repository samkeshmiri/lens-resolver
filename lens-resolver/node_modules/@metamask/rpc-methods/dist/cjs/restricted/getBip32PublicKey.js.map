{"version":3,"sources":["../../../src/restricted/getBip32PublicKey.ts"],"sourcesContent":["import type { BIP32Node } from '@metamask/key-tree';\nimport { SLIP10Node } from '@metamask/key-tree';\nimport type {\n  PermissionSpecificationBuilder,\n  PermissionValidatorConstraint,\n  RestrictedMethodOptions,\n  ValidPermissionSpecification,\n} from '@metamask/permission-controller';\nimport { PermissionType, SubjectType } from '@metamask/permission-controller';\nimport {\n  bip32entropy,\n  Bip32PathStruct,\n  SnapCaveatType,\n} from '@metamask/snaps-utils';\nimport type { NonEmptyArray } from '@metamask/utils';\nimport { assertStruct } from '@metamask/utils';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { boolean, enums, object, optional } from 'superstruct';\n\nimport type { MethodHooksObject } from '../utils';\n\nconst targetName = 'snap_getBip32PublicKey';\n\nexport type GetBip32PublicKeyMethodHooks = {\n  /**\n   * @returns The mnemonic of the user's primary keyring.\n   */\n  getMnemonic: () => Promise<Uint8Array>;\n\n  /**\n   * Waits for the extension to be unlocked.\n   *\n   * @returns A promise that resolves once the extension is unlocked.\n   */\n  getUnlockPromise: (shouldShowUnlockRequest: boolean) => Promise<void>;\n};\n\ntype GetBip32PublicKeySpecificationBuilderOptions = {\n  methodHooks: GetBip32PublicKeyMethodHooks;\n};\n\ntype GetBip32PublicKeySpecification = ValidPermissionSpecification<{\n  permissionType: PermissionType.RestrictedMethod;\n  targetName: typeof targetName;\n  methodImplementation: ReturnType<typeof getBip32PublicKeyImplementation>;\n  allowedCaveats: Readonly<NonEmptyArray<string>> | null;\n  validator: PermissionValidatorConstraint;\n}>;\n\ntype GetBip32PublicKeyParameters = {\n  path: ['m', ...(`${number}` | `${number}'`)[]];\n  curve: 'secp256k1' | 'ed25519';\n  compressed?: boolean;\n};\n\nexport const Bip32PublicKeyArgsStruct = bip32entropy(\n  object({\n    path: Bip32PathStruct,\n    curve: enums(['ed225519', 'secp256k1']),\n    compressed: optional(boolean()),\n  }),\n);\n\n/**\n * The specification builder for the `snap_getBip32PublicKey` permission.\n * `snap_getBip32PublicKey` lets the Snap retrieve public keys for a particular\n * BIP-32 node.\n *\n * @param options - The specification builder options.\n * @param options.methodHooks - The RPC method hooks needed by the method implementation.\n * @returns The specification for the `snap_getBip32PublicKey` permission.\n */\nconst specificationBuilder: PermissionSpecificationBuilder<\n  PermissionType.RestrictedMethod,\n  GetBip32PublicKeySpecificationBuilderOptions,\n  GetBip32PublicKeySpecification\n> = ({ methodHooks }: GetBip32PublicKeySpecificationBuilderOptions) => {\n  return {\n    permissionType: PermissionType.RestrictedMethod,\n    targetName,\n    allowedCaveats: [SnapCaveatType.PermittedDerivationPaths],\n    methodImplementation: getBip32PublicKeyImplementation(methodHooks),\n    validator: ({ caveats }) => {\n      if (\n        caveats?.length !== 1 ||\n        caveats[0].type !== SnapCaveatType.PermittedDerivationPaths\n      ) {\n        throw ethErrors.rpc.invalidParams({\n          message: `Expected a single \"${SnapCaveatType.PermittedDerivationPaths}\" caveat.`,\n        });\n      }\n    },\n    subjectTypes: [SubjectType.Snap],\n  };\n};\n\nconst methodHooks: MethodHooksObject<GetBip32PublicKeyMethodHooks> = {\n  getMnemonic: true,\n  getUnlockPromise: true,\n};\n\nexport const getBip32PublicKeyBuilder = Object.freeze({\n  targetName,\n  specificationBuilder,\n  methodHooks,\n} as const);\n\n/**\n * Builds the method implementation for `snap_getBip32PublicKey`.\n *\n * @param hooks - The RPC method hooks.\n * @param hooks.getMnemonic - A function to retrieve the Secret Recovery Phrase of the user.\n * @param hooks.getUnlockPromise - A function that resolves once the MetaMask extension is unlocked\n * and prompts the user to unlock their MetaMask if it is locked.\n * @returns The method implementation which returns a public key.\n * @throws If the params are invalid.\n */\nexport function getBip32PublicKeyImplementation({\n  getMnemonic,\n  getUnlockPromise,\n}: GetBip32PublicKeyMethodHooks) {\n  return async function getBip32PublicKey(\n    args: RestrictedMethodOptions<GetBip32PublicKeyParameters>,\n  ): Promise<string> {\n    await getUnlockPromise(true);\n\n    assertStruct(\n      args.params,\n      Bip32PublicKeyArgsStruct,\n      'Invalid BIP-32 public key params',\n      ethErrors.rpc.invalidParams,\n    );\n\n    const { params } = args;\n\n    const node = await SLIP10Node.fromDerivationPath({\n      curve: params.curve,\n      derivationPath: [\n        await getMnemonic(),\n        ...params.path\n          .slice(1)\n          .map<BIP32Node>((index) => `bip32:${index}` as BIP32Node),\n      ],\n    });\n\n    if (params.compressed) {\n      return node.compressedPublicKey;\n    }\n\n    return node.publicKey;\n  };\n}\n"],"names":["Bip32PublicKeyArgsStruct","getBip32PublicKeyBuilder","getBip32PublicKeyImplementation","targetName","bip32entropy","object","path","Bip32PathStruct","curve","enums","compressed","optional","boolean","specificationBuilder","methodHooks","permissionType","PermissionType","RestrictedMethod","allowedCaveats","SnapCaveatType","PermittedDerivationPaths","methodImplementation","validator","caveats","length","type","ethErrors","rpc","invalidParams","message","subjectTypes","SubjectType","Snap","getMnemonic","getUnlockPromise","Object","freeze","getBip32PublicKey","args","assertStruct","params","node","SLIP10Node","fromDerivationPath","derivationPath","slice","map","index","compressedPublicKey","publicKey"],"mappings":";;;;;;;;;;;IAuDaA,wBAAwB;eAAxBA;;IA8CAC,wBAAwB;eAAxBA;;IAgBGC,+BAA+B;eAA/BA;;;yBApHW;sCAOiB;4BAKrC;uBAEsB;8BACH;6BACuB;AAIjD,MAAMC,aAAa;AAkCZ,MAAMH,2BAA2BI,IAAAA,wBAAY,EAClDC,IAAAA,mBAAM,EAAC;IACLC,MAAMC,2BAAe;IACrBC,OAAOC,IAAAA,kBAAK,EAAC;QAAC;QAAY;KAAY;IACtCC,YAAYC,IAAAA,qBAAQ,EAACC,IAAAA,oBAAO;AAC9B;AAGF;;;;;;;;CAQC,GACD,MAAMC,uBAIF,CAAC,EAAEC,WAAW,EAAgD;IAChE,OAAO;QACLC,gBAAgBC,oCAAc,CAACC,gBAAgB;QAC/Cd;QACAe,gBAAgB;YAACC,0BAAc,CAACC,wBAAwB;SAAC;QACzDC,sBAAsBnB,gCAAgCY;QACtDQ,WAAW,CAAC,EAAEC,OAAO,EAAE;YACrB,IACEA,SAASC,WAAW,KACpBD,OAAO,CAAC,EAAE,CAACE,IAAI,KAAKN,0BAAc,CAACC,wBAAwB,EAC3D;gBACA,MAAMM,uBAAS,CAACC,GAAG,CAACC,aAAa,CAAC;oBAChCC,SAAS,CAAC,mBAAmB,EAAEV,0BAAc,CAACC,wBAAwB,CAAC,SAAS,CAAC;gBACnF;YACF;QACF;QACAU,cAAc;YAACC,iCAAW,CAACC,IAAI;SAAC;IAClC;AACF;AAEA,MAAMlB,cAA+D;IACnEmB,aAAa;IACbC,kBAAkB;AACpB;AAEO,MAAMjC,2BAA2BkC,OAAOC,MAAM,CAAC;IACpDjC;IACAU;IACAC;AACF;AAYO,SAASZ,gCAAgC,EAC9C+B,WAAW,EACXC,gBAAgB,EACa;IAC7B,OAAO,eAAeG,kBACpBC,IAA0D;QAE1D,MAAMJ,iBAAiB;QAEvBK,IAAAA,mBAAY,EACVD,KAAKE,MAAM,EACXxC,0BACA,oCACA0B,uBAAS,CAACC,GAAG,CAACC,aAAa;QAG7B,MAAM,EAAEY,MAAM,EAAE,GAAGF;QAEnB,MAAMG,OAAO,MAAMC,mBAAU,CAACC,kBAAkB,CAAC;YAC/CnC,OAAOgC,OAAOhC,KAAK;YACnBoC,gBAAgB;gBACd,MAAMX;mBACHO,OAAOlC,IAAI,CACXuC,KAAK,CAAC,GACNC,GAAG,CAAY,CAACC,QAAU,CAAC,MAAM,EAAEA,MAAM,CAAC;aAC9C;QACH;QAEA,IAAIP,OAAO9B,UAAU,EAAE;YACrB,OAAO+B,KAAKO,mBAAmB;QACjC;QAEA,OAAOP,KAAKQ,SAAS;IACvB;AACF"}