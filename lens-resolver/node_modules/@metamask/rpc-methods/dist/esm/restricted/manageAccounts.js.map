{"version":3,"sources":["../../../src/restricted/manageAccounts.ts"],"sourcesContent":["import type {\n  RestrictedMethodOptions,\n  ValidPermissionSpecification,\n  PermissionSpecificationBuilder,\n} from '@metamask/permission-controller';\nimport { SubjectType, PermissionType } from '@metamask/permission-controller';\nimport type { Json, NonEmptyArray } from '@metamask/utils';\nimport { JsonStruct } from '@metamask/utils';\nimport type { Infer } from 'superstruct';\nimport {\n  assert,\n  string,\n  object,\n  optional,\n  union,\n  array,\n  record,\n} from 'superstruct';\n\nconst SnapMessageStruct = object({\n  method: string(),\n  params: optional(union([array(JsonStruct), record(string(), JsonStruct)])),\n});\n\ntype Message = Infer<typeof SnapMessageStruct>;\n\nexport const methodName = 'snap_manageAccounts';\n\nexport type ManageAccountsMethodHooks = {\n  /**\n   * Gets the snap keyring implementation.\n   */\n  getSnapKeyring: (snapOrigin: string) => Promise<{\n    handleKeyringSnapMessage: (\n      snapId: string,\n      message: Message,\n    ) => Promise<Json>;\n  }>;\n\n  /**\n   * Saves the snap keyring, should be called after mutable operations.\n   */\n  saveSnapKeyring: () => Promise<void>;\n};\n\ntype ManageAccountsSpecificationBuilderOptions = {\n  allowedCaveats?: Readonly<NonEmptyArray<string>> | null;\n  methodHooks: ManageAccountsMethodHooks;\n};\n\ntype ManageAccountsSpecification = ValidPermissionSpecification<{\n  permissionType: PermissionType.RestrictedMethod;\n  targetName: typeof methodName;\n  methodImplementation: ReturnType<typeof manageAccountsImplementation>;\n  allowedCaveats: Readonly<NonEmptyArray<string>> | null;\n}>;\n\n/**\n * The specification builder for the `snap_manageAccounts` permission.\n * `snap_manageAccounts` lets the Snap manage a set of accounts via a custom keyring.\n *\n * @param options - The specification builder options.\n * @param options.allowedCaveats - The optional allowed caveats for the permission.\n * @param options.methodHooks - The RPC method hooks needed by the method implementation.\n * @returns The specification for the `snap_manageAccounts` permission.\n */\nexport const specificationBuilder: PermissionSpecificationBuilder<\n  PermissionType.RestrictedMethod,\n  ManageAccountsSpecificationBuilderOptions,\n  ManageAccountsSpecification\n> = ({\n  allowedCaveats = null,\n  methodHooks,\n}: ManageAccountsSpecificationBuilderOptions) => {\n  return {\n    permissionType: PermissionType.RestrictedMethod,\n    targetName: methodName,\n    allowedCaveats,\n    methodImplementation: manageAccountsImplementation(methodHooks),\n    subjectTypes: [SubjectType.Snap],\n  };\n};\n\n/**\n * Builds the method implementation for `snap_manageAccounts`.\n *\n * @param hooks - The RPC method hooks.\n * @param hooks.getSnapKeyring - A function to get the snap keyring.\n * @param hooks.saveSnapKeyring - A function to save the snap keyring.\n * @returns The method implementation which either returns `null` for a\n * successful state update/deletion or returns the decrypted state.\n * @throws If the params are invalid.\n */\nexport function manageAccountsImplementation({\n  getSnapKeyring,\n  saveSnapKeyring,\n}: ManageAccountsMethodHooks) {\n  return async function manageAccounts(\n    options: RestrictedMethodOptions<Message>,\n  ): Promise<string[] | Json | boolean> {\n    const {\n      context: { origin },\n      params,\n    } = options;\n\n    assert(params, SnapMessageStruct);\n    const keyring = await getSnapKeyring(origin);\n    const result = await keyring.handleKeyringSnapMessage(origin, params);\n\n    const { method } = params;\n    if (['updateAccount', 'createAccount', 'deleteAccount'].includes(method)) {\n      await saveSnapKeyring();\n    }\n\n    return result;\n  };\n}\n\nexport const manageAccountsBuilder = Object.freeze({\n  targetName: methodName,\n  specificationBuilder,\n  methodHooks: {\n    getSnapKeyring: true,\n    saveSnapKeyring: true,\n  },\n} as const);\n"],"names":["SubjectType","PermissionType","JsonStruct","assert","string","object","optional","union","array","record","SnapMessageStruct","method","params","methodName","specificationBuilder","allowedCaveats","methodHooks","permissionType","RestrictedMethod","targetName","methodImplementation","manageAccountsImplementation","subjectTypes","Snap","getSnapKeyring","saveSnapKeyring","manageAccounts","options","context","origin","keyring","result","handleKeyringSnapMessage","includes","manageAccountsBuilder","Object","freeze"],"mappings":"AAKA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kCAAkC;AAE9E,SAASC,UAAU,QAAQ,kBAAkB;AAE7C,SACEC,MAAM,EACNC,MAAM,EACNC,MAAM,EACNC,QAAQ,EACRC,KAAK,EACLC,KAAK,EACLC,MAAM,QACD,cAAc;AAErB,MAAMC,oBAAoBL,OAAO;IAC/BM,QAAQP;IACRQ,QAAQN,SAASC,MAAM;QAACC,MAAMN;QAAaO,OAAOL,UAAUF;KAAY;AAC1E;AAIA,OAAO,MAAMW,aAAa,sBAAsB;AA+BhD;;;;;;;;CAQC,GACD,OAAO,MAAMC,uBAIT,CAAC,EACHC,iBAAiB,IAAI,EACrBC,WAAW,EAC+B;IAC1C,OAAO;QACLC,gBAAgBhB,eAAeiB,gBAAgB;QAC/CC,YAAYN;QACZE;QACAK,sBAAsBC,6BAA6BL;QACnDM,cAAc;YAACtB,YAAYuB,IAAI;SAAC;IAClC;AACF,EAAE;AAEF;;;;;;;;;CASC,GACD,OAAO,SAASF,6BAA6B,EAC3CG,cAAc,EACdC,eAAe,EACW;IAC1B,OAAO,eAAeC,eACpBC,OAAyC;QAEzC,MAAM,EACJC,SAAS,EAAEC,MAAM,EAAE,EACnBjB,MAAM,EACP,GAAGe;QAEJxB,OAAOS,QAAQF;QACf,MAAMoB,UAAU,MAAMN,eAAeK;QACrC,MAAME,SAAS,MAAMD,QAAQE,wBAAwB,CAACH,QAAQjB;QAE9D,MAAM,EAAED,MAAM,EAAE,GAAGC;QACnB,IAAI;YAAC;YAAiB;YAAiB;SAAgB,CAACqB,QAAQ,CAACtB,SAAS;YACxE,MAAMc;QACR;QAEA,OAAOM;IACT;AACF;AAEA,OAAO,MAAMG,wBAAwBC,OAAOC,MAAM,CAAC;IACjDjB,YAAYN;IACZC;IACAE,aAAa;QACXQ,gBAAgB;QAChBC,iBAAiB;IACnB;AACF,GAAY"}