{"version":3,"sources":["../../../../src/restricted/caveats/permittedDerivationPaths.ts"],"sourcesContent":["import type {\n  Caveat,\n  PermissionConstraint,\n  RestrictedMethodCaveatSpecificationConstraint,\n} from '@metamask/permission-controller';\nimport type { Bip32Entropy } from '@metamask/snaps-utils';\nimport {\n  SnapCaveatType,\n  Bip32EntropyStruct,\n  isEqual,\n} from '@metamask/snaps-utils';\nimport type { Json } from '@metamask/utils';\nimport { assertStruct } from '@metamask/utils';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { array, size, type } from 'superstruct';\n\n/**\n * Map a raw value from the `initialPermissions` to a caveat specification.\n * Note that this function does not do any validation, that's handled by the\n * PermissionsController when the permission is requested.\n *\n * @param value - The raw value from the `initialPermissions`.\n * @returns The caveat specification.\n */\nexport function permittedDerivationPathsCaveatMapper(\n  value: Json,\n): Pick<PermissionConstraint, 'caveats'> {\n  return {\n    caveats: [\n      {\n        type: SnapCaveatType.PermittedDerivationPaths,\n        value,\n      },\n    ],\n  };\n}\n\n/**\n * Validate a caveat path object. The object must consist of a `path` array and\n * a `curve` string. Paths must start with `m`, and must contain at\n * least two indices. If `ed25519` is used, this checks if all the path indices\n * are hardened.\n *\n * @param value - The value to validate.\n * @throws If the value is invalid.\n */\nexport function validateBIP32Path(\n  value: unknown,\n): asserts value is Bip32Entropy {\n  assertStruct(\n    value,\n    Bip32EntropyStruct,\n    'Invalid BIP-32 entropy path definition',\n    ethErrors.rpc.invalidParams,\n  );\n}\n\n/**\n * Validate the path values associated with a caveat. This validates that the\n * value is a non-empty array with valid derivation paths and curves.\n *\n * @param caveat - The caveat to validate.\n * @throws If the value is invalid.\n */\nexport function validateBIP32CaveatPaths(\n  caveat: Caveat<string, any>,\n): asserts caveat is Caveat<string, Bip32Entropy[]> {\n  assertStruct(\n    caveat,\n    type({ value: size(array(Bip32EntropyStruct), 1, Infinity) }),\n    'Invalid BIP-32 entropy caveat',\n    ethErrors.rpc.internal,\n  );\n}\n\nexport const PermittedDerivationPathsCaveatSpecification: Record<\n  SnapCaveatType.PermittedDerivationPaths,\n  RestrictedMethodCaveatSpecificationConstraint\n> = {\n  [SnapCaveatType.PermittedDerivationPaths]: Object.freeze({\n    type: SnapCaveatType.PermittedDerivationPaths,\n    decorator: (\n      method,\n      caveat: Caveat<SnapCaveatType.PermittedDerivationPaths, Bip32Entropy[]>,\n    ) => {\n      return async (args) => {\n        const { params } = args;\n        validateBIP32Path(params);\n\n        const path = caveat.value.find(\n          (caveatPath) =>\n            isEqual(\n              params.path.slice(0, caveatPath.path.length),\n              caveatPath.path,\n            ) && caveatPath.curve === params.curve,\n        );\n\n        if (!path) {\n          throw ethErrors.provider.unauthorized({\n            message:\n              'The requested path is not permitted. Allowed paths must be specified in the snap manifest.',\n          });\n        }\n\n        return await method(args);\n      };\n    },\n    validator: (caveat) => validateBIP32CaveatPaths(caveat),\n  }),\n};\n"],"names":["SnapCaveatType","Bip32EntropyStruct","isEqual","assertStruct","ethErrors","array","size","type","permittedDerivationPathsCaveatMapper","value","caveats","PermittedDerivationPaths","validateBIP32Path","rpc","invalidParams","validateBIP32CaveatPaths","caveat","Infinity","internal","PermittedDerivationPathsCaveatSpecification","Object","freeze","decorator","method","args","params","path","find","caveatPath","slice","length","curve","provider","unauthorized","message","validator"],"mappings":"AAMA,SACEA,cAAc,EACdC,kBAAkB,EAClBC,OAAO,QACF,wBAAwB;AAE/B,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,KAAK,EAAEC,IAAI,EAAEC,IAAI,QAAQ,cAAc;AAEhD;;;;;;;CAOC,GACD,OAAO,SAASC,qCACdC,KAAW;IAEX,OAAO;QACLC,SAAS;YACP;gBACEH,MAAMP,eAAeW,wBAAwB;gBAC7CF;YACF;SACD;IACH;AACF;AAEA;;;;;;;;CAQC,GACD,OAAO,SAASG,kBACdH,KAAc;IAEdN,aACEM,OACAR,oBACA,0CACAG,UAAUS,GAAG,CAACC,aAAa;AAE/B;AAEA;;;;;;CAMC,GACD,OAAO,SAASC,yBACdC,MAA2B;IAE3Bb,aACEa,QACAT,KAAK;QAAEE,OAAOH,KAAKD,MAAMJ,qBAAqB,GAAGgB;IAAU,IAC3D,iCACAb,UAAUS,GAAG,CAACK,QAAQ;AAE1B;AAEA,OAAO,MAAMC,8CAGT;IACF,CAACnB,eAAeW,wBAAwB,CAAC,EAAES,OAAOC,MAAM,CAAC;QACvDd,MAAMP,eAAeW,wBAAwB;QAC7CW,WAAW,CACTC,QACAP;YAEA,OAAO,OAAOQ;gBACZ,MAAM,EAAEC,MAAM,EAAE,GAAGD;gBACnBZ,kBAAkBa;gBAElB,MAAMC,OAAOV,OAAOP,KAAK,CAACkB,IAAI,CAC5B,CAACC,aACC1B,QACEuB,OAAOC,IAAI,CAACG,KAAK,CAAC,GAAGD,WAAWF,IAAI,CAACI,MAAM,GAC3CF,WAAWF,IAAI,KACZE,WAAWG,KAAK,KAAKN,OAAOM,KAAK;gBAG1C,IAAI,CAACL,MAAM;oBACT,MAAMtB,UAAU4B,QAAQ,CAACC,YAAY,CAAC;wBACpCC,SACE;oBACJ;gBACF;gBAEA,OAAO,MAAMX,OAAOC;YACtB;QACF;QACAW,WAAW,CAACnB,SAAWD,yBAAyBC;IAClD;AACF,EAAE"}