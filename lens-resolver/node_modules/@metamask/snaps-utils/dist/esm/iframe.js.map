{"version":3,"sources":["../../src/iframe.ts"],"sourcesContent":["/**\n * Creates the iframe to be used as the execution environment. This may run\n * forever if the iframe never loads, but the promise should be wrapped in\n * an initialization timeout in the SnapController.\n *\n * @param uri - The iframe URI.\n * @param id - The ID to assign to the iframe.\n * @param sandbox - Whether to enable the sandbox attribute.\n * @returns A promise that resolves to the contentWindow of the iframe.\n */\nexport async function createWindow(\n  uri: string,\n  id: string,\n  sandbox = true,\n): Promise<Window> {\n  return await new Promise((resolve, reject) => {\n    const iframe = document.createElement('iframe');\n    // The order of operations appears to matter for everything except this\n    // attribute. We may as well set it here.\n    iframe.setAttribute('id', id);\n    iframe.setAttribute('data-testid', 'snaps-iframe');\n\n    if (sandbox) {\n      // For the sandbox property to have any effect it needs to be set before the iframe is appended.\n      // We apply this property as a principle of least authority (POLA)\n      // measure.\n      // Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox\n      iframe.setAttribute('sandbox', 'allow-scripts');\n    }\n\n    // In the past, we've had problems that appear to be symptomatic of the\n    // iframe firing the `load` event before its scripts are actually loaded,\n    // which has prevented snaps from executing properly. Therefore, we set\n    // the `src` attribute and append the iframe to the DOM before attaching\n    // the `load` listener.\n    //\n    // `load` should only fire when \"all dependent resources\" have been\n    // loaded, which includes scripts.\n    //\n    // MDN article for `load` event: https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event\n    // Re: `load` firing twice: https://stackoverflow.com/questions/10781880/dynamically-created-iframe-triggers-onload-event-twice/15880489#15880489\n    iframe.setAttribute('src', uri);\n    document.body.appendChild(iframe);\n\n    iframe.addEventListener('load', () => {\n      if (iframe.contentWindow) {\n        resolve(iframe.contentWindow);\n      } else {\n        // We don't know of a case when this would happen, but better to fail\n        // fast if it does.\n        reject(\n          new Error(\n            `iframe.contentWindow not present on load for job \"${id}\".`,\n          ),\n        );\n      }\n    });\n  });\n}\n"],"names":["createWindow","uri","id","sandbox","Promise","resolve","reject","iframe","document","createElement","setAttribute","body","appendChild","addEventListener","contentWindow","Error"],"mappings":"AAAA;;;;;;;;;CASC,GACD,OAAO,eAAeA,aACpBC,GAAW,EACXC,EAAU,EACVC,UAAU,IAAI;IAEd,OAAO,MAAM,IAAIC,QAAQ,CAACC,SAASC;QACjC,MAAMC,SAASC,SAASC,aAAa,CAAC;QACtC,uEAAuE;QACvE,yCAAyC;QACzCF,OAAOG,YAAY,CAAC,MAAMR;QAC1BK,OAAOG,YAAY,CAAC,eAAe;QAEnC,IAAIP,SAAS;YACX,gGAAgG;YAChG,kEAAkE;YAClE,WAAW;YACX,qFAAqF;YACrFI,OAAOG,YAAY,CAAC,WAAW;QACjC;QAEA,uEAAuE;QACvE,yEAAyE;QACzE,uEAAuE;QACvE,wEAAwE;QACxE,uBAAuB;QACvB,EAAE;QACF,mEAAmE;QACnE,kCAAkC;QAClC,EAAE;QACF,mGAAmG;QACnG,iJAAiJ;QACjJH,OAAOG,YAAY,CAAC,OAAOT;QAC3BO,SAASG,IAAI,CAACC,WAAW,CAACL;QAE1BA,OAAOM,gBAAgB,CAAC,QAAQ;YAC9B,IAAIN,OAAOO,aAAa,EAAE;gBACxBT,QAAQE,OAAOO,aAAa;YAC9B,OAAO;gBACL,qEAAqE;gBACrE,mBAAmB;gBACnBR,OACE,IAAIS,MACF,CAAC,kDAAkD,EAAEb,GAAG,EAAE,CAAC;YAGjE;QACF;IACF;AACF"}