{"version":3,"sources":["../../src/mock.ts"],"sourcesContent":["import crypto from 'crypto';\nimport EventEmitter from 'events';\n\nimport { DEFAULT_ENDOWMENTS } from './default-endowments';\n\nconst NETWORK_APIS = ['fetch', 'Request', 'Headers', 'Response'];\n\nexport const ALL_APIS: string[] = [\n  ...DEFAULT_ENDOWMENTS,\n  ...NETWORK_APIS,\n  'WebAssembly',\n];\n\ntype MockSnapGlobal = {\n  request: () => Promise<any>;\n};\n\ntype MockEthereumProvider = EventEmitter & {\n  request: () => Promise<any>;\n};\n\n/**\n * Get a mock snap API, that always returns `true` for requests.\n *\n * @returns A mocked snap provider.\n */\nfunction getMockSnapGlobal(): MockSnapGlobal {\n  // eslint-disable-next-line @typescript-eslint/require-await\n  return { request: async () => true };\n}\n\n/**\n * Get a mock Ethereum provider, that always returns `true` for requests.\n *\n * @returns A mocked ethereum provider.\n */\nfunction getMockEthereumProvider(): MockEthereumProvider {\n  const mockProvider = new EventEmitter() as Partial<MockEthereumProvider>;\n  // eslint-disable-next-line @typescript-eslint/require-await\n  mockProvider.request = async () => true;\n  return mockProvider as MockEthereumProvider;\n}\n\n/**\n * Check if a value is a constructor.\n *\n * @param value - The value to check.\n * @returns `true` if the value is a constructor, or `false` otherwise.\n */\nexport const isConstructor = (value: any) =>\n  Boolean(typeof value?.prototype?.constructor?.name === 'string');\n\n/**\n * A function that always returns `true`.\n *\n * @returns `true`.\n */\nconst mockFunction = () => true;\nclass MockClass {}\n\nconst handler = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  construct(Target: any, args: any[]): any {\n    return new Proxy(new Target(...args), handler);\n  },\n  get(_target: any, _prop: any) {\n    return mockFunction;\n  },\n};\n\n/**\n * Generate a mock class for a given value. The value is wrapped in a Proxy, and\n * all methods are replaced with a mock function.\n *\n * @param value - The value to mock.\n * @returns A mock class.\n */\nconst generateMockClass = (value: any) => {\n  return new Proxy(value, handler);\n};\n\n// Things not currently auto-mocked because of NodeJS, by adding them here we\n// have types for them and can use that to generate mocks if needed.\nconst mockWindow: Record<string, unknown> = {\n  crypto,\n  SubtleCrypto: MockClass,\n};\n\n/**\n * Generate a mock endowment for a certain class or function on the `globalThis`\n * object.\n *\n * @param key - The key to generate the mock endowment for.\n * @returns A mocked class or function. If the key is part of the default\n * endowments, the original value is returned.\n */\nconst generateMockEndowment = (key: string) => {\n  const globalValue = (globalThis as any)[key];\n\n  // Default exposed APIs don't need to be mocked\n  if (globalValue && DEFAULT_ENDOWMENTS.includes(key)) {\n    return globalValue;\n  }\n\n  // Fall back to mockWindow for certain APIs not exposed in global in Node.JS\n  const globalOrMocked = globalValue ?? mockWindow[key];\n\n  const type = typeof globalOrMocked;\n  const isFunction = type === 'function';\n  if (isFunction && isConstructor(globalOrMocked)) {\n    return generateMockClass(globalOrMocked);\n  } else if (isFunction || !globalOrMocked) {\n    // Fall back to function mock for now\n    return mockFunction;\n  }\n  return globalOrMocked;\n};\n\n/**\n * Generate mock endowments for all the APIs as defined in {@link ALL_APIS}.\n *\n * @returns A map of endowments.\n */\nexport const generateMockEndowments = () => {\n  return ALL_APIS.reduce<Record<string, any>>(\n    (acc, cur) => ({ ...acc, [cur]: generateMockEndowment(cur) }),\n    { snap: getMockSnapGlobal(), ethereum: getMockEthereumProvider() },\n  );\n};\n"],"names":["ALL_APIS","isConstructor","generateMockEndowments","NETWORK_APIS","DEFAULT_ENDOWMENTS","getMockSnapGlobal","request","getMockEthereumProvider","mockProvider","EventEmitter","value","Boolean","prototype","constructor","name","mockFunction","MockClass","handler","construct","Target","args","Proxy","get","_target","_prop","generateMockClass","mockWindow","crypto","SubtleCrypto","generateMockEndowment","key","globalValue","globalThis","includes","globalOrMocked","type","isFunction","reduce","acc","cur","snap","ethereum"],"mappings":";;;;;;;;;;;IAOaA,QAAQ;eAARA;;IA0CAC,aAAa;eAAbA;;IA0EAC,sBAAsB;eAAtBA;;;+DA3HM;+DACM;mCAEU;;;;;;AAEnC,MAAMC,eAAe;IAAC;IAAS;IAAW;IAAW;CAAW;AAEzD,MAAMH,WAAqB;OAC7BI,qCAAkB;OAClBD;IACH;CACD;AAUD;;;;CAIC,GACD,SAASE;IACP,4DAA4D;IAC5D,OAAO;QAAEC,SAAS,UAAY;IAAK;AACrC;AAEA;;;;CAIC,GACD,SAASC;IACP,MAAMC,eAAe,IAAIC,eAAY;IACrC,4DAA4D;IAC5DD,aAAaF,OAAO,GAAG,UAAY;IACnC,OAAOE;AACT;AAQO,MAAMP,gBAAgB,CAACS,QAC5BC,QAAQ,OAAOD,OAAOE,WAAWC,aAAaC,SAAS;AAEzD;;;;CAIC,GACD,MAAMC,eAAe,IAAM;AAC3B,MAAMC;AAAW;AAEjB,MAAMC,UAAU;IACd,gEAAgE;IAChEC,WAAUC,MAAW,EAAEC,IAAW;QAChC,OAAO,IAAIC,MAAM,IAAIF,UAAUC,OAAOH;IACxC;IACAK,KAAIC,OAAY,EAAEC,KAAU;QAC1B,OAAOT;IACT;AACF;AAEA;;;;;;CAMC,GACD,MAAMU,oBAAoB,CAACf;IACzB,OAAO,IAAIW,MAAMX,OAAOO;AAC1B;AAEA,6EAA6E;AAC7E,oEAAoE;AACpE,MAAMS,aAAsC;IAC1CC,QAAAA,eAAM;IACNC,cAAcZ;AAChB;AAEA;;;;;;;CAOC,GACD,MAAMa,wBAAwB,CAACC;IAC7B,MAAMC,cAAc,AAACC,UAAkB,CAACF,IAAI;IAE5C,+CAA+C;IAC/C,IAAIC,eAAe3B,qCAAkB,CAAC6B,QAAQ,CAACH,MAAM;QACnD,OAAOC;IACT;IAEA,4EAA4E;IAC5E,MAAMG,iBAAiBH,eAAeL,UAAU,CAACI,IAAI;IAErD,MAAMK,OAAO,OAAOD;IACpB,MAAME,aAAaD,SAAS;IAC5B,IAAIC,cAAcnC,cAAciC,iBAAiB;QAC/C,OAAOT,kBAAkBS;IAC3B,OAAO,IAAIE,cAAc,CAACF,gBAAgB;QACxC,qCAAqC;QACrC,OAAOnB;IACT;IACA,OAAOmB;AACT;AAOO,MAAMhC,yBAAyB;IACpC,OAAOF,SAASqC,MAAM,CACpB,CAACC,KAAKC,MAAS,CAAA;YAAE,GAAGD,GAAG;YAAE,CAACC,IAAI,EAAEV,sBAAsBU;QAAK,CAAA,GAC3D;QAAEC,MAAMnC;QAAqBoC,UAAUlC;IAA0B;AAErE"}