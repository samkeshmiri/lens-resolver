function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = _object_without_properties_loose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
import { jsx as _jsx } from "react/jsx-runtime";
import { Box, useColorMode } from "@chakra-ui/react";
import MonacoEditor from "react-monaco-editor";
import { JSON_RPC_SCHEMA, JSON_RPC_SCHEMA_URL, SAMPLE_JSON_RPC_REQUEST } from "../features/handlers/json-rpc/schema";
/**
 * Editor component. This uses Monaco Editor to provide a JSON editor.
 *
 * @param props - The props.
 * @param props.border - The border.
 * @param props.borderRadius - The border radius.
 * @returns The editor component.
 */ export var Editor = function(_param) {
    var _param_border = _param.border, border = _param_border === void 0 ? "1px solid" : _param_border, props = _object_without_properties(_param, [
        "border"
    ]);
    var colorMode = useColorMode().colorMode;
    var handleMount = function(editor) {
        var _editor_languages_json;
        // Define a theme with the proper background
        editor.editor.defineTheme("vs-dark-custom", {
            base: "vs-dark",
            inherit: true,
            rules: [],
            colors: {
                // eslint-disable-next-line @typescript-eslint/naming-convention
                "editor.background": "#24272A"
            }
        });
        (_editor_languages_json = editor.languages.json) === null || _editor_languages_json === void 0 ? void 0 : _editor_languages_json.jsonDefaults.setDiagnosticsOptions({
            validate: true,
            schemas: [
                {
                    uri: JSON_RPC_SCHEMA_URL,
                    fileMatch: [
                        "*"
                    ],
                    schema: JSON_RPC_SCHEMA
                }
            ]
        });
    };
    return /*#__PURE__*/ _jsx(Box, {
        width: "100%",
        padding: "4",
        border: border,
        borderColor: "gray.muted",
        borderRadius: "md",
        flex: "1",
        children: /*#__PURE__*/ _jsx(MonacoEditor, _object_spread_props(_object_spread({
            language: "json",
            editorWillMount: handleMount,
            value: SAMPLE_JSON_RPC_REQUEST,
            theme: colorMode === "light" ? "vs-light" : "vs-dark-custom"
        }, props), {
            options: _object_spread({
                tabSize: 2,
                scrollBeyondLastLine: false,
                renderLineHighlight: "none",
                hideCursorInOverviewRuler: true,
                scrollbar: {
                    vertical: "visible",
                    verticalScrollbarSize: 5
                },
                minimap: {
                    enabled: false
                },
                lineNumbers: "off",
                automaticLayout: true,
                glyphMargin: false,
                folding: false,
                lineDecorationsWidth: 0,
                lineNumbersMinChars: 0
            }, props.options)
        }))
    });
};
