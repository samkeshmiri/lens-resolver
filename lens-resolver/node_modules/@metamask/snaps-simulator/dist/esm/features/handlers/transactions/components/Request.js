/* eslint-disable react/no-children-prop */ function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function _object_without_properties(source, excluded) {
    if (source == null) return {};
    var target = _object_without_properties_loose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for(i = 0; i < sourceSymbolKeys.length; i++){
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) continue;
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
            target[key] = source[key];
        }
    }
    return target;
}
function _object_without_properties_loose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Flex, FormControl, FormErrorMessage, FormLabel, Input, InputGroup, InputRightAddon, Textarea } from "@chakra-ui/react";
import { HandlerType } from "@metamask/snaps-utils";
import { useForm } from "react-hook-form";
import { useDispatch, useSelector } from "../../../../hooks";
import { sendRequest } from "../../../simulation";
import { getTransactionRequest } from "../slice";
import { hexlifyTransactionData } from "../utils";
import { TransactionPrefills } from "./TransactionPrefills";
var PLACEHOLDERS = {
    chainId: "eip155:1",
    origin: "metamask.io",
    from: "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
    to: "0x9f2817015caF6607C1198fB943A8241652EE8906",
    value: "0.01",
    gas: "21000",
    nonce: "5",
    maxFeePerGas: "10",
    maxPriorityFeePerGas: "1",
    data: "0x"
};
export var Request = function() {
    var _request, _errors_chainId, _errors_transactionOrigin, _errors_from, _errors_to, _errors_value, _errors_gas, _errors_nonce, _errors_maxFeePerGas, _errors_maxPriorityFeePerGas, _errors_data;
    var request = useSelector(getTransactionRequest).request;
    var _request_params;
    var _ref = (_request_params = (_request = request) === null || _request === void 0 ? void 0 : _request.params) !== null && _request_params !== void 0 ? _request_params : {}, defaultChainId = _ref.chainId, defaultTransactionOrigin = _ref.transactionOrigin, previousTransaction = _ref.transaction;
    var _chainId = PLACEHOLDERS.chainId, _origin = PLACEHOLDERS.origin, placeholderTransaction = _object_without_properties(PLACEHOLDERS, [
        "chainId",
        "origin"
    ]);
    var defaultTransaction = previousTransaction !== null && previousTransaction !== void 0 ? previousTransaction : placeholderTransaction;
    var _useForm = useForm({
        defaultValues: _object_spread({
            chainId: defaultChainId !== null && defaultChainId !== void 0 ? defaultChainId : PLACEHOLDERS.chainId,
            transactionOrigin: defaultTransactionOrigin !== null && defaultTransactionOrigin !== void 0 ? defaultTransactionOrigin : PLACEHOLDERS.origin
        }, defaultTransaction)
    }), handleSubmit = _useForm.handleSubmit, register = _useForm.register, setValue = _useForm.setValue, errors = _useForm.formState.errors;
    var dispatch = useDispatch();
    var onSubmit = function(data) {
        var chainId = data.chainId, transactionOrigin = data.transactionOrigin, transaction = _object_without_properties(data, [
            "chainId",
            "transactionOrigin"
        ]);
        dispatch(sendRequest({
            origin: "",
            handler: HandlerType.OnTransaction,
            request: {
                jsonrpc: "2.0",
                // This doesn't actually matter as it is stripped, but it shows up nicely in the history view
                method: "onTransaction",
                params: {
                    chainId: chainId,
                    transaction: hexlifyTransactionData(transaction),
                    transactionOrigin: transactionOrigin
                }
            }
        }));
    };
    var handlePrefill = function(prefill) {
        setValue("chainId", prefill.chainId);
        setValue("transactionOrigin", prefill.transactionOrigin);
        setValue("from", prefill.from);
        setValue("to", prefill.to);
        setValue("value", prefill.value);
        setValue("data", prefill.data);
        setValue("gas", prefill.gas);
        setValue("maxFeePerGas", prefill.maxFeePerGas);
        setValue("maxPriorityFeePerGas", prefill.maxPriorityFeePerGas);
        setValue("nonce", prefill.nonce);
    };
    return /*#__PURE__*/ _jsxs(Flex, {
        as: "form",
        flexDirection: "column",
        flex: "1",
        /* eslint-disable-next-line @typescript-eslint/no-misused-promises */ onSubmit: handleSubmit(onSubmit),
        id: "request-form",
        children: [
            /*#__PURE__*/ _jsx(TransactionPrefills, {
                onClick: handlePrefill
            }),
            /*#__PURE__*/ _jsxs(Flex, {
                gap: "2",
                children: [
                    /*#__PURE__*/ _jsxs(FormControl, {
                        isInvalid: Boolean(errors.chainId),
                        children: [
                            /*#__PURE__*/ _jsx(FormLabel, {
                                htmlFor: "chainId",
                                children: "Chain ID"
                            }),
                            /*#__PURE__*/ _jsx(Input, _object_spread({
                                id: "chainId",
                                placeholder: PLACEHOLDERS.chainId,
                                fontFamily: "code"
                            }, register("chainId"))),
                            /*#__PURE__*/ _jsx(FormErrorMessage, {
                                children: (_errors_chainId = errors.chainId) === null || _errors_chainId === void 0 ? void 0 : _errors_chainId.message
                            })
                        ]
                    }),
                    /*#__PURE__*/ _jsxs(FormControl, {
                        isInvalid: Boolean(errors.transactionOrigin),
                        children: [
                            /*#__PURE__*/ _jsx(FormLabel, {
                                htmlFor: "origin",
                                children: "Transaction Origin"
                            }),
                            /*#__PURE__*/ _jsx(Input, _object_spread({
                                id: "origin",
                                placeholder: PLACEHOLDERS.origin,
                                fontFamily: "code"
                            }, register("transactionOrigin"))),
                            /*#__PURE__*/ _jsx(FormErrorMessage, {
                                children: (_errors_transactionOrigin = errors.transactionOrigin) === null || _errors_transactionOrigin === void 0 ? void 0 : _errors_transactionOrigin.message
                            })
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ _jsxs(FormControl, {
                isInvalid: Boolean(errors.from),
                children: [
                    /*#__PURE__*/ _jsx(FormLabel, {
                        htmlFor: "from",
                        children: "From Address"
                    }),
                    /*#__PURE__*/ _jsx(Input, _object_spread({
                        id: "from",
                        placeholder: PLACEHOLDERS.from,
                        fontFamily: "code"
                    }, register("from"))),
                    /*#__PURE__*/ _jsx(FormErrorMessage, {
                        children: (_errors_from = errors.from) === null || _errors_from === void 0 ? void 0 : _errors_from.message
                    })
                ]
            }),
            /*#__PURE__*/ _jsxs(FormControl, {
                isInvalid: Boolean(errors.to),
                children: [
                    /*#__PURE__*/ _jsx(FormLabel, {
                        htmlFor: "to",
                        children: "To Address"
                    }),
                    /*#__PURE__*/ _jsx(Input, _object_spread({
                        id: "to",
                        placeholder: PLACEHOLDERS.to,
                        fontFamily: "code"
                    }, register("to"))),
                    /*#__PURE__*/ _jsx(FormErrorMessage, {
                        children: (_errors_to = errors.to) === null || _errors_to === void 0 ? void 0 : _errors_to.message
                    })
                ]
            }),
            /*#__PURE__*/ _jsxs(FormControl, {
                isInvalid: Boolean(errors.value),
                children: [
                    /*#__PURE__*/ _jsx(FormLabel, {
                        htmlFor: "value",
                        children: "Value"
                    }),
                    /*#__PURE__*/ _jsxs(InputGroup, {
                        children: [
                            /*#__PURE__*/ _jsx(Input, _object_spread({
                                id: "value",
                                placeholder: PLACEHOLDERS.value,
                                fontFamily: "code"
                            }, register("value"))),
                            /*#__PURE__*/ _jsx(InputRightAddon, {
                                children: "ETH",
                                fontSize: "sm"
                            })
                        ]
                    }),
                    /*#__PURE__*/ _jsx(FormErrorMessage, {
                        children: (_errors_value = errors.value) === null || _errors_value === void 0 ? void 0 : _errors_value.message
                    })
                ]
            }),
            /*#__PURE__*/ _jsxs(Flex, {
                gap: "2",
                children: [
                    /*#__PURE__*/ _jsxs(FormControl, {
                        isInvalid: Boolean(errors.gas),
                        children: [
                            /*#__PURE__*/ _jsx(FormLabel, {
                                htmlFor: "gas",
                                children: "Gas Limit"
                            }),
                            /*#__PURE__*/ _jsx(Input, _object_spread({
                                id: "gas",
                                placeholder: PLACEHOLDERS.gas,
                                fontFamily: "code"
                            }, register("gas"))),
                            /*#__PURE__*/ _jsx(FormErrorMessage, {
                                children: (_errors_gas = errors.gas) === null || _errors_gas === void 0 ? void 0 : _errors_gas.message
                            })
                        ]
                    }),
                    /*#__PURE__*/ _jsxs(FormControl, {
                        isInvalid: Boolean(errors.nonce),
                        children: [
                            /*#__PURE__*/ _jsx(FormLabel, {
                                htmlFor: "nonce",
                                children: "Nonce"
                            }),
                            /*#__PURE__*/ _jsx(Input, _object_spread({
                                id: "nonce",
                                placeholder: PLACEHOLDERS.nonce,
                                fontFamily: "code"
                            }, register("nonce"))),
                            /*#__PURE__*/ _jsx(FormErrorMessage, {
                                children: (_errors_nonce = errors.nonce) === null || _errors_nonce === void 0 ? void 0 : _errors_nonce.message
                            })
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ _jsxs(Flex, {
                gap: "2",
                children: [
                    /*#__PURE__*/ _jsxs(FormControl, {
                        isInvalid: Boolean(errors.maxFeePerGas),
                        children: [
                            /*#__PURE__*/ _jsx(FormLabel, {
                                htmlFor: "maxFeePerGas",
                                children: "Max Fee Per Gas"
                            }),
                            /*#__PURE__*/ _jsxs(InputGroup, {
                                children: [
                                    /*#__PURE__*/ _jsx(Input, _object_spread({
                                        id: "maxFeePerGas",
                                        placeholder: PLACEHOLDERS.maxFeePerGas,
                                        fontFamily: "code"
                                    }, register("maxFeePerGas"))),
                                    /*#__PURE__*/ _jsx(InputRightAddon, {
                                        children: "GWEI",
                                        fontSize: "sm"
                                    })
                                ]
                            }),
                            /*#__PURE__*/ _jsx(FormErrorMessage, {
                                children: (_errors_maxFeePerGas = errors.maxFeePerGas) === null || _errors_maxFeePerGas === void 0 ? void 0 : _errors_maxFeePerGas.message
                            })
                        ]
                    }),
                    /*#__PURE__*/ _jsxs(FormControl, {
                        isInvalid: Boolean(errors.maxPriorityFeePerGas),
                        children: [
                            /*#__PURE__*/ _jsx(FormLabel, {
                                htmlFor: "maxPriorityFeePerGas",
                                children: "Max Priority Fee Per Gas"
                            }),
                            /*#__PURE__*/ _jsxs(InputGroup, {
                                children: [
                                    /*#__PURE__*/ _jsx(Input, _object_spread({
                                        id: "maxPriorityFeePerGas",
                                        placeholder: PLACEHOLDERS.maxPriorityFeePerGas,
                                        fontFamily: "code"
                                    }, register("maxPriorityFeePerGas"))),
                                    /*#__PURE__*/ _jsx(InputRightAddon, {
                                        children: "GWEI",
                                        fontSize: "sm"
                                    })
                                ]
                            }),
                            /*#__PURE__*/ _jsx(FormErrorMessage, {
                                children: (_errors_maxPriorityFeePerGas = errors.maxPriorityFeePerGas) === null || _errors_maxPriorityFeePerGas === void 0 ? void 0 : _errors_maxPriorityFeePerGas.message
                            })
                        ]
                    })
                ]
            }),
            /*#__PURE__*/ _jsxs(FormControl, {
                isInvalid: Boolean(errors.data),
                children: [
                    /*#__PURE__*/ _jsx(FormLabel, {
                        htmlFor: "data",
                        children: "Data"
                    }),
                    /*#__PURE__*/ _jsx(Textarea, _object_spread({
                        id: "data",
                        placeholder: PLACEHOLDERS.data,
                        fontFamily: "code"
                    }, register("data"))),
                    /*#__PURE__*/ _jsx(FormErrorMessage, {
                        children: (_errors_data = errors.data) === null || _errors_data === void 0 ? void 0 : _errors_data.message
                    })
                ]
            })
        ]
    });
};
