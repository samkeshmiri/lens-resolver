function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
import { parseUnits } from "@ethersproject/units";
import { bigIntToHex, isStrictHexString } from "@metamask/utils";
var hexlify = function(input, unit) {
    if (input.length === 0) {
        return "0x";
    }
    if (isStrictHexString(input) || input === "0x") {
        return input;
    }
    if (unit) {
        var parsed = parseUnits(input, unit);
        return bigIntToHex(parsed.toBigInt());
    }
    return bigIntToHex(BigInt(input));
};
export var hexlifyTransactionData = function(transaction) {
    var gas = hexlify(transaction.gas);
    var nonce = hexlify(transaction.nonce);
    var maxFeePerGas = hexlify(transaction.maxFeePerGas, "gwei");
    var maxPriorityFeePerGas = hexlify(transaction.maxPriorityFeePerGas, "gwei");
    var value = hexlify(transaction.value, "ether");
    var to = hexlify(transaction.to);
    var from = hexlify(transaction.from);
    var data = hexlify(transaction.data);
    return _object_spread_props(_object_spread({}, transaction), {
        to: to,
        from: from,
        data: data,
        gas: gas,
        nonce: nonce,
        maxFeePerGas: maxFeePerGas,
        maxPriorityFeePerGas: maxPriorityFeePerGas,
        value: value
    });
};
