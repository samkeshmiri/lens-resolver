import { createSelector, createSlice } from "@reduxjs/toolkit";
export var DEFAULT_SRP = "test test test test test test test test test test test ball";
export var INITIAL_CONFIGURATION_STATE = {
    open: false,
    snapId: "local:http://localhost:8080",
    snapVersion: undefined,
    srp: DEFAULT_SRP,
    sesEnabled: true
};
var slice = createSlice({
    name: "configuration",
    initialState: INITIAL_CONFIGURATION_STATE,
    reducers: {
        openConfigurationModal: function openConfigurationModal(state) {
            state.open = true;
        },
        setOpen: function setOpen(state, action) {
            state.open = action.payload;
        },
        setSnapId: function setSnapId(state, action) {
            state.snapId = action.payload;
        },
        setSnapVersion: function setSnapVersion(state, action) {
            state.snapVersion = action.payload;
        },
        setSrp: function setSrp(state, action) {
            state.srp = action.payload;
        },
        setSesEnabled: function setSesEnabled(state, action) {
            state.sesEnabled = action.payload;
        }
    }
});
var _slice_actions = slice.actions;
export var openConfigurationModal = _slice_actions.openConfigurationModal, setOpen = _slice_actions.setOpen, setSnapId = _slice_actions.setSnapId, setSnapVersion = _slice_actions.setSnapVersion, setSrp = _slice_actions.setSrp, setSesEnabled = _slice_actions.setSesEnabled;
export var configuration = slice.reducer;
export var getOpen = createSelector(function(state) {
    return state.configuration;
}, function(state) {
    return state.open;
});
export var getSnapId = createSelector(function(state) {
    return state.configuration;
}, function(state) {
    return state.snapId;
});
export var getSnapVersion = createSelector(function(state) {
    return state.configuration;
}, function(state) {
    return state.snapVersion;
});
export var getSrp = createSelector(function(state) {
    return state.configuration;
}, function(state) {
    return state.srp;
});
export var getSesEnabled = createSelector(function(state) {
    return state.configuration;
}, function(state) {
    return state.sesEnabled;
});
