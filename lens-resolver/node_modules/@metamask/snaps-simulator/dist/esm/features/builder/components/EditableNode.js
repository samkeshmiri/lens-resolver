function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
import { jsx as _jsx } from "react/jsx-runtime";
import { Box, Input } from "@chakra-ui/react";
import { assert } from "@metamask/utils";
import { useState } from "react";
import { getNodeText } from "../utils";
import { BaseNode } from "./BaseNode";
/**
 * An editable node, which renders an editable component in the builder.
 *
 * @param props - The props of the component.
 * @param props.node - The editable node to render.
 * @param props.depth - The depth of the node in the tree.
 * @param props.isDragging - Whether the node is being dragged.
 * @param props.onChange - A function to call when the node changes.
 * @param props.onClose - A function to call when the node is closed.
 * @returns An editable node component.
 */ export var EditableNode = function(param) {
    var node = param.node, depth = param.depth, isDragging = param.isDragging, onChange = param.onChange, onClose = param.onClose;
    var text = getNodeText(node);
    assert(text !== null, "Node must have text.");
    var _useState = _sliced_to_array(useState(text), 2), value = _useState[0], setValue = _useState[1];
    var handleChange = function(newValue) {
        var _onChange;
        setValue(newValue.target.value);
        (_onChange = onChange) === null || _onChange === void 0 ? void 0 : _onChange(node, newValue.target.value);
    };
    return /*#__PURE__*/ _jsx(Box, {
        marginLeft: "".concat(depth * 16, "px"),
        children: /*#__PURE__*/ _jsx(BaseNode, {
            node: node,
            isDragging: isDragging,
            onClose: onClose,
            children: /*#__PURE__*/ _jsx(Input, {
                value: value,
                onChange: handleChange,
                fontSize: "sm",
                bg: "chakra-body-bg",
                borderColor: "border.default",
                outline: "none",
                _active: {
                    borderColor: "border.active",
                    outline: "none",
                    boxShadow: "none"
                },
                _focusVisible: {
                    borderColor: "border.active",
                    outline: "none",
                    boxShadow: "none"
                }
            })
        })
    });
};
