import { NodeType } from "@metamask/snaps-ui";
import { deepClone } from "@metamask/snaps-utils";
import { assert, hasProperty } from "@metamask/utils";
import typescript from "prettier/parser-typescript";
import prettier from "prettier/standalone";
/**
 * Get the text of a node model.
 *
 * @param nodeModel - The node model.
 * @returns The text of the node model, or `null` if the node model does not
 * have text.
 */ export function getNodeText(nodeModel) {
    assert(nodeModel.data, "Node model must have data.");
    if (hasProperty(nodeModel.data, "value")) {
        return nodeModel.data.value;
    }
    return null;
}
/**
 * Convert an array of node models to a component. This is useful for converting
 * the tree view data to a component that can be rendered.
 *
 * @param nodeModels - The array of node models.
 * @returns The component.
 */ export function nodeModelsToComponent(nodeModels) {
    var _root_data, _root;
    // We want to clone the node models so that we don't mutate the original data.
    var clonedModels = deepClone(nodeModels);
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        var _loop = function() {
            var nodeModel = _step.value;
            assert(nodeModel.data, "Node model must have data.");
            var parent = clonedModels.find(function(model) {
                return model.id === nodeModel.parent;
            });
            if (parent) {
                var _parent_data;
                assert(((_parent_data = parent.data) === null || _parent_data === void 0 ? void 0 : _parent_data.type) === "panel", "Parent must be a panel.");
                parent.data.children.push(nodeModel.data);
            }
        };
        for(var _iterator = clonedModels[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    var root = clonedModels.find(function(model) {
        return model.parent === 0;
    });
    assert(((_root = root) === null || _root === void 0 ? void 0 : (_root_data = _root.data) === null || _root_data === void 0 ? void 0 : _root_data.type) === "panel", "Root must be a panel.");
    return root.data;
}
/**
 * Get all the component types used in a component.
 *
 * @param component - The component.
 * @returns The component types.
 */ function getComponentTypes(component) {
    var componentTypes = new Set();
    componentTypes.add(component.type);
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = component.children[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var child = _step.value;
            componentTypes.add(child.type);
            if (child.type === "panel") {
                var childComponentTypes = getComponentTypes(child);
                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
                try {
                    for(var _iterator1 = childComponentTypes[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
                        var childComponentType = _step1.value;
                        componentTypes.add(childComponentType);
                    }
                } catch (err) {
                    _didIteratorError1 = true;
                    _iteratorError1 = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {
                            _iterator1.return();
                        }
                    } finally{
                        if (_didIteratorError1) {
                            throw _iteratorError1;
                        }
                    }
                }
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return Array.from(componentTypes).sort(function(a, b) {
        return a.localeCompare(b);
    });
}
/**
 * Get the arguments used to create a component.
 *
 * @param component - The component.
 * @returns The arguments.
 */ function getComponentArgs(component) {
    switch(component.type){
        case NodeType.Panel:
            return component.children.map(getComponentArgs).join(",\n");
        case NodeType.Text:
        case NodeType.Heading:
        case NodeType.Copyable:
            return "'".concat(component.value, "'");
        case NodeType.Spinner:
        case NodeType.Divider:
        default:
            return "";
    }
}
/**
 * Get the code for a component.
 *
 * @param component - The component.
 * @returns The code.
 */ function componentToCode(component) {
    if (component.type === NodeType.Panel) {
        return "panel([\n".concat(component.children.map(componentToCode).join(",\n"), "\n])");
    }
    var args = getComponentArgs(component);
    return "".concat(component.type, "(").concat(args, ")");
}
/**
 * Convert a root panel to code. The code is formatted using prettier.
 *
 * @param component - The root panel.
 * @returns The code.
 */ export function panelToCode(component) {
    var types = getComponentTypes(component).join(", ");
    return prettier.format("\n      import { ".concat(types, " } from '@metamask/snaps-ui';\n\n      const component = ").concat(componentToCode(component), ";\n"), {
        parser: "typescript",
        plugins: [
            typescript
        ],
        printWidth: 80,
        tabWidth: 2,
        singleQuote: true,
        trailingComma: "all"
    });
}
