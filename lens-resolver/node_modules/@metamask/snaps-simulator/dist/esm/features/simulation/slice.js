import { createAction, createSelector, createSlice, nanoid } from "@reduxjs/toolkit";
export var SnapStatus;
(function(SnapStatus) {
    SnapStatus["Ok"] = "ok";
    SnapStatus["Loading"] = "loading";
    SnapStatus["Error"] = "error";
})(SnapStatus || (SnapStatus = {}));
export var INITIAL_STATE = {
    status: SnapStatus.Loading,
    executionService: null,
    permissionController: null,
    subjectMetadataController: null,
    manifest: null,
    sourceCode: null,
    snapState: null
};
var slice = createSlice({
    name: "simulation",
    initialState: INITIAL_STATE,
    reducers: {
        setStatus: function setStatus(state, action) {
            state.status = action.payload;
        },
        setExecutionService: function setExecutionService(state, action) {
            state.executionService = action.payload;
        },
        setPermissionController: function setPermissionController(state, action) {
            state.permissionController = action.payload;
        },
        setSubjectMetadataController: function setSubjectMetadataController(state, action) {
            state.subjectMetadataController = action.payload;
        },
        setManifest: function setManifest(state, action) {
            // Type error occurs here due to some weirdness with SnapManifest and WritableDraft or PayloadAction
            state.manifest = action.payload;
        },
        setSourceCode: function setSourceCode(state, action) {
            state.sourceCode = action.payload;
        },
        setIcon: function setIcon(state, action) {
            state.icon = action.payload;
        },
        showUserInterface: function(state, action) {
            state.ui = action.payload;
        },
        closeUserInterface: function(state) {
            state.ui = null;
        },
        setSnapState: function(state, action) {
            state.snapState = action.payload;
        },
        sendRequest: function(state, _) {
            state.requestId = nanoid();
        }
    }
});
export var resolveUserInterface = createAction("".concat(slice.name, "/resolveUserInterface"));
var _slice_actions = slice.actions;
export var setStatus = _slice_actions.setStatus, setExecutionService = _slice_actions.setExecutionService, setPermissionController = _slice_actions.setPermissionController, setSubjectMetadataController = _slice_actions.setSubjectMetadataController, setManifest = _slice_actions.setManifest, setSourceCode = _slice_actions.setSourceCode, setIcon = _slice_actions.setIcon, showUserInterface = _slice_actions.showUserInterface, closeUserInterface = _slice_actions.closeUserInterface, setSnapState = _slice_actions.setSnapState, sendRequest = _slice_actions.sendRequest;
export var simulation = slice.reducer;
export var getStatus = createSelector(function(state) {
    return state.simulation;
}, function(state) {
    return state.status;
});
export var getExecutionService = createSelector(function(state) {
    return state.simulation;
}, function(state) {
    return state.executionService;
});
export var getPermissionController = createSelector(function(state) {
    return state.simulation;
}, function(state) {
    return state.permissionController;
});
export var getSubjectMetadataController = createSelector(function(state) {
    return state.simulation;
}, function(state) {
    return state.subjectMetadataController;
});
export var getSnapName = createSelector(function(state) {
    return state.simulation;
}, function(state) {
    var _state_manifest;
    return (_state_manifest = state.manifest) === null || _state_manifest === void 0 ? void 0 : _state_manifest.result.proposedName;
});
export var getIcon = createSelector(function(state) {
    return state.simulation;
}, function(state) {
    return state.icon;
});
export var getUserInterface = createSelector(function(state) {
    return state.simulation;
}, function(state) {
    return state.ui;
});
export var getSnapStateSelector = createSelector(function(state) {
    return state.simulation;
}, function(state) {
    return state.snapState;
});
export var getSnapManifest = createSelector(function(state) {
    return state.simulation;
}, function(state) {
    var _state_manifest;
    return (_state_manifest = state.manifest) === null || _state_manifest === void 0 ? void 0 : _state_manifest.result;
});
export var getSourceCode = createSelector(function(state) {
    return state.simulation;
}, function(state) {
    return state.sourceCode;
});
export var getRequestId = createSelector(function(state) {
    return state.simulation;
}, function(state) {
    return state.requestId;
});
