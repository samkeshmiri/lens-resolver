import { VirtualFile } from "@metamask/snaps-utils";
import { SnapStatus, simulation as reducer, setExecutionService, setManifest, setSourceCode, setStatus, INITIAL_STATE } from "./slice";
import { MockExecutionService } from "./test/mockExecutionService";
import { MOCK_MANIFEST, MOCK_MANIFEST_FILE } from "./test/mockManifest";
describe("simulation slice", function() {
    describe("setStatus", function() {
        it("sets the snap status", function() {
            var result = reducer(INITIAL_STATE, setStatus(SnapStatus.Ok));
            expect(result.status).toStrictEqual(SnapStatus.Ok);
        });
    });
    describe("setExecutionService", function() {
        it("sets execution service", function() {
            var executionService = new MockExecutionService();
            var result = reducer(INITIAL_STATE, setExecutionService(executionService));
            expect(result.executionService).toStrictEqual(executionService);
        });
    });
    describe("setSourceCode", function() {
        it("sets the source code", function() {
            var _result_sourceCode;
            var result = reducer(INITIAL_STATE, setSourceCode(new VirtualFile("foo")));
            expect((_result_sourceCode = result.sourceCode) === null || _result_sourceCode === void 0 ? void 0 : _result_sourceCode.value).toBe("foo");
        });
    });
    describe("setManifest", function() {
        it("sets the manifest", function() {
            var _result_manifest;
            var result = reducer(INITIAL_STATE, setManifest(MOCK_MANIFEST_FILE));
            expect((_result_manifest = result.manifest) === null || _result_manifest === void 0 ? void 0 : _result_manifest.result).toStrictEqual(MOCK_MANIFEST);
        });
    });
});
