"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    INITIAL_NOTIFICATIONS_STATE: function() {
        return INITIAL_NOTIFICATIONS_STATE;
    },
    addNotification: function() {
        return addNotification;
    },
    addNativeNotification: function() {
        return addNativeNotification;
    },
    removeNotification: function() {
        return removeNotification;
    },
    notifications: function() {
        return notifications;
    },
    getNotifications: function() {
        return getNotifications;
    }
});
var _rpcmethods = require("@metamask/rpc-methods");
var _toolkit = require("@reduxjs/toolkit");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
var INITIAL_NOTIFICATIONS_STATE = {
    notifications: [],
    allNotifications: []
};
var slice = (0, _toolkit.createSlice)({
    name: "notifications",
    initialState: INITIAL_NOTIFICATIONS_STATE,
    reducers: {
        /**
     * Add a notification to the state.
     *
     * @param state - The current state.
     * @param action - The action with the notification message as the payload.
     */ addNotification: function addNotification(state, action) {
            var notification = _object_spread_props(_object_spread({}, action.payload), {
                type: _rpcmethods.NotificationType.InApp
            });
            state.notifications.push(notification);
            state.allNotifications.push(notification);
        },
        /**
     * Add a native notification to the state.
     *
     * @param state - The current state.
     * @param action - The action with the notification message as the payload.
     */ addNativeNotification: function addNativeNotification(state, action) {
            var notification = _object_spread_props(_object_spread({}, action.payload), {
                type: _rpcmethods.NotificationType.Native
            });
            state.allNotifications.push(notification);
        },
        /**
     * Remove a notification from the state.
     *
     * @param state - The current state.
     * @param action - The action with the notification ID to remove as the
     * payload.
     */ removeNotification: function removeNotification(state, action) {
            state.notifications = state.notifications.filter(function(notification) {
                return notification.id !== action.payload;
            });
        }
    }
});
var _slice_actions = slice.actions;
var addNotification = _slice_actions.addNotification, addNativeNotification = _slice_actions.addNativeNotification, removeNotification = _slice_actions.removeNotification;
var notifications = slice.reducer;
var getNotifications = (0, _toolkit.createSelector)(function(state) {
    return state.notifications;
}, function(state) {
    return state.notifications;
});
