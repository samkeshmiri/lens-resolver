"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    SnapStatus: function() {
        return SnapStatus;
    },
    INITIAL_STATE: function() {
        return INITIAL_STATE;
    },
    resolveUserInterface: function() {
        return resolveUserInterface;
    },
    setStatus: function() {
        return setStatus;
    },
    setExecutionService: function() {
        return setExecutionService;
    },
    setPermissionController: function() {
        return setPermissionController;
    },
    setSubjectMetadataController: function() {
        return setSubjectMetadataController;
    },
    setManifest: function() {
        return setManifest;
    },
    setSourceCode: function() {
        return setSourceCode;
    },
    setIcon: function() {
        return setIcon;
    },
    showUserInterface: function() {
        return showUserInterface;
    },
    closeUserInterface: function() {
        return closeUserInterface;
    },
    setSnapState: function() {
        return setSnapState;
    },
    sendRequest: function() {
        return sendRequest;
    },
    simulation: function() {
        return simulation;
    },
    getStatus: function() {
        return getStatus;
    },
    getExecutionService: function() {
        return getExecutionService;
    },
    getPermissionController: function() {
        return getPermissionController;
    },
    getSubjectMetadataController: function() {
        return getSubjectMetadataController;
    },
    getSnapName: function() {
        return getSnapName;
    },
    getIcon: function() {
        return getIcon;
    },
    getUserInterface: function() {
        return getUserInterface;
    },
    getSnapStateSelector: function() {
        return getSnapStateSelector;
    },
    getSnapManifest: function() {
        return getSnapManifest;
    },
    getSourceCode: function() {
        return getSourceCode;
    },
    getRequestId: function() {
        return getRequestId;
    }
});
var _toolkit = require("@reduxjs/toolkit");
var SnapStatus;
(function(SnapStatus) {
    SnapStatus["Ok"] = "ok";
    SnapStatus["Loading"] = "loading";
    SnapStatus["Error"] = "error";
})(SnapStatus || (SnapStatus = {}));
var INITIAL_STATE = {
    status: SnapStatus.Loading,
    executionService: null,
    permissionController: null,
    subjectMetadataController: null,
    manifest: null,
    sourceCode: null,
    snapState: null
};
var slice = (0, _toolkit.createSlice)({
    name: "simulation",
    initialState: INITIAL_STATE,
    reducers: {
        setStatus: function setStatus(state, action) {
            state.status = action.payload;
        },
        setExecutionService: function setExecutionService(state, action) {
            state.executionService = action.payload;
        },
        setPermissionController: function setPermissionController(state, action) {
            state.permissionController = action.payload;
        },
        setSubjectMetadataController: function setSubjectMetadataController(state, action) {
            state.subjectMetadataController = action.payload;
        },
        setManifest: function setManifest(state, action) {
            // Type error occurs here due to some weirdness with SnapManifest and WritableDraft or PayloadAction
            state.manifest = action.payload;
        },
        setSourceCode: function setSourceCode(state, action) {
            state.sourceCode = action.payload;
        },
        setIcon: function setIcon(state, action) {
            state.icon = action.payload;
        },
        showUserInterface: function(state, action) {
            state.ui = action.payload;
        },
        closeUserInterface: function(state) {
            state.ui = null;
        },
        setSnapState: function(state, action) {
            state.snapState = action.payload;
        },
        sendRequest: function(state, _) {
            state.requestId = (0, _toolkit.nanoid)();
        }
    }
});
var resolveUserInterface = (0, _toolkit.createAction)("".concat(slice.name, "/resolveUserInterface"));
var _slice_actions = slice.actions;
var setStatus = _slice_actions.setStatus, setExecutionService = _slice_actions.setExecutionService, setPermissionController = _slice_actions.setPermissionController, setSubjectMetadataController = _slice_actions.setSubjectMetadataController, setManifest = _slice_actions.setManifest, setSourceCode = _slice_actions.setSourceCode, setIcon = _slice_actions.setIcon, showUserInterface = _slice_actions.showUserInterface, closeUserInterface = _slice_actions.closeUserInterface, setSnapState = _slice_actions.setSnapState, sendRequest = _slice_actions.sendRequest;
var simulation = slice.reducer;
var getStatus = (0, _toolkit.createSelector)(function(state) {
    return state.simulation;
}, function(state) {
    return state.status;
});
var getExecutionService = (0, _toolkit.createSelector)(function(state) {
    return state.simulation;
}, function(state) {
    return state.executionService;
});
var getPermissionController = (0, _toolkit.createSelector)(function(state) {
    return state.simulation;
}, function(state) {
    return state.permissionController;
});
var getSubjectMetadataController = (0, _toolkit.createSelector)(function(state) {
    return state.simulation;
}, function(state) {
    return state.subjectMetadataController;
});
var getSnapName = (0, _toolkit.createSelector)(function(state) {
    return state.simulation;
}, function(state) {
    var _state_manifest;
    return (_state_manifest = state.manifest) === null || _state_manifest === void 0 ? void 0 : _state_manifest.result.proposedName;
});
var getIcon = (0, _toolkit.createSelector)(function(state) {
    return state.simulation;
}, function(state) {
    return state.icon;
});
var getUserInterface = (0, _toolkit.createSelector)(function(state) {
    return state.simulation;
}, function(state) {
    return state.ui;
});
var getSnapStateSelector = (0, _toolkit.createSelector)(function(state) {
    return state.simulation;
}, function(state) {
    return state.snapState;
});
var getSnapManifest = (0, _toolkit.createSelector)(function(state) {
    return state.simulation;
}, function(state) {
    var _state_manifest;
    return (_state_manifest = state.manifest) === null || _state_manifest === void 0 ? void 0 : _state_manifest.result;
});
var getSourceCode = (0, _toolkit.createSelector)(function(state) {
    return state.simulation;
}, function(state) {
    return state.sourceCode;
});
var getRequestId = (0, _toolkit.createSelector)(function(state) {
    return state.simulation;
}, function(state) {
    return state.requestId;
});
