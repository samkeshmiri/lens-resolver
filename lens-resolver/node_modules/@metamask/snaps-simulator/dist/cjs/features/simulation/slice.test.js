"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _snapsutils = require("@metamask/snaps-utils");
var _slice = require("./slice");
var _mockExecutionService = require("./test/mockExecutionService");
var _mockManifest = require("./test/mockManifest");
describe("simulation slice", function() {
    describe("setStatus", function() {
        it("sets the snap status", function() {
            var result = (0, _slice.simulation)(_slice.INITIAL_STATE, (0, _slice.setStatus)(_slice.SnapStatus.Ok));
            expect(result.status).toStrictEqual(_slice.SnapStatus.Ok);
        });
    });
    describe("setExecutionService", function() {
        it("sets execution service", function() {
            var executionService = new _mockExecutionService.MockExecutionService();
            var result = (0, _slice.simulation)(_slice.INITIAL_STATE, (0, _slice.setExecutionService)(executionService));
            expect(result.executionService).toStrictEqual(executionService);
        });
    });
    describe("setSourceCode", function() {
        it("sets the source code", function() {
            var _result_sourceCode;
            var result = (0, _slice.simulation)(_slice.INITIAL_STATE, (0, _slice.setSourceCode)(new _snapsutils.VirtualFile("foo")));
            expect((_result_sourceCode = result.sourceCode) === null || _result_sourceCode === void 0 ? void 0 : _result_sourceCode.value).toBe("foo");
        });
    });
    describe("setManifest", function() {
        it("sets the manifest", function() {
            var _result_manifest;
            var result = (0, _slice.simulation)(_slice.INITIAL_STATE, (0, _slice.setManifest)(_mockManifest.MOCK_MANIFEST_FILE));
            expect((_result_manifest = result.manifest) === null || _result_manifest === void 0 ? void 0 : _result_manifest.result).toStrictEqual(_mockManifest.MOCK_MANIFEST);
        });
    });
});
