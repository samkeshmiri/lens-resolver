"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _snapscontrollers = require("@metamask/snaps-controllers");
var _snapsutils = require("@metamask/snaps-utils");
var _reduxsagatestplan = require("redux-saga-test-plan");
var _configuration = require("../configuration");
var _sagas = require("./sagas");
var _slice = require("./slice");
var _mockExecutionService = require("./test/mockExecutionService");
var _mockManifest = require("./test/mockManifest");
var _mockSnap = require("./test/mockSnap");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var snapId = "local:http://localhost:8080";
describe("initSaga", function() {
    it("initializes the execution environment", /*#__PURE__*/ _async_to_generator(function() {
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        (0, _reduxsagatestplan.expectSaga)(_sagas.initSaga, (0, _configuration.setSnapId)(snapId)).withState({
                            configuration: {
                                srp: _configuration.DEFAULT_SRP
                            }
                        }).put.actionType(_slice.setExecutionService.type).silentRun()
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    }));
});
describe("rebootSaga", function() {
    it("reboots the execution environment when source code changes", /*#__PURE__*/ _async_to_generator(function() {
        var executionService, permissionController;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    executionService = new _mockExecutionService.MockExecutionService();
                    permissionController = {
                        hasPermission: jest.fn().mockImplementation(function() {
                            return true;
                        }),
                        getEndowments: jest.fn().mockResolvedValue([])
                    };
                    return [
                        4,
                        (0, _reduxsagatestplan.expectSaga)(_sagas.rebootSaga, (0, _slice.setSourceCode)(_mockSnap.MOCK_SNAP_SOURCE_FILE)).withState({
                            configuration: {
                                snapId: snapId
                            },
                            simulation: {
                                executionService: executionService,
                                permissionController: permissionController
                            }
                        }).call([
                            executionService,
                            "terminateAllSnaps"
                        ]).call([
                            executionService,
                            "executeSnap"
                        ], {
                            snapId: snapId,
                            sourceCode: _mockSnap.MOCK_SNAP_SOURCE,
                            endowments: _snapsutils.DEFAULT_ENDOWMENTS
                        }).silentRun()
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    }));
});
describe("requestSaga", function() {
    it("sends requests to the execution environment and captures the response", /*#__PURE__*/ _async_to_generator(function() {
        var sourceCode, executionService, request;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    sourceCode = "foo";
                    executionService = new _mockExecutionService.MockExecutionService();
                    request = {
                        origin: "Snaps Simulator",
                        handler: _snapsutils.HandlerType.OnRpcRequest,
                        request: {
                            jsonrpc: "2.0",
                            method: "bar"
                        }
                    };
                    return [
                        4,
                        (0, _reduxsagatestplan.expectSaga)(_sagas.requestSaga, (0, _slice.sendRequest)(request)).withState({
                            configuration: {
                                snapId: snapId
                            },
                            simulation: {
                                sourceCode: sourceCode,
                                executionService: executionService
                            }
                        }).put({
                            type: "".concat(_snapsutils.HandlerType.OnRpcRequest, "/setRequest"),
                            payload: request
                        }).call([
                            executionService,
                            "handleRpcRequest"
                        ], snapId, request).put({
                            type: "".concat(_snapsutils.HandlerType.OnRpcRequest, "/setResponse"),
                            payload: {
                                result: "foobar"
                            }
                        }).silentRun()
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    }));
});
describe("permissionsSaga", function() {
    it("grants permissions based on the manifest payload", /*#__PURE__*/ _async_to_generator(function() {
        var grantPermissions, permissionController, subjectMetadataController, approvedPermissions;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    grantPermissions = jest.fn();
                    permissionController = {
                        grantPermissions: grantPermissions
                    };
                    subjectMetadataController = {
                        addSubjectMetadata: jest.fn()
                    };
                    approvedPermissions = (0, _snapscontrollers.processSnapPermissions)(_mockManifest.MOCK_MANIFEST.initialPermissions);
                    return [
                        4,
                        (0, _reduxsagatestplan.expectSaga)(_sagas.permissionsSaga, (0, _slice.setManifest)(_mockManifest.MOCK_MANIFEST_FILE)).withState({
                            configuration: {
                                snapId: snapId
                            },
                            simulation: {
                                subjectMetadataController: subjectMetadataController,
                                permissionController: permissionController
                            }
                        }).call([
                            permissionController,
                            "grantPermissions"
                        ], {
                            approvedPermissions: approvedPermissions,
                            subject: {
                                origin: snapId
                            },
                            preserveExistingPermissions: false
                        }).silentRun()
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    }));
});
