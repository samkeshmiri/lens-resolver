/* eslint-disable @typescript-eslint/naming-convention */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    MOCK_MANIFEST: function() {
        return MOCK_MANIFEST;
    },
    MOCK_MANIFEST_FILE: function() {
        return MOCK_MANIFEST_FILE;
    }
});
var _snapsutils = require("@metamask/snaps-utils");
var _utils = require("@metamask/utils");
var MOCK_MANIFEST = {
    version: "1.0.0",
    description: "The test example snap!",
    proposedName: "@metamask/example-snap",
    repository: {
        type: "git",
        url: "https://github.com/MetaMask/example-snap.git"
    },
    source: {
        shasum: "jf7x/ZXB+/oM+VFX0HThGDXf8aubOgD/RO0edGbDDqc=",
        location: {
            npm: {
                filePath: "dist/bundle.js",
                packageName: "@metamask/example-snap",
                registry: "https://registry.npmjs.org",
                iconPath: "images/icon.svg"
            }
        }
    },
    initialPermissions: {
        "endowment:rpc": {
            snaps: false,
            dapps: true
        },
        snap_getBip44Entropy: [
            {
                coinType: 1
            }
        ],
        snap_dialog: {}
    },
    manifestVersion: "0.1"
};
var MOCK_MANIFEST_FILE = new _snapsutils.VirtualFile((0, _utils.stringToBytes)(JSON.stringify(MOCK_MANIFEST)));
MOCK_MANIFEST_FILE.result = MOCK_MANIFEST;
MOCK_MANIFEST_FILE.path = "snap.manifest.json";
MOCK_MANIFEST_FILE.data = {
    canonicalPath: "local:http://localhost:8080/".concat(MOCK_MANIFEST_FILE.path)
};
