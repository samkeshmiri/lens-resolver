"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    initSaga: function() {
        return initSaga;
    },
    rebootSaga: function() {
        return rebootSaga;
    },
    requestSaga: function() {
        return requestSaga;
    },
    permissionsSaga: function() {
        return permissionsSaga;
    },
    simulationSaga: function() {
        return simulationSaga;
    }
});
var _basecontroller = require("@metamask/base-controller");
var _browserpassworder = require("@metamask/browser-passworder");
var _ethjsonrpcmiddleware = require("@metamask/eth-json-rpc-middleware");
var _keytree = require("@metamask/key-tree");
var _permissioncontroller = require("@metamask/permission-controller");
var _rpcerrors = require("@metamask/rpc-errors");
var _rpcmethods = require("@metamask/rpc-methods");
var _snapscontrollers = require("@metamask/snaps-controllers");
var _packagejson = /*#__PURE__*/ _interop_require_default(require("@metamask/snaps-execution-environments/package.json"));
var _snapsutils = require("@metamask/snaps-utils");
var _utils = require("@metamask/utils");
var _jsonrpcengine = require("json-rpc-engine");
var _jsonrpcmiddlewarestream = require("json-rpc-middleware-stream");
var _pump = /*#__PURE__*/ _interop_require_default(require("pump"));
var _effects = require("redux-saga/effects");
var _middleware = require("../../store/middleware");
var _configuration = require("../configuration");
var _console = require("../console");
var _manifest = require("../manifest");
var _constants = require("./constants");
var _hooks = require("./hooks");
var _middleware1 = require("./middleware");
var _slice = require("./slice");
var _snappermissions = require("./snap-permissions");
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var DEFAULT_ENVIRONMENT_URL = "https://execution.metamask.io/".concat(_packagejson.default.version, "/index.html");
function initSaga(param) {
    var payload, controllerMessenger, srp, permissionSpecifications, subjectMetadataController, permissionController, engine, searchParams, _searchParams_get, environmentUrl, executionService;
    return _ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                payload = param.payload;
                controllerMessenger = new _basecontroller.ControllerMessenger();
                return [
                    4,
                    (0, _effects.select)(_configuration.getSrp)
                ];
            case 1:
                srp = _state.sent();
                permissionSpecifications = _object_spread({}, (0, _snapscontrollers.buildSnapEndowmentSpecifications)(Object.keys(_snappermissions.ExcludedSnapEndowments)), (0, _snapscontrollers.buildSnapRestrictedMethodSpecifications)([], {
                    // TODO: Add all the hooks required
                    encrypt: _browserpassworder.encrypt,
                    decrypt: _browserpassworder.decrypt,
                    getUnlockPromise: /*#__PURE__*/ _async_to_generator(function() {
                        return _ts_generator(this, function(_state) {
                            return [
                                2,
                                Promise.resolve(true)
                            ];
                        });
                    }),
                    getMnemonic: /*#__PURE__*/ _async_to_generator(function() {
                        return _ts_generator(this, function(_state) {
                            return [
                                2,
                                (0, _keytree.mnemonicPhraseToBytes)(srp)
                            ];
                        });
                    }),
                    showDialog: /*#__PURE__*/ _async_to_generator(function() {
                        var _len, args, _key;
                        var _arguments = arguments;
                        return _ts_generator(this, function(_state) {
                            switch(_state.label){
                                case 0:
                                    for(_len = _arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                                        args[_key] = _arguments[_key];
                                    }
                                    return [
                                        4,
                                        _middleware.runSaga.apply(void 0, [
                                            _hooks.showDialog
                                        ].concat(_to_consumable_array(args))).toPromise()
                                    ];
                                case 1:
                                    return [
                                        2,
                                        _state.sent()
                                    ];
                            }
                        });
                    }),
                    showNativeNotification: /*#__PURE__*/ _async_to_generator(function() {
                        var _len, args, _key;
                        var _arguments = arguments;
                        return _ts_generator(this, function(_state) {
                            switch(_state.label){
                                case 0:
                                    for(_len = _arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                                        args[_key] = _arguments[_key];
                                    }
                                    return [
                                        4,
                                        _middleware.runSaga.apply(void 0, [
                                            _hooks.showNativeNotification
                                        ].concat(_to_consumable_array(args))).toPromise()
                                    ];
                                case 1:
                                    return [
                                        2,
                                        _state.sent()
                                    ];
                            }
                        });
                    }),
                    showInAppNotification: /*#__PURE__*/ _async_to_generator(function() {
                        var _len, args, _key;
                        var _arguments = arguments;
                        return _ts_generator(this, function(_state) {
                            switch(_state.label){
                                case 0:
                                    for(_len = _arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                                        args[_key] = _arguments[_key];
                                    }
                                    return [
                                        4,
                                        _middleware.runSaga.apply(void 0, [
                                            _hooks.showInAppNotification
                                        ].concat(_to_consumable_array(args))).toPromise()
                                    ];
                                case 1:
                                    return [
                                        2,
                                        _state.sent()
                                    ];
                            }
                        });
                    }),
                    getSnapState: /*#__PURE__*/ _async_to_generator(function() {
                        var _len, args, _key;
                        var _arguments = arguments;
                        return _ts_generator(this, function(_state) {
                            switch(_state.label){
                                case 0:
                                    for(_len = _arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                                        args[_key] = _arguments[_key];
                                    }
                                    return [
                                        4,
                                        _middleware.runSaga.apply(void 0, [
                                            _hooks.getSnapState
                                        ].concat(_to_consumable_array(args))).toPromise()
                                    ];
                                case 1:
                                    return [
                                        2,
                                        _state.sent()
                                    ];
                            }
                        });
                    }),
                    updateSnapState: /*#__PURE__*/ _async_to_generator(function() {
                        var _len, args, _key;
                        var _arguments = arguments;
                        return _ts_generator(this, function(_state) {
                            switch(_state.label){
                                case 0:
                                    for(_len = _arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                                        args[_key] = _arguments[_key];
                                    }
                                    return [
                                        4,
                                        _middleware.runSaga.apply(void 0, [
                                            _hooks.updateSnapState
                                        ].concat(_to_consumable_array(args))).toPromise()
                                    ];
                                case 1:
                                    return [
                                        2,
                                        _state.sent()
                                    ];
                            }
                        });
                    }),
                    clearSnapState: /*#__PURE__*/ _async_to_generator(function() {
                        var _len, args, _key;
                        var _arguments = arguments;
                        return _ts_generator(this, function(_state) {
                            switch(_state.label){
                                case 0:
                                    for(_len = _arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                                        args[_key] = _arguments[_key];
                                    }
                                    return [
                                        4,
                                        (0, _middleware.runSaga)(_hooks.updateSnapState, args[0], null).toPromise()
                                    ];
                                case 1:
                                    return [
                                        2,
                                        _state.sent()
                                    ];
                            }
                        });
                    })
                }));
                subjectMetadataController = new _permissioncontroller.SubjectMetadataController({
                    messenger: controllerMessenger.getRestricted({
                        name: "SubjectMetadataController"
                    }),
                    subjectCacheLimit: 100
                });
                permissionController = new _permissioncontroller.PermissionController({
                    messenger: controllerMessenger.getRestricted({
                        name: "PermissionController",
                        allowedActions: [
                            "ApprovalController:addRequest",
                            "ApprovalController:hasRequest",
                            "ApprovalController:acceptRequest",
                            "ApprovalController:rejectRequest",
                            "SnapController:getPermitted",
                            "SnapController:install",
                            "SubjectMetadataController:getSubjectMetadata"
                        ]
                    }),
                    caveatSpecifications: _object_spread({}, _rpcmethods.caveatSpecifications, _snapscontrollers.endowmentCaveatSpecifications),
                    permissionSpecifications: permissionSpecifications,
                    unrestrictedMethods: _snappermissions.unrestrictedMethods
                });
                engine = new _jsonrpcengine.JsonRpcEngine();
                engine.push((0, _middleware1.createMiscMethodMiddleware)());
                engine.push(permissionController.createPermissionMiddleware({
                    origin: payload
                }));
                engine.push((0, _ethjsonrpcmiddleware.createFetchMiddleware)({
                    btoa: globalThis.btoa,
                    fetch: globalThis.fetch,
                    rpcUrl: _constants.JSON_RPC_ENDPOINT
                }));
                searchParams = new URLSearchParams(window.location.search);
                environmentUrl = (_searchParams_get = searchParams.get("environment")) !== null && _searchParams_get !== void 0 ? _searchParams_get : DEFAULT_ENVIRONMENT_URL;
                executionService = new _snapscontrollers.IframeExecutionService({
                    iframeUrl: new URL(environmentUrl),
                    messenger: controllerMessenger.getRestricted({
                        name: "ExecutionService"
                    }),
                    setupSnapProvider: function(_snapId, rpcStream) {
                        var mux = (0, _snapscontrollers.setupMultiplex)(rpcStream, "snapStream");
                        var stream = mux.createStream("metamask-provider");
                        var providerStream = (0, _jsonrpcmiddlewarestream.createEngineStream)({
                            engine: engine
                        });
                        (0, _pump.default)(stream, providerStream, stream);
                    }
                });
                return [
                    4,
                    (0, _effects.put)((0, _slice.setExecutionService)(executionService))
                ];
            case 2:
                _state.sent();
                return [
                    4,
                    (0, _effects.put)((0, _slice.setPermissionController)(permissionController))
                ];
            case 3:
                _state.sent();
                return [
                    4,
                    (0, _effects.put)((0, _slice.setSubjectMetadataController)(subjectMetadataController))
                ];
            case 4:
                _state.sent();
                return [
                    2
                ];
        }
    });
}
function rebootSaga(param) {
    var payload, snapId, executionService, permissionController, endowments, error;
    return _ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                payload = param.payload;
                return [
                    4,
                    (0, _effects.select)(_configuration.getSnapId)
                ];
            case 1:
                snapId = _state.sent();
                return [
                    4,
                    (0, _effects.select)(_slice.getExecutionService)
                ];
            case 2:
                executionService = _state.sent();
                return [
                    4,
                    (0, _effects.select)(_slice.getPermissionController)
                ];
            case 3:
                permissionController = _state.sent();
                return [
                    4,
                    (0, _effects.call)(_snappermissions.getEndowments, permissionController, snapId)
                ];
            case 4:
                endowments = _state.sent();
                _state.label = 5;
            case 5:
                _state.trys.push([
                    5,
                    9,
                    ,
                    12
                ]);
                return [
                    4,
                    (0, _effects.call)([
                        executionService,
                        "terminateAllSnaps"
                    ])
                ];
            case 6:
                _state.sent();
                return [
                    4,
                    (0, _effects.call)([
                        executionService,
                        "executeSnap"
                    ], {
                        snapId: snapId,
                        sourceCode: payload.toString("utf8"),
                        endowments: endowments
                    })
                ];
            case 7:
                _state.sent();
                return [
                    4,
                    (0, _effects.put)((0, _slice.setStatus)(_slice.SnapStatus.Ok))
                ];
            case 8:
                _state.sent();
                return [
                    3,
                    12
                ];
            case 9:
                error = _state.sent();
                (0, _snapsutils.logError)(error);
                return [
                    4,
                    (0, _effects.put)((0, _console.addError)(error))
                ];
            case 10:
                _state.sent();
                return [
                    4,
                    (0, _effects.put)((0, _slice.setStatus)(_slice.SnapStatus.Error))
                ];
            case 11:
                _state.sent();
                return [
                    3,
                    12
                ];
            case 12:
                return [
                    2
                ];
        }
    });
}
function requestSaga(param) {
    var payload, snapId, executionService, result, error;
    return _ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                payload = param.payload;
                return [
                    4,
                    (0, _effects.put)({
                        type: "".concat(payload.handler, "/setRequest"),
                        payload: payload
                    })
                ];
            case 1:
                _state.sent();
                return [
                    4,
                    (0, _effects.select)(_configuration.getSnapId)
                ];
            case 2:
                snapId = _state.sent();
                return [
                    4,
                    (0, _effects.select)(_slice.getExecutionService)
                ];
            case 3:
                executionService = _state.sent();
                _state.label = 4;
            case 4:
                _state.trys.push([
                    4,
                    7,
                    ,
                    9
                ]);
                return [
                    4,
                    (0, _effects.call)([
                        executionService,
                        "handleRpcRequest"
                    ], snapId, payload)
                ];
            case 5:
                result = _state.sent();
                return [
                    4,
                    (0, _effects.put)({
                        type: "".concat(payload.handler, "/setResponse"),
                        payload: {
                            result: result
                        }
                    })
                ];
            case 6:
                _state.sent();
                return [
                    3,
                    9
                ];
            case 7:
                error = _state.sent();
                return [
                    4,
                    (0, _effects.put)({
                        type: "".concat(payload.handler, "/setResponse"),
                        payload: {
                            error: (0, _rpcerrors.serializeError)(error)
                        }
                    })
                ];
            case 8:
                _state.sent();
                return [
                    3,
                    9
                ];
            case 9:
                return [
                    2
                ];
        }
    });
}
function permissionsSaga(param) {
    var payload, snapId, subjectMetadataController, permissionController, approvedPermissions, error;
    return _ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                payload = param.payload;
                _state.label = 1;
            case 1:
                _state.trys.push([
                    1,
                    7,
                    ,
                    11
                ]);
                return [
                    4,
                    (0, _effects.select)(_configuration.getSnapId)
                ];
            case 2:
                snapId = _state.sent();
                return [
                    4,
                    (0, _effects.select)(_slice.getSubjectMetadataController)
                ];
            case 3:
                subjectMetadataController = _state.sent();
                return [
                    4,
                    (0, _effects.call)([
                        subjectMetadataController,
                        "addSubjectMetadata"
                    ], {
                        origin: snapId,
                        subjectType: _permissioncontroller.SubjectType.Snap
                    })
                ];
            case 4:
                _state.sent();
                return [
                    4,
                    (0, _effects.select)(_slice.getPermissionController)
                ];
            case 5:
                permissionController = _state.sent();
                approvedPermissions = (0, _snapscontrollers.processSnapPermissions)((0, _utils.getSafeJson)(payload.result.initialPermissions));
                // Grant all permissions
                return [
                    4,
                    (0, _effects.call)([
                        permissionController,
                        "grantPermissions"
                    ], {
                        approvedPermissions: approvedPermissions,
                        subject: {
                            origin: snapId
                        },
                        preserveExistingPermissions: false
                    })
                ];
            case 6:
                _state.sent();
                return [
                    3,
                    11
                ];
            case 7:
                error = _state.sent();
                (0, _snapsutils.logError)(error);
                return [
                    4,
                    (0, _effects.put)((0, _console.addError)(error))
                ];
            case 8:
                _state.sent();
                return [
                    4,
                    (0, _effects.put)((0, _slice.setStatus)(_slice.SnapStatus.Error))
                ];
            case 9:
                _state.sent();
                return [
                    4,
                    (0, _effects.put)((0, _manifest.setValid)(_manifest.ManifestStatus.Unknown))
                ];
            case 10:
                _state.sent();
                return [
                    3,
                    11
                ];
            case 11:
                return [
                    2
                ];
        }
    });
}
function simulationSaga() {
    return _ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                return [
                    4,
                    (0, _effects.all)([
                        (0, _effects.takeLatest)(_configuration.setSnapId.type, initSaga),
                        (0, _effects.takeLatest)(_slice.setSourceCode.type, rebootSaga),
                        (0, _effects.takeLatest)(_slice.sendRequest.type, requestSaga),
                        (0, _effects.takeLatest)(_slice.setManifest, permissionsSaga)
                    ])
                ];
            case 1:
                _state.sent();
                return [
                    2
                ];
        }
    });
}
