"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _rpcmethods = require("@metamask/rpc-methods");
var _snapsui = require("@metamask/snaps-ui");
var _reduxsagatestplan = require("redux-saga-test-plan");
var _notifications = require("../notifications");
var _hooks = require("./hooks");
var _slice = require("./slice");
var _mockManifest = require("./test/mockManifest");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var _Notification;
Object.defineProperty(globalThis, "Notification", {
    value: (_Notification = function Notification1() {
        "use strict";
        _class_call_check(this, Notification1);
    }, _define_property(_Notification, "permission", "default"), _define_property(_Notification, "requestPermission", jest.fn().mockResolvedValue("granted")), _Notification)
});
jest.mock("@reduxjs/toolkit", function() {
    return _object_spread_props(_object_spread({}, jest.requireActual("@reduxjs/toolkit")), {
        nanoid: function() {
            return "foo";
        }
    });
});
var snapId = "local:http://localhost:8080";
describe("showDialog", function() {
    it("shows a dialog", /*#__PURE__*/ _async_to_generator(function() {
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        (0, _reduxsagatestplan.expectSaga)(_hooks.showDialog, snapId, _rpcmethods.DialogType.Alert, (0, _snapsui.text)("foo")).withState({
                            simulation: {
                                manifest: _mockManifest.MOCK_MANIFEST_FILE
                            }
                        }).select(_slice.getSnapName).put((0, _slice.showUserInterface)({
                            snapId: snapId,
                            snapName: "@metamask/example-snap",
                            type: _rpcmethods.DialogType.Alert,
                            node: (0, _snapsui.text)("foo")
                        })).dispatch((0, _slice.resolveUserInterface)("foo")).put((0, _slice.closeUserInterface)()).returns("foo").silentRun()
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    }));
});
describe("showNativeNotification", function() {
    it("requests permissions", /*#__PURE__*/ _async_to_generator(function() {
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        (0, _reduxsagatestplan.expectSaga)(_hooks.showNativeNotification, snapId, {
                            type: "native",
                            message: "foo"
                        }).withState({
                            simulation: {
                                manifest: _mockManifest.MOCK_MANIFEST_FILE
                            }
                        }).call([
                            Notification,
                            "requestPermission"
                        ]).returns(null).silentRun()
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    }));
    it("shows a notification if the user did not grant permissions", /*#__PURE__*/ _async_to_generator(function() {
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    jest.spyOn(Notification, "requestPermission").mockResolvedValue("denied");
                    return [
                        4,
                        (0, _reduxsagatestplan.expectSaga)(_hooks.showNativeNotification, snapId, {
                            type: "native",
                            message: "foo"
                        }).withState({
                            simulation: {
                                manifest: _mockManifest.MOCK_MANIFEST_FILE
                            }
                        }).call([
                            Notification,
                            "requestPermission"
                        ]).put((0, _notifications.addNotification)({
                            id: "foo",
                            message: "Unable to show browser notification. Make sure notifications are enabled in your browser settings."
                        })).returns(null).silentRun()
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    }));
});
describe("showInAppNotification", function() {
    it("shows a notification", /*#__PURE__*/ _async_to_generator(function() {
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        (0, _reduxsagatestplan.expectSaga)(_hooks.showInAppNotification, snapId, {
                            type: "inApp",
                            message: "foo"
                        }).withState({
                            simulation: {
                                requestId: "bar"
                            }
                        }).put((0, _notifications.addNotification)({
                            id: "bar",
                            message: "foo"
                        })).returns(null).silentRun()
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    }));
});
describe("updateSnapState", function() {
    it("puts the new snap state", /*#__PURE__*/ _async_to_generator(function() {
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        (0, _reduxsagatestplan.expectSaga)(_hooks.updateSnapState, snapId, "foo").withState({
                            simulation: {
                                snapState: null
                            }
                        }).put((0, _slice.setSnapState)("foo")).silentRun()
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    }));
});
describe("getSnapState", function() {
    it("returns the selected snap state", /*#__PURE__*/ _async_to_generator(function() {
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        (0, _reduxsagatestplan.expectSaga)(_hooks.getSnapState, snapId).withState({
                            simulation: {
                                snapState: "foo"
                            }
                        }).select(_slice.getSnapStateSelector).returns("foo").silentRun()
                    ];
                case 1:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    }));
});
