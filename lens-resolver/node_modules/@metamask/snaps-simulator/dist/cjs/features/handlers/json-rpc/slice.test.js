"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _slice = require("./slice");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
describe("jsonRpc", function() {
    describe("setJsonRpcRequest", function() {
        it("sets the request", function() {
            var result = (0, _slice.jsonRpc)(_slice.INITIAL_STATE, (0, _slice.setJsonRpcRequest)({
                origin: "foo"
            }));
            expect(result.request).toStrictEqual({
                origin: "foo"
            });
        });
        it("pushes the request to history", function() {
            var result = (0, _slice.jsonRpc)(_slice.INITIAL_STATE, (0, _slice.setJsonRpcRequest)({
                origin: "foo"
            }));
            expect(result.history).toStrictEqual([
                {
                    date: expect.any(Date),
                    request: {
                        origin: "foo"
                    }
                }
            ]);
        });
    });
    describe("setJsonRpcRequestFromHistory", function() {
        it("sets the request", function() {
            var result = (0, _slice.jsonRpc)(_slice.INITIAL_STATE, (0, _slice.setJsonRpcRequestFromHistory)({
                origin: "foo"
            }));
            expect(result.request).toStrictEqual({
                origin: "foo"
            });
        });
        it("does not push to history", function() {
            var result = (0, _slice.jsonRpc)(_slice.INITIAL_STATE, (0, _slice.setJsonRpcRequestFromHistory)({
                origin: "foo"
            }));
            expect(result.history).toStrictEqual([]);
        });
    });
    describe("setJsonRpcResponse", function() {
        it("sets the response", function() {
            var result = (0, _slice.jsonRpc)(_slice.INITIAL_STATE, (0, _slice.setJsonRpcResponse)("foo"));
            expect(result.response).toBe("foo");
        });
    });
    describe("clearResponse", function() {
        it("clears the response", function() {
            var result = (0, _slice.jsonRpc)(_object_spread_props(_object_spread({}, _slice.INITIAL_STATE), {
                response: {
                    jsonrpc: "2.0",
                    id: null,
                    result: "foo"
                }
            }), (0, _slice.clearJsonRpcResponse)());
            expect(result.response).toBeNull();
        });
    });
});
