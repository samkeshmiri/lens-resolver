"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "PlayButton", {
    enumerable: true,
    get: function() {
        return PlayButton;
    }
});
var _jsxruntime = require("react/jsx-runtime");
var _react = require("@chakra-ui/react");
var _utils = require("@metamask/utils");
var _react1 = require("react");
var _components = require("../../../components");
var _hooks = require("../../../hooks");
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
var PlayButtonState;
(function(PlayButtonState) {
    PlayButtonState["Ready"] = "ready";
    PlayButtonState["Disabled"] = "disabled";
    PlayButtonState["Loading"] = "loading";
    PlayButtonState["Success"] = "success";
    PlayButtonState["Error"] = "error";
})(PlayButtonState || (PlayButtonState = {}));
var PlayButton = function() {
    var handler = (0, _hooks.useHandler)();
    var response = (0, _hooks.useSelector)(function(state) {
        return state[handler].response;
    });
    var isError = response && (0, _utils.hasProperty)(response, "error");
    var isSuccess = response && !(0, _utils.hasProperty)(response, "error");
    var isLoading = (0, _hooks.useSelector)(function(state) {
        return state[handler].pending;
    });
    var _useState = _sliced_to_array((0, _react1.useState)(PlayButtonState.Ready), 2), state = _useState[0], setState = _useState[1];
    (0, _react1.useEffect)(function() {
        if (isLoading) {
            setState(PlayButtonState.Loading);
        } else if (isError) {
            setState(PlayButtonState.Error);
        } else if (isSuccess) {
            setState(PlayButtonState.Success);
        }
    }, [
        isLoading,
        isError,
        isSuccess
    ]);
    // eslint-disable-next-line consistent-return
    (0, _react1.useEffect)(function() {
        if (state === PlayButtonState.Success || state === PlayButtonState.Error) {
            var timeout = setTimeout(function() {
                setState(PlayButtonState.Ready);
            }, 1500);
            return function() {
                return clearTimeout(timeout);
            };
        }
    }, [
        state
    ]);
    var _obj;
    var icons = (_obj = {}, _define_property(_obj, PlayButtonState.Ready, "play"), _define_property(_obj, PlayButtonState.Disabled, "playMuted"), _define_property(_obj, PlayButtonState.Success, "playSuccess"), _define_property(_obj, PlayButtonState.Error, "playError"), _obj);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.Button, {
        variant: "unstyled",
        type: "submit",
        minWidth: "0",
        form: "request-form",
        "data-testid": "send-request-button",
        disabled: state !== PlayButtonState.Ready,
        children: [
            state !== PlayButtonState.Loading && /*#__PURE__*/ (0, _jsxruntime.jsx)(_components.Icon, {
                icon: icons[state],
                width: "24px",
                "data-testid": "send-request-button-done"
            }),
            state === PlayButtonState.Loading && /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Box, {
                bg: "info.default",
                borderRadius: "50%",
                width: "24px",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Spinner, {
                    size: "xs",
                    color: "white"
                })
            })
        ]
    });
};
