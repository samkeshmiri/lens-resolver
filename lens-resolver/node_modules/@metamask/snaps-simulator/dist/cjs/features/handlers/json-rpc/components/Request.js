"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Request", {
    enumerable: true,
    get: function() {
        return Request;
    }
});
var _jsxruntime = require("react/jsx-runtime");
var _react = require("@chakra-ui/react");
var _snapsutils = require("@metamask/snaps-utils");
var _reacthookform = require("react-hook-form");
var _components = require("../../../../components");
var _hooks = require("../../../../hooks");
var _simulation = require("../../../simulation");
var _schema = require("../schema");
var _slice = require("../slice");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
var Request = function() {
    var _errors_origin;
    var _useSelector = (0, _hooks.useSelector)(_slice.getJsonRpcRequest), request = _useSelector.request, origin = _useSelector.origin;
    var _useForm = (0, _reacthookform.useForm)({
        defaultValues: {
            origin: origin !== null && origin !== void 0 ? origin : "",
            request: request ? JSON.stringify(request, null, 2) : _schema.SAMPLE_JSON_RPC_REQUEST
        }
    }), handleSubmit = _useForm.handleSubmit, register = _useForm.register, control = _useForm.control, errors = _useForm.formState.errors;
    var dispatch = (0, _hooks.useDispatch)();
    var onSubmit = function(data) {
        dispatch((0, _simulation.sendRequest)({
            origin: data.origin,
            handler: _snapsutils.HandlerType.OnRpcRequest,
            request: JSON.parse(data.request)
        }));
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.Flex, {
        as: "form",
        flexDirection: "column",
        flex: "1",
        /* eslint-disable-next-line @typescript-eslint/no-misused-promises */ onSubmit: handleSubmit(onSubmit),
        id: "request-form",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.FormControl, {
                isInvalid: Boolean(errors.origin),
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.FormLabel, {
                        htmlFor: "origin",
                        children: "Origin"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Input, _object_spread({
                        id: "origin",
                        placeholder: "metamask.io",
                        fontFamily: "code",
                        "data-testid": "request-origin"
                    }, register("origin"))),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.FormErrorMessage, {
                        children: (_errors_origin = errors.origin) === null || _errors_origin === void 0 ? void 0 : _errors_origin.message
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.FormControl, {
                isInvalid: Boolean(errors.request),
                display: "flex",
                flexDirection: "column",
                flex: "1",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.FormLabel, {
                        htmlFor: "request",
                        "data-testid": "request-json",
                        children: "Request"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_reacthookform.Controller, {
                        control: control,
                        name: "request",
                        render: function(param) {
                            var _param_field = param.field, onChange = _param_field.onChange, value = _param_field.value;
                            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_components.Editor, {
                                onChange: onChange,
                                value: value
                            });
                        }
                    })
                ]
            })
        ]
    });
};
