"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "UserInterface", {
    enumerable: true,
    get: function() {
        return UserInterface;
    }
});
var _jsxruntime = require("react/jsx-runtime");
var _react = require("@chakra-ui/react");
var _rpcmethods = require("@metamask/rpc-methods");
var _react1 = require("react");
var _components = require("../../../components");
var _hooks = require("../../../hooks");
var _simulation = require("../../simulation");
var UserInterface = function() {
    var dispatch = (0, _hooks.useDispatch)();
    var ui = (0, _hooks.useSelector)(_simulation.getUserInterface);
    var tab = (0, _react.useTabsContext)();
    (0, _react1.useEffect)(function() {
        tab.setSelectedIndex(1);
    }, [
        tab
    ]);
    if (!ui) {
        return null;
    }
    var snapName = ui.snapName, snapId = ui.snapId, type = ui.type, node = ui.node;
    switch(type){
        case _rpcmethods.DialogType.Alert:
            {
                var handleClose = function() {
                    dispatch((0, _simulation.resolveUserInterface)(null));
                };
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_components.AlertDialog, {
                    snapName: snapName,
                    snapId: snapId,
                    node: node,
                    onClose: handleClose
                });
            }
        case _rpcmethods.DialogType.Confirmation:
            {
                var handleCancel = function() {
                    dispatch((0, _simulation.resolveUserInterface)(false));
                };
                var handleApprove = function() {
                    dispatch((0, _simulation.resolveUserInterface)(true));
                };
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_components.ConfirmationDialog, {
                    snapName: snapName,
                    snapId: snapId,
                    node: node,
                    onCancel: handleCancel,
                    onApprove: handleApprove
                });
            }
        case _rpcmethods.DialogType.Prompt:
            {
                var handleCancel1 = function() {
                    dispatch((0, _simulation.resolveUserInterface)(null));
                };
                var handleSubmit = function(value) {
                    dispatch((0, _simulation.resolveUserInterface)(value));
                };
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_components.PromptDialog, {
                    snapName: snapName,
                    snapId: snapId,
                    node: node,
                    onCancel: handleCancel1,
                    onSubmit: handleSubmit
                });
            }
        default:
            return null;
    }
};
