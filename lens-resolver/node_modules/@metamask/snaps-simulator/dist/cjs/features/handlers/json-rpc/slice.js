"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    INITIAL_STATE: function() {
        return INITIAL_STATE;
    },
    jsonRpc: function() {
        return jsonRpc;
    },
    setJsonRpcRequest: function() {
        return setJsonRpcRequest;
    },
    setJsonRpcRequestFromHistory: function() {
        return setJsonRpcRequestFromHistory;
    },
    setJsonRpcResponse: function() {
        return setJsonRpcResponse;
    },
    clearJsonRpcResponse: function() {
        return clearJsonRpcResponse;
    },
    getJsonRpcRequest: function() {
        return getJsonRpcRequest;
    }
});
var _snapsutils = require("@metamask/snaps-utils");
var _toolkit = require("@reduxjs/toolkit");
var _slice = require("../slice");
var INITIAL_STATE = {
    request: {
        origin: ""
    },
    response: null,
    history: []
};
var slice = (0, _slice.createHandlerSlice)({
    name: _snapsutils.HandlerType.OnRpcRequest,
    initialState: INITIAL_STATE
});
var jsonRpc = slice.reducer;
var _slice_actions = slice.actions;
var setJsonRpcRequest = _slice_actions.setRequest, setJsonRpcRequestFromHistory = _slice_actions.setRequestFromHistory, setJsonRpcResponse = _slice_actions.setResponse, clearJsonRpcResponse = _slice_actions.clearResponse;
var getJsonRpcRequest = (0, _toolkit.createSelector)(function(state) {
    return state[_snapsutils.HandlerType.OnRpcRequest];
}, function(state) {
    return state.request;
});
