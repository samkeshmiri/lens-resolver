"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Console", {
    enumerable: true,
    get: function() {
        return Console;
    }
});
var _jsxruntime = require("react/jsx-runtime");
var _react = require("@chakra-ui/react");
var _react1 = require("react");
var _components = require("../../components");
var _hooks = require("../../hooks");
var _ConsoleContent = require("./ConsoleContent");
var _slice = require("./slice");
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
var Console = function() {
    var ref = (0, _react1.useRef)(null);
    var _useState = _sliced_to_array((0, _react1.useState)(false), 2), collapsed = _useState[0], setCollapsed = _useState[1];
    var entries = (0, _hooks.useSelector)(_slice.getConsoleEntries);
    (0, _react1.useEffect)(function() {
        if (ref.current) {
            // TODO: Maybe not scroll if the user is scrolled up?
            ref.current.scrollTop = ref.current.scrollHeight;
        }
    }, [
        entries
    ]);
    var handleToggleConsole = function() {
        setCollapsed(function(state) {
            return !state;
        });
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Flex, {
        borderTop: "1px solid",
        borderColor: "border.default",
        height: collapsed ? "47px" : "266px",
        transition: "height 0.5s",
        flexDirection: "column",
        overflow: "hidden",
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.Tabs, {
            display: "flex",
            flexDirection: "column",
            flex: "1",
            overflow: "hidden",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.TabList, {
                    pr: "2",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Tab, {
                            children: "Console"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Flex, {
                            alignItems: "center",
                            ml: "auto",
                            onClick: handleToggleConsole,
                            _hover: {
                                cursor: "pointer"
                            },
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_components.Icon, {
                                icon: "arrowDown",
                                height: "14px",
                                transform: collapsed ? "rotate(180deg)" : "rotate(0deg)"
                            })
                        })
                    ]
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.TabPanels, {
                    display: "flex",
                    flexDirection: "column",
                    flex: "1",
                    overflow: "hidden",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.TabPanel, {
                        ref: ref,
                        display: "flex",
                        flexDirection: "column",
                        flex: "1",
                        overflowY: "auto",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ConsoleContent.ConsoleContent, {})
                    })
                })
            ]
        })
    });
};
