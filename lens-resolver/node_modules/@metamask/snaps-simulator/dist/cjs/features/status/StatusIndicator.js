"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "StatusIndicator", {
    enumerable: true,
    get: function() {
        return StatusIndicator;
    }
});
var _jsxruntime = require("react/jsx-runtime");
var _react = require("@chakra-ui/react");
var _snapsutils = require("@metamask/snaps-utils");
var _react1 = require("react");
var _components = require("../../components");
var _hooks = require("../../hooks");
var _configuration = require("../configuration");
var _simulation = require("../simulation");
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
var StatusIndicator = function() {
    var snapId = (0, _hooks.useSelector)(_configuration.getSnapId);
    var status = (0, _hooks.useSelector)(_simulation.getStatus);
    var dispatch = (0, _hooks.useDispatch)();
    var _useState = _sliced_to_array((0, _react1.useState)(snapId), 2), prettyUrl = _useState[0], setPrettyUrl = _useState[1];
    (0, _react1.useEffect)(function() {
        if (!snapId) {
            return;
        }
        try {
            var stripped = (0, _snapsutils.stripSnapPrefix)(snapId);
            if ((0, _snapsutils.getSnapPrefix)(snapId) === _snapsutils.SnapIdPrefixes.npm) {
                setPrettyUrl(stripped);
                return;
            }
            var url = new URL(stripped);
            setPrettyUrl(url.host);
        } catch (e) {
        // Ignore.
        }
    }, [
        snapId
    ]);
    var color = // eslint-disable-next-line no-nested-ternary
    status === _simulation.SnapStatus.Ok ? "text.success" : status === _simulation.SnapStatus.Error ? "text.error" : "info.default";
    var handleClick = function() {
        dispatch((0, _configuration.openConfigurationModal)());
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.Flex, {
        alignItems: "center",
        gap: "2",
        onClick: handleClick,
        cursor: "pointer",
        _hover: {
            p: {
                color: color
            }
        },
        children: [
            status === _simulation.SnapStatus.Ok && /*#__PURE__*/ (0, _jsxruntime.jsx)(_components.Icon, {
                icon: "dot",
                width: "8px",
                "data-testid": "status-ok"
            }),
            status === _simulation.SnapStatus.Loading && /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Spinner, {
                color: color,
                size: "xs"
            }),
            status === _simulation.SnapStatus.Error && /*#__PURE__*/ (0, _jsxruntime.jsx)(_components.Icon, {
                icon: "errorTriangle",
                width: "16px",
                "data-testid": "status-error"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Text, {
                fontWeight: "500",
                fontSize: "sm",
                color: "text.muted",
                transition: "color ease 0.2s",
                children: prettyUrl
            })
        ]
    });
};
