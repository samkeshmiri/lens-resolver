"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    validationSaga: function() {
        return validationSaga;
    },
    manifestSaga: function() {
        return manifestSaga;
    }
});
var _effects = require("redux-saga/effects");
var _simulation = require("../simulation");
var _slice = require("./slice");
var _validators = require("./validators");
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function validationSaga(param) {
    var manifest, sourceCode, icon, results, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step_value, validator, name, manifestName, result, message, isValid, err, isValid1, status;
    return _ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                manifest = param.payload;
                return [
                    4,
                    (0, _effects.select)(_simulation.getSourceCode)
                ];
            case 1:
                sourceCode = _state.sent();
                return [
                    4,
                    (0, _effects.select)(_simulation.getIcon)
                ];
            case 2:
                icon = _state.sent();
                results = [];
                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                _state.label = 3;
            case 3:
                _state.trys.push([
                    3,
                    8,
                    9,
                    10
                ]);
                _iterator = _validators.validators[Symbol.iterator]();
                _state.label = 4;
            case 4:
                if (!!(_iteratorNormalCompletion = (_step = _iterator.next()).done)) return [
                    3,
                    7
                ];
                _step_value = _step.value, validator = _step_value.validator, name = _step_value.name, manifestName = _step_value.manifestName;
                return [
                    4,
                    (0, _effects.call)(validator, manifest, {
                        sourceCode: sourceCode,
                        icon: icon
                    })
                ];
            case 5:
                result = _state.sent();
                message = typeof result === "string" ? result : undefined;
                isValid = typeof result === "boolean" ? result : false;
                results.push({
                    name: name,
                    manifestName: manifestName,
                    isValid: isValid,
                    message: message
                });
                _state.label = 6;
            case 6:
                _iteratorNormalCompletion = true;
                return [
                    3,
                    4
                ];
            case 7:
                return [
                    3,
                    10
                ];
            case 8:
                err = _state.sent();
                _didIteratorError = true;
                _iteratorError = err;
                return [
                    3,
                    10
                ];
            case 9:
                try {
                    if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
                return [
                    7
                ];
            case 10:
                isValid1 = results.every(function(param) {
                    var valid = param.isValid;
                    return valid;
                });
                status = isValid1 ? _slice.ManifestStatus.Valid : _slice.ManifestStatus.Invalid;
                return [
                    4,
                    (0, _effects.put)((0, _slice.setResults)(results))
                ];
            case 11:
                _state.sent();
                return [
                    4,
                    (0, _effects.put)((0, _slice.setValid)(status))
                ];
            case 12:
                _state.sent();
                return [
                    2
                ];
        }
    });
}
function manifestSaga() {
    return _ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                return [
                    4,
                    (0, _effects.all)([
                        (0, _effects.takeLatest)(_slice.validateManifest, validationSaga)
                    ])
                ];
            case 1:
                _state.sent();
                return [
                    2
                ];
        }
    });
}
