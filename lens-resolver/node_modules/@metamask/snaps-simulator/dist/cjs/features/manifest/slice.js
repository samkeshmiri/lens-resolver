"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ManifestStatus: function() {
        return ManifestStatus;
    },
    INITIAL_MANIFEST_STATE: function() {
        return INITIAL_MANIFEST_STATE;
    },
    validateManifest: function() {
        return validateManifest;
    },
    setValid: function() {
        return setValid;
    },
    setResults: function() {
        return setResults;
    },
    manifest: function() {
        return manifest;
    },
    getManifestStatus: function() {
        return getManifestStatus;
    },
    getManifestResults: function() {
        return getManifestResults;
    }
});
var _toolkit = require("@reduxjs/toolkit");
var ManifestStatus;
(function(ManifestStatus) {
    ManifestStatus["Valid"] = "valid";
    ManifestStatus["Invalid"] = "invalid";
    ManifestStatus["Unknown"] = "unknown";
})(ManifestStatus || (ManifestStatus = {}));
var INITIAL_MANIFEST_STATE = {
    valid: ManifestStatus.Unknown,
    results: []
};
var slice = (0, _toolkit.createSlice)({
    name: "manifest",
    initialState: INITIAL_MANIFEST_STATE,
    reducers: {
        setValid: function setValid(state, action) {
            state.valid = action.payload;
        },
        setResults: function setResults(state, action) {
            state.results = action.payload;
        }
    }
});
var validateManifest = (0, _toolkit.createAction)("".concat(slice.name, "/validateManifest"));
var _slice_actions = slice.actions;
var setValid = _slice_actions.setValid, setResults = _slice_actions.setResults;
var manifest = slice.reducer;
var getManifestStatus = (0, _toolkit.createSelector)(function(state) {
    return state.manifest;
}, function(state) {
    return state.valid;
});
var getManifestResults = (0, _toolkit.createSelector)(function(state) {
    return state.manifest;
}, function(state) {
    return state.results;
});
