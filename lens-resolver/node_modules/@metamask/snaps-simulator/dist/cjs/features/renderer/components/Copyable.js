"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Copyable", {
    enumerable: true,
    get: function() {
        return Copyable;
    }
});
var _jsxruntime = require("react/jsx-runtime");
var _react = require("@chakra-ui/react");
var _snapsui = require("@metamask/snaps-ui");
var _utils = require("@metamask/utils");
var _react1 = require("react");
var _components = require("../../../components");
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
var Copyable = function(param) {
    var node = param.node, id = param.id;
    var _useState = _sliced_to_array((0, _react1.useState)(false), 2), copied = _useState[0], setCopied = _useState[1];
    (0, _utils.assert)((0, _snapsui.isComponent)(node), "Expected value to be a valid UI component.");
    (0, _utils.assert)(node.type === "copyable", "Expected value to be a copyable component.");
    var handleClick = function() {
        navigator.clipboard.writeText(node.value).then(function() {
            setCopied(true);
        }).catch(function(error) {
            // eslint-disable-next-line no-console
            console.error(error);
        });
    };
    // eslint-disable-next-line consistent-return
    (0, _react1.useEffect)(function() {
        if (copied) {
            var timeout = setTimeout(function() {
                setCopied(false);
            }, 2000);
            return function() {
                return clearTimeout(timeout);
            };
        }
    }, [
        copied
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.Flex, {
        padding: "2",
        borderRadius: "md",
        background: "background.alternative",
        justifyContent: "space-between",
        marginBottom: "1",
        wordBreak: "break-word",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Text, {
                fontFamily: "custom",
                color: "text.alternative",
                fontSize: "sm",
                lineHeight: "157%",
                children: node.value
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_components.Icon, {
                icon: copied ? "copied" : "copy",
                width: "15px",
                cursor: "pointer",
                onClick: handleClick
            })
        ]
    }, "".concat(id, "-copyable"));
};
