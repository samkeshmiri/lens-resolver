"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DEFAULT_SRP: function() {
        return DEFAULT_SRP;
    },
    INITIAL_CONFIGURATION_STATE: function() {
        return INITIAL_CONFIGURATION_STATE;
    },
    openConfigurationModal: function() {
        return openConfigurationModal;
    },
    setOpen: function() {
        return setOpen;
    },
    setSnapId: function() {
        return setSnapId;
    },
    setSnapVersion: function() {
        return setSnapVersion;
    },
    setSrp: function() {
        return setSrp;
    },
    setSesEnabled: function() {
        return setSesEnabled;
    },
    configuration: function() {
        return configuration;
    },
    getOpen: function() {
        return getOpen;
    },
    getSnapId: function() {
        return getSnapId;
    },
    getSnapVersion: function() {
        return getSnapVersion;
    },
    getSrp: function() {
        return getSrp;
    },
    getSesEnabled: function() {
        return getSesEnabled;
    }
});
var _toolkit = require("@reduxjs/toolkit");
var DEFAULT_SRP = "test test test test test test test test test test test ball";
var INITIAL_CONFIGURATION_STATE = {
    open: false,
    snapId: "local:http://localhost:8080",
    snapVersion: undefined,
    srp: DEFAULT_SRP,
    sesEnabled: true
};
var slice = (0, _toolkit.createSlice)({
    name: "configuration",
    initialState: INITIAL_CONFIGURATION_STATE,
    reducers: {
        openConfigurationModal: function openConfigurationModal(state) {
            state.open = true;
        },
        setOpen: function setOpen(state, action) {
            state.open = action.payload;
        },
        setSnapId: function setSnapId(state, action) {
            state.snapId = action.payload;
        },
        setSnapVersion: function setSnapVersion(state, action) {
            state.snapVersion = action.payload;
        },
        setSrp: function setSrp(state, action) {
            state.srp = action.payload;
        },
        setSesEnabled: function setSesEnabled(state, action) {
            state.sesEnabled = action.payload;
        }
    }
});
var _slice_actions = slice.actions;
var openConfigurationModal = _slice_actions.openConfigurationModal, setOpen = _slice_actions.setOpen, setSnapId = _slice_actions.setSnapId, setSnapVersion = _slice_actions.setSnapVersion, setSrp = _slice_actions.setSrp, setSesEnabled = _slice_actions.setSesEnabled;
var configuration = slice.reducer;
var getOpen = (0, _toolkit.createSelector)(function(state) {
    return state.configuration;
}, function(state) {
    return state.open;
});
var getSnapId = (0, _toolkit.createSelector)(function(state) {
    return state.configuration;
}, function(state) {
    return state.snapId;
});
var getSnapVersion = (0, _toolkit.createSelector)(function(state) {
    return state.configuration;
}, function(state) {
    return state.snapVersion;
});
var getSrp = (0, _toolkit.createSelector)(function(state) {
    return state.configuration;
}, function(state) {
    return state.srp;
});
var getSesEnabled = (0, _toolkit.createSelector)(function(state) {
    return state.configuration;
}, function(state) {
    return state.sesEnabled;
});
