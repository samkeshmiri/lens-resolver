"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Configuration", {
    enumerable: true,
    get: function() {
        return Configuration;
    }
});
var _jsxruntime = require("react/jsx-runtime");
var _react = require("@chakra-ui/react");
var _snapscontrollers = require("@metamask/snaps-controllers");
var _snapsutils = require("@metamask/snaps-utils");
var _react1 = require("react");
var _hooks = require("../../hooks");
var _slice = require("./slice");
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var Configuration = function() {
    var dispatch = (0, _hooks.useDispatch)();
    var snapUrl = (0, _hooks.useSelector)(_slice.getSnapId);
    var snapVersion = (0, _hooks.useSelector)(_slice.getSnapVersion);
    var srp = (0, _hooks.useSelector)(_slice.getSrp);
    var sesEnabled = (0, _hooks.useSelector)(_slice.getSesEnabled);
    var isOpen = (0, _hooks.useSelector)(_slice.getOpen);
    var _useColorMode = (0, _react.useColorMode)(), colorMode = _useColorMode.colorMode, toggleColorMode = _useColorMode.toggleColorMode;
    var _useState = _sliced_to_array((0, _react1.useState)((0, _snapsutils.stripSnapPrefix)(snapUrl)), 2), snapIdInput = _useState[0], setSnapIdInput = _useState[1];
    var _useState1 = _sliced_to_array((0, _react1.useState)((0, _snapsutils.getSnapPrefix)(snapUrl).slice(0, -1)), 2), snapIdPrefix = _useState1[0], setSnapIdPrefix = _useState1[1];
    var _useState2 = _sliced_to_array((0, _react1.useState)([]), 2), npmVersions = _useState2[0], setNpmVersions = _useState2[1];
    var _useState3 = _sliced_to_array((0, _react1.useState)(snapVersion), 2), selectedNpmVersion = _useState3[0], setSelectedNpmVersion = _useState3[1];
    var isNPM = snapIdPrefix === _snapsutils.SnapIdPrefixes.npm.slice(0, -1);
    var handleClose = function() {
        dispatch((0, _slice.setSnapVersion)(selectedNpmVersion));
        dispatch((0, _slice.setSnapId)("".concat(snapIdPrefix, ":").concat(snapIdInput)));
        dispatch((0, _slice.setOpen)(false));
    };
    var handleSnapPrefixChange = function(event) {
        setSnapIdPrefix(event.currentTarget.value);
    };
    var handleSnapUrlChange = function(event) {
        setSnapIdInput(event.currentTarget.value);
    };
    var handleNpmVersionChange = function(event) {
        setSelectedNpmVersion(event.currentTarget.value);
    };
    (0, _react1.useEffect)(function() {
        var cancelled = false;
        function fetchNpmVersions() {
            return _fetchNpmVersions.apply(this, arguments);
        }
        function _fetchNpmVersions() {
            _fetchNpmVersions = /**
     * Fetches the versions of the NPM snap.
     */ _async_to_generator(function() {
                var metadata, versions;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            return [
                                4,
                                (0, _snapscontrollers.fetchNpmMetadata)(snapIdInput, new URL(_snapscontrollers.DEFAULT_NPM_REGISTRY), fetch.bind(globalThis))
                            ];
                        case 1:
                            metadata = _state.sent();
                            versions = Object.keys(metadata.versions).reverse();
                            if (!cancelled) {
                                setNpmVersions(versions);
                            }
                            return [
                                2
                            ];
                    }
                });
            });
            return _fetchNpmVersions.apply(this, arguments);
        }
        // Reset version state if the inputs are changed
        setSelectedNpmVersion(undefined);
        setNpmVersions([]);
        // If input is an NPM snap, try to repopulate the version state
        if (isNPM) {
            fetchNpmVersions().catch(function(error) {
                // eslint-disable-next-line no-console
                console.error(error);
            });
        }
        return function() {
            cancelled = true;
        };
    }, [
        snapIdInput,
        snapIdPrefix,
        isNPM
    ]);
    // const handleSrpChange = (event: FormEvent<HTMLTextAreaElement>) => {
    //   dispatch(setSrp(event.currentTarget.value));
    // };
    //
    // const handleSesToggle = () => {
    //   dispatch(setSesEnabled(!sesEnabled));
    // };
    var handleDarkModeToggle = function() {
        toggleColorMode();
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.Modal, {
        isOpen: isOpen,
        onClose: handleClose,
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.ModalOverlay, {}),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.ModalContent, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.ModalHeader, {
                        pb: "0",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Text, {
                                fontSize: "md",
                                children: "Configure environment"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Text, {
                                fontSize: "sm",
                                color: "#535A61",
                                fontWeight: "400",
                                children: "Settings and variables to setup the simulation context."
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Divider, {
                        my: "4"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.ModalBody, {
                        pt: "0",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.FormControl, {
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.FormLabel, {
                                    children: "Snap location"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.InputGroup, {
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.InputLeftAddon, {
                                            px: "0",
                                            bg: "chakra-body-bg",
                                            borderColor: "border.default",
                                            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.Select, {
                                                border: "none",
                                                onChange: handleSnapPrefixChange,
                                                value: snapIdPrefix,
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                                        value: "local",
                                                        children: "local"
                                                    }),
                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                                        value: "npm",
                                                        children: "npm"
                                                    })
                                                ]
                                            })
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Input, {
                                            type: "text",
                                            value: snapIdInput,
                                            onChange: handleSnapUrlChange,
                                            "data-testid": "snap-id-input"
                                        }),
                                        isNPM && npmVersions.length > 0 && /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.InputRightAddon, {
                                            px: "0",
                                            bg: "chakra-body-bg",
                                            borderColor: "border.default",
                                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Select, {
                                                border: "none",
                                                onChange: handleNpmVersionChange,
                                                value: selectedNpmVersion,
                                                children: npmVersions.map(function(version) {
                                                    return /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                                        value: version,
                                                        children: version
                                                    }, "version-".concat(version));
                                                })
                                            })
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.FormLabel, {
                                    children: "Environment SRP"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Textarea, {
                                    value: srp,
                                    readOnly: true,
                                    color: "text.muted",
                                    fontSize: "sm"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.HStack, {
                                    alignItems: "center",
                                    justifyContent: "space-between",
                                    mb: "4",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.FormLabel, {
                                            mb: "0",
                                            htmlFor: "ses-switch",
                                            children: "Secure EcmaScript (SES)"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Switch, {
                                            id: "ses-switch",
                                            size: "lg",
                                            isChecked: sesEnabled,
                                            // onChange={handleSesToggle}
                                            readOnly: true,
                                            colorScheme: "gray"
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.HStack, {
                                    alignItems: "center",
                                    justifyContent: "space-between",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.FormLabel, {
                                            mb: "0",
                                            htmlFor: "darkmode-switch",
                                            children: "Dark Mode"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Switch, {
                                            id: "darkmode-switch",
                                            size: "lg",
                                            isChecked: colorMode === "dark",
                                            onChange: handleDarkModeToggle,
                                            colorScheme: "gray"
                                        })
                                    ]
                                })
                            ]
                        })
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Divider, {
                        my: "4"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.ModalFooter, {
                        pb: "6",
                        pt: "2",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Button, {
                            variant: "primary",
                            fontFamily: "default",
                            fontWeight: "semibold",
                            fontSize: "sm",
                            width: "100%",
                            onClick: handleClose,
                            children: "Apply config"
                        })
                    })
                ]
            })
        ]
    });
};
