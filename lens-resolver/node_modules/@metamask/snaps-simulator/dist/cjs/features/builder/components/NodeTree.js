"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "NodeTree", {
    enumerable: true,
    get: function() {
        return NodeTree;
    }
});
var _jsxruntime = require("react/jsx-runtime");
var _react = require("@chakra-ui/react");
var _reactdndtreeview = require("@minoru/react-dnd-treeview");
var _react1 = require("react");
var _Node = require("./Node");
var _Start = require("./Start");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
var NodeTree = function(param) {
    var items = param.items, setItems = param.setItems;
    var ref = (0, _react1.useRef)(null);
    var handleChange = function(node, value) {
        // TODO: This code is a mess.
        var newItems = items.map(function(item) {
            if (item.id === node.id) {
                return _object_spread_props(_object_spread({}, item), {
                    data: {
                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion, @typescript-eslint/no-unnecessary-type-assertion
                        type: item.data.type,
                        value: value
                    },
                    text: value
                });
            }
            return item;
        });
        setItems(newItems);
    };
    var handleDrop = function(newItems) {
        setItems(newItems);
    };
    var handleClose = function(node) {
        var newItems = items.filter(function(item) {
            return item.id !== node.id && item.parent !== node.id;
        });
        setItems(newItems);
    };
    var handleRender = function(node, param) {
        var depth = param.depth, isDragging = param.isDragging;
        if (items.length <= 1) {
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Start.Start, {});
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Node.Node, {
            node: node,
            depth: depth,
            onChange: handleChange,
            onClose: handleClose,
            isDragging: isDragging
        });
    };
    var handleRenderPlaceholder = function() {
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Box, {
            width: "100%",
            height: "20px"
        });
    };
    var handleCanDrag = function(node) {
        if (node) {
            return node.id >= 2;
        }
        return false;
    };
    var handleCanDrop = function(_tree, param) {
        var dropTarget = param.dropTarget, dropTargetId = param.dropTargetId;
        if (dropTargetId) {
            var _dropTarget;
            return ((_dropTarget = dropTarget) === null || _dropTarget === void 0 ? void 0 : _dropTarget.droppable) && dropTargetId > 0;
        }
        return false;
    };
    (0, _react1.useEffect)(function() {
        if (ref.current) {
            ref.current.openAll();
        }
    }, [
        items,
        ref
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Flex, {
        border: "1px solid",
        borderColor: "border.default",
        borderRadius: "lg",
        flex: "1",
        sx: {
            // eslint-disable-next-line @typescript-eslint/naming-convention
            "& > ul": {
                display: "flex",
                flexDirection: "column",
                flex: 1,
                marginY: "4",
                // eslint-disable-next-line @typescript-eslint/naming-convention
                "& > li": {
                    display: "flex",
                    flexDirection: "column",
                    flex: 1,
                    marginTop: "0"
                }
            },
            ul: {
                listStyleType: "none"
            },
            // eslint-disable-next-line @typescript-eslint/naming-convention
            li: {
                marginTop: "2"
            }
        },
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactdndtreeview.Tree, {
            ref: ref,
            tree: items,
            rootId: 0,
            render: handleRender,
            insertDroppableFirst: false,
            canDrag: handleCanDrag,
            canDrop: handleCanDrop,
            onDrop: handleDrop,
            initialOpen: true,
            sort: false,
            extraAcceptTypes: [
                "template"
            ],
            placeholderRender: handleRenderPlaceholder
        })
    });
};
