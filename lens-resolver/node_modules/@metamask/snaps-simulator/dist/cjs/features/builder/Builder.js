"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Builder", {
    enumerable: true,
    get: function() {
        return Builder;
    }
});
var _jsxruntime = require("react/jsx-runtime");
var _react = require("@chakra-ui/react");
var _snapsui = require("@metamask/snaps-ui");
var _react1 = require("react");
var _components = require("../../components");
var _components1 = require("./components");
var _utils = require("./utils");
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
var Builder = function() {
    var _useState = _sliced_to_array((0, _react1.useState)(2), 2), id = _useState[0], setId = _useState[1];
    var _useState1 = _sliced_to_array((0, _react1.useState)([
        {
            id: 1,
            parent: 0,
            text: "Panel",
            droppable: true,
            data: {
                type: _snapsui.NodeType.Panel,
                children: []
            }
        }
    ]), 2), items = _useState1[0], setItems = _useState1[1];
    var incrementId = function() {
        setId(function(state) {
            return state + 1;
        });
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Flex, {
        width: "100%",
        direction: "column",
        overflow: "hidden",
        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.Flex, {
            direction: "row",
            flex: "1",
            overflow: "hidden",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Flex, {
                    direction: "column",
                    flex: "1",
                    width: "50%",
                    overflow: "hidden",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.Tabs, {
                        display: "flex",
                        flexDirection: "column",
                        flex: "1",
                        overflow: "hidden",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.TabList, {
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Tab, {
                                    children: "Builder"
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.TabPanels, {
                                display: "flex",
                                flexDirection: "column",
                                flex: "1",
                                overflow: "hidden",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.TabPanel, {
                                    display: "flex",
                                    flexDirection: "column",
                                    flex: "1",
                                    overflowY: "auto",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_components1.TemplateComponentList, {
                                            nextId: id,
                                            incrementId: incrementId
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_components1.NodeTree, {
                                            items: items,
                                            setItems: setItems
                                        })
                                    ]
                                })
                            })
                        ]
                    })
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Box, {
                    display: "flex",
                    flexDirection: "column",
                    flex: "1",
                    width: "50%",
                    borderLeft: "1px solid",
                    borderColor: "border.default",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.Tabs, {
                        display: "flex",
                        flexDirection: "column",
                        flex: "1",
                        overflow: "hidden",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.TabList, {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Tab, {
                                        children: "Result"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Tab, {
                                        children: "Code"
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.TabPanels, {
                                display: "flex",
                                flexDirection: "column",
                                flex: "1",
                                overflow: "hidden",
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.TabPanel, {
                                        display: "flex",
                                        flexDirection: "column",
                                        flex: "1",
                                        padding: "4",
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_components1.NodeRenderer, {
                                            items: items
                                        })
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.TabPanel, {
                                        display: "flex",
                                        flexDirection: "column",
                                        flex: "1",
                                        padding: "0",
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_components.Editor, {
                                            border: "none",
                                            value: (0, _utils.panelToCode)((0, _utils.nodeModelsToComponent)(items)),
                                            language: "typescript",
                                            options: {
                                                readOnly: true
                                            }
                                        })
                                    })
                                ]
                            })
                        ]
                    })
                })
            ]
        })
    });
};
