"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "TemplateComponentList", {
    enumerable: true,
    get: function() {
        return TemplateComponentList;
    }
});
var _jsxruntime = require("react/jsx-runtime");
var _react = require("@chakra-ui/react");
var _snapsui = require("@metamask/snaps-ui");
var _TemplateComponent = require("./TemplateComponent");
var TEMPLATE_COMPONENTS = [
    {
        icon: "panel",
        text: "Panel",
        data: (0, _snapsui.panel)([]),
        droppable: true
    },
    {
        icon: "heading",
        text: "Heading",
        data: (0, _snapsui.heading)("Heading"),
        droppable: false
    },
    {
        icon: "text",
        text: "Text",
        data: (0, _snapsui.text)("Text"),
        droppable: false
    },
    {
        icon: "divider",
        text: "Divider",
        data: (0, _snapsui.divider)(),
        droppable: false
    },
    {
        icon: "copyable",
        text: "Copyable",
        data: (0, _snapsui.copyable)("Copyable text"),
        droppable: false
    }
];
var TemplateComponentList = function(param) {
    var nextId = param.nextId, incrementId = param.incrementId;
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react.Box, {
        marginBottom: "4",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Text, {
                fontSize: "xs",
                fontWeight: "600",
                lineHeight: "133%",
                marginBottom: "1",
                children: "Components"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Flex, {
                as: _react.List,
                gap: "2",
                children: TEMPLATE_COMPONENTS.map(function(component) {
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.ListItem, {
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_TemplateComponent.TemplateComponent, {
                            incrementId: incrementId,
                            icon: component.icon,
                            node: {
                                id: nextId,
                                parent: 0,
                                droppable: component.droppable,
                                text: component.text,
                                data: component.data
                            }
                        })
                    }, "component-".concat(component.text));
                })
            })
        ]
    });
};
