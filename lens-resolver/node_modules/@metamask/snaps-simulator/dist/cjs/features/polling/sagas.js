"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    fetchingSaga: function() {
        return fetchingSaga;
    },
    pollingSaga: function() {
        return pollingSaga;
    },
    rootPollingSaga: function() {
        return rootPollingSaga;
    }
});
var _snapscontrollers = require("@metamask/snaps-controllers");
var _snapsutils = require("@metamask/snaps-utils");
var _es6 = /*#__PURE__*/ _interop_require_default(require("fast-deep-equal/es6"));
var _effects = require("redux-saga/effects");
var _configuration = require("../configuration");
var _console = require("../console");
var _manifest = require("../manifest");
var _simulation = require("../simulation");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function fetchingSaga() {
    var snapId, snapVersion, location, manifestFile, parsedManifest, currentManifest, bundlePath, bundle, iconPath, icon;
    return _ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                return [
                    4,
                    (0, _effects.select)(_configuration.getSnapId)
                ];
            case 1:
                snapId = _state.sent();
                return [
                    4,
                    (0, _effects.select)(_configuration.getSnapVersion)
                ];
            case 2:
                snapVersion = _state.sent();
                location = (0, _snapscontrollers.detectSnapLocation)(snapId, {
                    allowLocal: true,
                    versionRange: snapVersion
                });
                return [
                    4,
                    (0, _effects.call)([
                        location,
                        "fetch"
                    ], "snap.manifest.json")
                ];
            case 3:
                manifestFile = _state.sent();
                parsedManifest = (0, _snapsutils.parseJson)(manifestFile.toString("utf8"));
                manifestFile.result = parsedManifest;
                return [
                    4,
                    (0, _effects.select)(_simulation.getSnapManifest)
                ];
            case 4:
                currentManifest = _state.sent();
                if ((0, _es6.default)(parsedManifest, currentManifest)) {
                    return [
                        2
                    ];
                }
                return [
                    4,
                    (0, _effects.put)((0, _manifest.setValid)(_manifest.ManifestStatus.Unknown))
                ];
            case 5:
                _state.sent();
                return [
                    4,
                    (0, _effects.put)((0, _simulation.setStatus)(_simulation.SnapStatus.Loading))
                ];
            case 6:
                _state.sent();
                return [
                    4,
                    (0, _effects.put)((0, _simulation.setManifest)(manifestFile))
                ];
            case 7:
                _state.sent();
                return [
                    4,
                    (0, _effects.put)((0, _console.addDefault)("Snap changed, rebooting..."))
                ];
            case 8:
                _state.sent();
                _state.label = 9;
            case 9:
                _state.trys.push([
                    9,
                    ,
                    15,
                    17
                ]);
                bundlePath = parsedManifest.source.location.npm.filePath;
                return [
                    4,
                    (0, _effects.call)([
                        location,
                        "fetch"
                    ], bundlePath)
                ];
            case 10:
                bundle = _state.sent();
                return [
                    4,
                    (0, _effects.put)((0, _simulation.setSourceCode)(bundle))
                ];
            case 11:
                _state.sent();
                iconPath = parsedManifest.source.location.npm.iconPath;
                if (!iconPath) return [
                    3,
                    14
                ];
                return [
                    4,
                    (0, _effects.call)([
                        location,
                        "fetch"
                    ], iconPath)
                ];
            case 12:
                icon = _state.sent();
                return [
                    4,
                    (0, _effects.put)((0, _simulation.setIcon)(icon))
                ];
            case 13:
                _state.sent();
                _state.label = 14;
            case 14:
                return [
                    3,
                    17
                ];
            case 15:
                return [
                    4,
                    (0, _effects.put)((0, _manifest.validateManifest)(manifestFile))
                ];
            case 16:
                _state.sent();
                return [
                    7
                ];
            case 17:
                return [
                    2
                ];
        }
    });
}
function pollingSaga() {
    var snapId, error;
    return _ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                if (!true) return [
                    3,
                    10
                ];
                _state.label = 1;
            case 1:
                _state.trys.push([
                    1,
                    5,
                    ,
                    9
                ]);
                return [
                    4,
                    (0, _effects.select)(_configuration.getSnapId)
                ];
            case 2:
                snapId = _state.sent();
                return [
                    4,
                    (0, _effects.call)(fetchingSaga)
                ];
            case 3:
                _state.sent();
                if ((0, _snapsutils.getSnapPrefix)(snapId) !== _snapsutils.SnapIdPrefixes.local) {
                    return [
                        3,
                        10
                    ];
                }
                return [
                    4,
                    (0, _effects.delay)(500)
                ];
            case 4:
                _state.sent();
                return [
                    3,
                    9
                ];
            case 5:
                error = _state.sent();
                (0, _snapsutils.logError)(error);
                return [
                    4,
                    (0, _effects.put)((0, _console.addError)(error))
                ];
            case 6:
                _state.sent();
                return [
                    4,
                    (0, _effects.put)((0, _simulation.setStatus)(_simulation.SnapStatus.Error))
                ];
            case 7:
                _state.sent();
                return [
                    4,
                    (0, _effects.put)((0, _manifest.setValid)(_manifest.ManifestStatus.Unknown))
                ];
            case 8:
                _state.sent();
                return [
                    3,
                    10
                ];
            case 9:
                return [
                    3,
                    0
                ];
            case 10:
                return [
                    2
                ];
        }
    });
}
function rootPollingSaga() {
    return _ts_generator(this, function(_state) {
        switch(_state.label){
            case 0:
                return [
                    4,
                    (0, _effects.all)([
                        (0, _effects.takeLatest)(_configuration.setSnapId.type, pollingSaga)
                    ])
                ];
            case 1:
                _state.sent();
                return [
                    2
                ];
        }
    });
}
