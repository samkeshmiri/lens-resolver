"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    abortSaga: function() {
        return abortSaga;
    },
    createAbortableSaga: function() {
        return createAbortableSaga;
    },
    createStore: function() {
        return createStore;
    }
});
var _toolkit = require("@reduxjs/toolkit");
var _effects = require("redux-saga/effects");
var _middleware = require("./middleware");
var _reducer = require("./reducer");
var _sagas = require("./sagas");
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var abortSaga = (0, _toolkit.createAction)("ABORT_SAGA");
function createAbortableSaga(saga) {
    return function abortableSaga() {
        var sagaTask;
        return _ts_generator(this, function(_state) {
            switch(_state.label){
                case 0:
                    return [
                        4,
                        (0, _effects.fork)(saga)
                    ];
                case 1:
                    sagaTask = _state.sent();
                    return [
                        4,
                        (0, _effects.take)(abortSaga.type)
                    ];
                case 2:
                    _state.sent();
                    return [
                        4,
                        (0, _effects.cancel)(sagaTask)
                    ];
                case 3:
                    _state.sent();
                    return [
                        2
                    ];
            }
        });
    };
}
function createStore() {
    var store = (0, _toolkit.configureStore)({
        reducer: _reducer.reducer,
        middleware: function(getDefaultMiddleware) {
            return getDefaultMiddleware({
                thunk: false,
                immutableCheck: true,
                serializableCheck: false
            }).concat(_middleware.sagaMiddleware);
        }
    });
    _middleware.sagaMiddleware.run(createAbortableSaga(_sagas.rootSaga));
    /* eslint-disable no-restricted-globals */ if (module.hot) {
        module.hot.accept("./reducer", function() {
            return store.replaceReducer(_reducer.reducer);
        });
        module.hot.accept("./sagas", function() {
            store.dispatch(abortSaga());
            _middleware.sagaMiddleware.run(createAbortableSaga(_sagas.rootSaga));
        });
    }
    /* eslint-enabled no-restricted-globals */ return store;
}
