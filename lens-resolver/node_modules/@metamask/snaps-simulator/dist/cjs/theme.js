/* eslint-disable @typescript-eslint/naming-convention */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "theme", {
    enumerable: true,
    get: function() {
        return theme;
    }
});
var _anatomy = require("@chakra-ui/anatomy");
var _react = require("@chakra-ui/react");
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
/* eslint-disable @typescript-eslint/unbound-method */ var _createMultiStyleConfigHelpers = (0, _react.createMultiStyleConfigHelpers)(_anatomy.tagAnatomy.keys), defineTagPartsStyle = _createMultiStyleConfigHelpers.definePartsStyle, defineTagMultiStyleConfig = _createMultiStyleConfigHelpers.defineMultiStyleConfig;
var _createMultiStyleConfigHelpers1 = (0, _react.createMultiStyleConfigHelpers)(_anatomy.formAnatomy.keys), defineFormPartsStyle = _createMultiStyleConfigHelpers1.definePartsStyle, defineFormMultiStyleConfig = _createMultiStyleConfigHelpers1.defineMultiStyleConfig;
var _createMultiStyleConfigHelpers2 = (0, _react.createMultiStyleConfigHelpers)(_anatomy.tabsAnatomy.keys), defineTabsPartsStyle = _createMultiStyleConfigHelpers2.definePartsStyle, defineTabsMultiStyleConfig = _createMultiStyleConfigHelpers2.defineMultiStyleConfig;
var _createMultiStyleConfigHelpers3 = (0, _react.createMultiStyleConfigHelpers)(_anatomy.modalAnatomy.keys), defineModalPartsStyle = _createMultiStyleConfigHelpers3.definePartsStyle, defineModalMultiStyleConfig = _createMultiStyleConfigHelpers3.defineMultiStyleConfig;
var _createMultiStyleConfigHelpers4 = (0, _react.createMultiStyleConfigHelpers)(_anatomy.switchAnatomy.keys), defineSwitchPartsStyle = _createMultiStyleConfigHelpers4.definePartsStyle, defineSwitchMultiStyleConfig = _createMultiStyleConfigHelpers4.defineMultiStyleConfig;
/* eslint-enable @typescript-eslint/unbound-method */ var config = {
    initialColorMode: "system",
    useSystemColorMode: true
};
var _obj;
var theme = (0, _react.extendTheme)({
    config: config,
    semanticTokens: {
        colors: {
            "chakra-body-bg": {
                _light: "white",
                _dark: "#24272A"
            },
            text: {
                default: "#24272A",
                _dark: "#9FA6AE",
                tab: {
                    default: "#535A61",
                    _dark: "#FFFFFF",
                    selected: {
                        default: "#24272A",
                        _dark: "#FFFFFF"
                    }
                },
                console: {
                    default: "#535A61",
                    _dark: "#D6D9DC"
                }
            },
            background: {
                alternative: {
                    default: "#F5F5F5",
                    _dark: "#1D1F22"
                },
                hover: {
                    default: "#FAFBFC",
                    _dark: "#141618"
                }
            },
            info: {
                default: {
                    default: "#0376C9",
                    _dark: "#1098FC"
                },
                muted: {
                    default: "rgba(3, 118, 201, 0.1)",
                    _dark: "#141618"
                }
            },
            border: {
                default: {
                    default: "#D6D9DC",
                    _dark: "#3B4046"
                },
                active: {
                    default: "#24272A",
                    _dark: "rgba(255, 255, 255, 0.06)"
                }
            },
            gray: {
                muted: {
                    default: "#D6D9DC",
                    _dark: "#3B4046"
                }
            }
        },
        borders: {
            muted: {
                default: "1px solid #D6D9DC",
                _dark: "1px solid #3B4046"
            }
        }
    },
    colors: {
        text: {
            white: "#FFFFFF",
            alternative: "#535A61",
            success: "#579F6E",
            error: "#D34C46",
            muted: "#BBC0C5"
        },
        error: {
            default: "#D34C46",
            muted: "rgba(215, 56, 71, 0.1)"
        },
        success: {
            default: "#579F6E"
        },
        gray: {
            40: "#F2F4F6"
        }
    },
    components: {
        Container: (0, _react.defineStyleConfig)({
            baseStyle: {
                paddingX: 4,
                paddingY: 4
            },
            sizes: {
                fullWidth: {
                    maxWidth: "100%"
                }
            }
        }),
        Divider: (0, _react.defineStyleConfig)({
            baseStyle: {
                opacity: 1
            }
        }),
        Form: defineFormMultiStyleConfig({
            baseStyle: defineFormPartsStyle({
                container: {
                    label: {
                        fontSize: "xs",
                        marginBottom: 1
                    },
                    input: {
                        marginBottom: 4,
                        borderColor: "border.default",
                        outline: "none",
                        fontSize: "sm",
                        _active: {
                            borderColor: "border.active",
                            outline: "none",
                            boxShadow: "none"
                        },
                        _focusVisible: {
                            borderColor: "border.active",
                            outline: "none",
                            boxShadow: "none"
                        }
                    },
                    textarea: {
                        marginBottom: 4,
                        borderColor: "border.default",
                        outline: "none",
                        fontSize: "sm",
                        _active: {
                            borderColor: "border.active",
                            outline: "none",
                            boxShadow: "none"
                        },
                        _focusVisible: {
                            borderColor: "border.active",
                            outline: "none",
                            boxShadow: "none"
                        }
                    },
                    select: {
                        borderColor: "border.default",
                        outline: "none",
                        fontSize: "sm",
                        _active: {
                            borderColor: "border.active",
                            outline: "none",
                            boxShadow: "none"
                        },
                        _focusVisible: {
                            borderColor: "border.active",
                            outline: "none",
                            boxShadow: "none"
                        }
                    }
                }
            })
        }),
        Heading: {
            variants: {
                main: {
                    fontFamily: "custom"
                }
            }
        },
        Link: (0, _react.defineStyleConfig)({
            variants: {
                "navigation-active": {
                    opacity: "1",
                    background: "background.alternative",
                    borderRadius: "lg"
                },
                "navigation-default": {
                    opacity: "0.6",
                    borderRadius: "lg"
                }
            }
        }),
        Tabs: defineTabsMultiStyleConfig({
            variants: {
                line: defineTabsPartsStyle({
                    tablist: {
                        background: "background.alternative",
                        borderBottom: "1px solid",
                        borderColor: "border.default",
                        paddingX: "4"
                    },
                    tab: {
                        color: "text.tab",
                        fontSize: "xs",
                        fontWeight: "600",
                        textTransform: "uppercase",
                        outline: "none",
                        paddingTop: "0",
                        paddingX: "0",
                        paddingBottom: "0.5",
                        marginY: "3",
                        background: "none",
                        "& + &": {
                            marginLeft: "4"
                        },
                        _selected: {
                            color: "text.tab.selected",
                            borderBottom: "2px solid",
                            borderColor: "border.active"
                        }
                    }
                })
            }
        }),
        Text: (0, _react.defineStyleConfig)({
            baseStyle: {
                color: "text"
            }
        }),
        Tag: defineTagMultiStyleConfig({
            variants: {
                code: defineTagPartsStyle({
                    container: {
                        color: "info.default",
                        background: "info.muted",
                        borderRadius: "0px",
                        fontWeight: "normal",
                        fontFamily: "code"
                    }
                })
            }
        }),
        Button: (0, _react.defineStyleConfig)({
            variants: {
                solid: (0, _react.defineStyle)({
                    bg: "#24272A",
                    textColor: "white",
                    _hover: {
                        bg: "#0376C9"
                    },
                    _active: {
                        bg: "#0376C9"
                    },
                    fontFamily: "custom"
                }),
                primary: (0, _react.defineStyle)({
                    height: "48px",
                    borderRadius: "30px",
                    background: "info.default",
                    fontSize: "sm",
                    fontWeight: "normal",
                    lineHeight: "157%",
                    color: "white",
                    borderColor: "info.default",
                    padding: "3",
                    fontFamily: "custom"
                }),
                outline: (0, _react.defineStyle)({
                    height: "48px",
                    borderRadius: "30px",
                    background: "transparent",
                    fontSize: "sm",
                    fontWeight: "normal",
                    lineHeight: "157%",
                    color: "info.default",
                    borderColor: "info.default",
                    padding: "3",
                    fontFamily: "custom"
                })
            }
        }),
        Skeleton: (0, _react.defineStyleConfig)({
            baseStyle: (0, _react.defineStyle)((_obj = {}, _define_property(_obj, (0, _react.cssVar)("skeleton-start-color").variable, "colors.background.alternative"), _define_property(_obj, (0, _react.cssVar)("skeleton-end-color").variable, "colors.border"), _define_property(_obj, "borderRadius", "lg"), _obj))
        }),
        Modal: defineModalMultiStyleConfig({
            baseStyle: defineModalPartsStyle({
                dialog: {
                    bg: "chakra-body-bg"
                }
            })
        }),
        Switch: defineSwitchMultiStyleConfig({
            baseStyle: defineSwitchPartsStyle({
                track: {
                    _checked: {
                        bg: "#0376C9"
                    }
                }
            })
        })
    },
    fonts: {
        heading: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
        body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
        code: 'SFMono-Regular, Consolas, "Liberation Mono", Menlo, Courier, monospace',
        custom: '"Euclid Circular B", sans-serif'
    },
    styles: {
        global: {
            // eslint-disable-next-line @typescript-eslint/naming-convention
            "#root": {
                display: "flex",
                flexDirection: "column",
                minHeight: "$100vh"
            },
            iframe: {
                display: "none"
            }
        }
    }
});
