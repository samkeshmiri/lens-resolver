import type { JsonRpcMiddleware, JsonRpcRequest } from 'json-rpc-engine';
export interface JsonRpcRequestToCache<T> extends JsonRpcRequest<T> {
    skipCache?: boolean;
}
export declare type JsonRpcCacheMiddleware<T, U> = JsonRpcMiddleware<T, U> extends (req: JsonRpcRequest<T>, ...args: infer X) => infer Y ? (req: JsonRpcRequestToCache<T>, ...args: X) => Y : never;
export declare type BlockData = string | string[];
export declare type Block = Record<string, BlockData>;
export declare type BlockCache = Record<string, Block>;
export declare type Cache = Record<number, BlockCache>;
