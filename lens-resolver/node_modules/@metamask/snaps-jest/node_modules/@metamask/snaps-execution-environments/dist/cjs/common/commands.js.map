{"version":3,"sources":["../../../src/common/commands.ts"],"sourcesContent":["import { HandlerType } from '@metamask/snaps-utils';\nimport { assertExhaustive } from '@metamask/utils';\n\nimport type { InvokeSnap, InvokeSnapArgs } from './BaseSnapExecutor';\nimport type {\n  ExecuteSnap,\n  JsonRpcRequestWithoutId,\n  Ping,\n  SnapRpc,\n  Terminate,\n} from './validation';\nimport { assertIsOnTransactionRequestArguments } from './validation';\n\nexport type CommandMethodsMapping = {\n  ping: Ping;\n  terminate: Terminate;\n  executeSnap: ExecuteSnap;\n  snapRpc: SnapRpc;\n};\n\n/**\n * Formats the arguments for the given handler.\n *\n * @param origin - The origin of the request.\n * @param handler - The handler to pass the request to.\n * @param request - The request object.\n * @returns The formatted arguments.\n */\nexport function getHandlerArguments(\n  origin: string,\n  handler: HandlerType,\n  request: JsonRpcRequestWithoutId,\n): InvokeSnapArgs {\n  // `request` is already validated by the time this function is called.\n\n  switch (handler) {\n    case HandlerType.OnTransaction: {\n      assertIsOnTransactionRequestArguments(request.params);\n\n      const { transaction, chainId, transactionOrigin } = request.params;\n      return {\n        transaction,\n        chainId,\n        transactionOrigin,\n      };\n    }\n\n    case HandlerType.OnRpcRequest:\n      return { origin, request };\n\n    case HandlerType.OnCronjob:\n    case HandlerType.OnInstall:\n    case HandlerType.OnUpdate:\n      return { request };\n\n    default:\n      return assertExhaustive(handler);\n  }\n}\n\n/**\n * Gets an object mapping internal, \"command\" JSON-RPC method names to their\n * implementations.\n *\n * @param startSnap - A function that starts a snap.\n * @param invokeSnap - A function that invokes the RPC method handler of a\n * snap.\n * @param onTerminate - A function that will be called when this executor is\n * terminated in order to handle cleanup tasks.\n * @returns An object containing the \"command\" method implementations.\n */\nexport function getCommandMethodImplementations(\n  startSnap: (...args: Parameters<ExecuteSnap>) => Promise<void>,\n  invokeSnap: InvokeSnap,\n  onTerminate: () => void,\n): CommandMethodsMapping {\n  return {\n    ping: async () => Promise.resolve('OK'),\n    terminate: async () => {\n      onTerminate();\n      return Promise.resolve('OK');\n    },\n\n    executeSnap: async (snapId, sourceCode, endowments) => {\n      await startSnap(snapId, sourceCode, endowments);\n      return 'OK';\n    },\n\n    snapRpc: async (target, handler, origin, request) => {\n      return (\n        (await invokeSnap(\n          target,\n          handler,\n          getHandlerArguments(origin, handler, request),\n        )) ?? null\n      );\n    },\n  };\n}\n"],"names":["getHandlerArguments","getCommandMethodImplementations","origin","handler","request","HandlerType","OnTransaction","assertIsOnTransactionRequestArguments","params","transaction","chainId","transactionOrigin","OnRpcRequest","OnCronjob","OnInstall","OnUpdate","assertExhaustive","startSnap","invokeSnap","onTerminate","ping","Promise","resolve","terminate","executeSnap","snapId","sourceCode","endowments","snapRpc","target"],"mappings":";;;;;;;;;;;IA4BgBA,mBAAmB;eAAnBA;;IA2CAC,+BAA+B;eAA/BA;;;4BAvEY;uBACK;4BAUqB;AAiB/C,SAASD,oBACdE,MAAc,EACdC,OAAoB,EACpBC,OAAgC;IAEhC,sEAAsE;IAEtE,OAAQD;QACN,KAAKE,uBAAW,CAACC,aAAa;YAAE;gBAC9BC,IAAAA,iDAAqC,EAACH,QAAQI,MAAM;gBAEpD,MAAM,EAAEC,WAAW,EAAEC,OAAO,EAAEC,iBAAiB,EAAE,GAAGP,QAAQI,MAAM;gBAClE,OAAO;oBACLC;oBACAC;oBACAC;gBACF;YACF;QAEA,KAAKN,uBAAW,CAACO,YAAY;YAC3B,OAAO;gBAAEV;gBAAQE;YAAQ;QAE3B,KAAKC,uBAAW,CAACQ,SAAS;QAC1B,KAAKR,uBAAW,CAACS,SAAS;QAC1B,KAAKT,uBAAW,CAACU,QAAQ;YACvB,OAAO;gBAAEX;YAAQ;QAEnB;YACE,OAAOY,IAAAA,uBAAgB,EAACb;IAC5B;AACF;AAaO,SAASF,gCACdgB,SAA8D,EAC9DC,UAAsB,EACtBC,WAAuB;IAEvB,OAAO;QACLC,MAAM,UAAYC,QAAQC,OAAO,CAAC;QAClCC,WAAW;YACTJ;YACA,OAAOE,QAAQC,OAAO,CAAC;QACzB;QAEAE,aAAa,OAAOC,QAAQC,YAAYC;YACtC,MAAMV,UAAUQ,QAAQC,YAAYC;YACpC,OAAO;QACT;QAEAC,SAAS,OAAOC,QAAQ1B,SAASD,QAAQE;YACvC,OACE,AAAC,MAAMc,WACLW,QACA1B,SACAH,oBAAoBE,QAAQC,SAASC,aACjC;QAEV;IACF;AACF"}