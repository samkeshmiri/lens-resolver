{"version":3,"sources":["../../../src/common/validation.ts"],"sourcesContent":["import { ChainIdStruct, HandlerType } from '@metamask/snaps-utils';\nimport type { Json, JsonRpcSuccess } from '@metamask/utils';\nimport {\n  assertStruct,\n  JsonRpcIdStruct,\n  JsonRpcRequestStruct,\n  JsonRpcSuccessStruct,\n  JsonStruct,\n} from '@metamask/utils';\nimport type { Infer } from 'superstruct';\nimport {\n  array,\n  assign,\n  enums,\n  is,\n  literal,\n  nullable,\n  object,\n  omit,\n  optional,\n  record,\n  string,\n  tuple,\n  union,\n} from 'superstruct';\n\nexport const JsonRpcRequestWithoutIdStruct = assign(\n  omit(JsonRpcRequestStruct, ['id']),\n  object({\n    id: optional(JsonRpcIdStruct),\n  }),\n);\n\nexport type JsonRpcRequestWithoutId = Infer<\n  typeof JsonRpcRequestWithoutIdStruct\n>;\n\nexport const EndowmentStruct = string();\nexport type Endowment = Infer<typeof EndowmentStruct>;\n\n/**\n * Check if the given value is an endowment.\n *\n * @param value - The value to check.\n * @returns Whether the value is an endowment.\n */\nexport function isEndowment(value: unknown): value is Endowment {\n  return is(value, EndowmentStruct);\n}\n\n/**\n * Check if the given value is an array of endowments.\n *\n * @param value - The value to check.\n * @returns Whether the value is an array of endowments.\n */\nexport function isEndowmentsArray(value: unknown): value is Endowment[] {\n  return Array.isArray(value) && value.every(isEndowment);\n}\n\nconst OkStruct = literal('OK');\n\nexport const PingRequestArgumentsStruct = optional(\n  union([literal(undefined), array()]),\n);\n\nexport const TerminateRequestArgumentsStruct = union([\n  literal(undefined),\n  array(),\n]);\n\nexport const ExecuteSnapRequestArgumentsStruct = tuple([\n  string(),\n  string(),\n  optional(array(EndowmentStruct)),\n]);\n\nexport const SnapRpcRequestArgumentsStruct = tuple([\n  string(),\n  enums(Object.values(HandlerType)),\n  string(),\n  assign(\n    JsonRpcRequestWithoutIdStruct,\n    object({\n      params: optional(record(string(), JsonStruct)),\n    }),\n  ),\n]);\n\nexport type PingRequestArguments = Infer<typeof PingRequestArgumentsStruct>;\nexport type TerminateRequestArguments = Infer<\n  typeof TerminateRequestArgumentsStruct\n>;\n\nexport type ExecuteSnapRequestArguments = Infer<\n  typeof ExecuteSnapRequestArgumentsStruct\n>;\n\nexport type SnapRpcRequestArguments = Infer<\n  typeof SnapRpcRequestArgumentsStruct\n>;\n\nexport type RequestArguments =\n  | PingRequestArguments\n  | TerminateRequestArguments\n  | ExecuteSnapRequestArguments\n  | SnapRpcRequestArguments;\n\nexport const OnTransactionRequestArgumentsStruct = object({\n  // TODO: Improve `transaction` type.\n  transaction: record(string(), JsonStruct),\n  chainId: ChainIdStruct,\n  transactionOrigin: nullable(string()),\n});\n\nexport type OnTransactionRequestArguments = Infer<\n  typeof OnTransactionRequestArgumentsStruct\n>;\n\n/**\n * Asserts that the given value is a valid {@link OnTransactionRequestArguments}\n * object.\n *\n * @param value - The value to validate.\n * @throws If the value is not a valid {@link OnTransactionRequestArguments}\n * object.\n */\nexport function assertIsOnTransactionRequestArguments(\n  value: unknown,\n): asserts value is OnTransactionRequestArguments {\n  assertStruct(\n    value,\n    OnTransactionRequestArgumentsStruct,\n    'Invalid request params',\n  );\n}\n\nconst OkResponseStruct = assign(\n  JsonRpcSuccessStruct,\n  object({\n    result: OkStruct,\n  }),\n);\n\nconst SnapRpcResponse = JsonRpcSuccessStruct;\n\nexport type OkResponse = Infer<typeof OkResponseStruct>;\nexport type SnapRpcResponse = Infer<typeof SnapRpcResponse>;\n\nexport type Response = OkResponse | SnapRpcResponse;\n\ntype RequestParams<Params extends unknown[] | undefined> =\n  Params extends undefined ? [] : Params;\n\ntype RequestFunction<\n  Args extends RequestArguments,\n  ResponseType extends JsonRpcSuccess<Json>,\n> = (...args: RequestParams<Args>) => Promise<ResponseType['result']>;\n\nexport type Ping = RequestFunction<PingRequestArguments, OkResponse>;\nexport type Terminate = RequestFunction<TerminateRequestArguments, OkResponse>;\nexport type ExecuteSnap = RequestFunction<\n  ExecuteSnapRequestArguments,\n  OkResponse\n>;\nexport type SnapRpc = RequestFunction<SnapRpcRequestArguments, SnapRpcResponse>;\n"],"names":["JsonRpcRequestWithoutIdStruct","EndowmentStruct","isEndowment","isEndowmentsArray","PingRequestArgumentsStruct","TerminateRequestArgumentsStruct","ExecuteSnapRequestArgumentsStruct","SnapRpcRequestArgumentsStruct","OnTransactionRequestArgumentsStruct","assertIsOnTransactionRequestArguments","assign","omit","JsonRpcRequestStruct","object","id","optional","JsonRpcIdStruct","string","value","is","Array","isArray","every","OkStruct","literal","union","undefined","array","tuple","enums","Object","values","HandlerType","params","record","JsonStruct","transaction","chainId","ChainIdStruct","transactionOrigin","nullable","assertStruct","OkResponseStruct","JsonRpcSuccessStruct","result","SnapRpcResponse"],"mappings":";;;;;;;;;;;IA0BaA,6BAA6B;eAA7BA;;IAWAC,eAAe;eAAfA;;IASGC,WAAW;eAAXA;;IAUAC,iBAAiB;eAAjBA;;IAMHC,0BAA0B;eAA1BA;;IAIAC,+BAA+B;eAA/BA;;IAKAC,iCAAiC;eAAjCA;;IAMAC,6BAA6B;eAA7BA;;IA+BAC,mCAAmC;eAAnCA;;IAmBGC,qCAAqC;eAArCA;;;4BA/H2B;uBAQpC;6BAgBA;AAEA,MAAMT,gCAAgCU,IAAAA,mBAAM,EACjDC,IAAAA,iBAAI,EAACC,2BAAoB,EAAE;IAAC;CAAK,GACjCC,IAAAA,mBAAM,EAAC;IACLC,IAAIC,IAAAA,qBAAQ,EAACC,sBAAe;AAC9B;AAOK,MAAMf,kBAAkBgB,IAAAA,mBAAM;AAS9B,SAASf,YAAYgB,KAAc;IACxC,OAAOC,IAAAA,eAAE,EAACD,OAAOjB;AACnB;AAQO,SAASE,kBAAkBe,KAAc;IAC9C,OAAOE,MAAMC,OAAO,CAACH,UAAUA,MAAMI,KAAK,CAACpB;AAC7C;AAEA,MAAMqB,WAAWC,IAAAA,oBAAO,EAAC;AAElB,MAAMpB,6BAA6BW,IAAAA,qBAAQ,EAChDU,IAAAA,kBAAK,EAAC;IAACD,IAAAA,oBAAO,EAACE;IAAYC,IAAAA,kBAAK;CAAG;AAG9B,MAAMtB,kCAAkCoB,IAAAA,kBAAK,EAAC;IACnDD,IAAAA,oBAAO,EAACE;IACRC,IAAAA,kBAAK;CACN;AAEM,MAAMrB,oCAAoCsB,IAAAA,kBAAK,EAAC;IACrDX,IAAAA,mBAAM;IACNA,IAAAA,mBAAM;IACNF,IAAAA,qBAAQ,EAACY,IAAAA,kBAAK,EAAC1B;CAChB;AAEM,MAAMM,gCAAgCqB,IAAAA,kBAAK,EAAC;IACjDX,IAAAA,mBAAM;IACNY,IAAAA,kBAAK,EAACC,OAAOC,MAAM,CAACC,uBAAW;IAC/Bf,IAAAA,mBAAM;IACNP,IAAAA,mBAAM,EACJV,+BACAa,IAAAA,mBAAM,EAAC;QACLoB,QAAQlB,IAAAA,qBAAQ,EAACmB,IAAAA,mBAAM,EAACjB,IAAAA,mBAAM,KAAIkB,iBAAU;IAC9C;CAEH;AAqBM,MAAM3B,sCAAsCK,IAAAA,mBAAM,EAAC;IACxD,oCAAoC;IACpCuB,aAAaF,IAAAA,mBAAM,EAACjB,IAAAA,mBAAM,KAAIkB,iBAAU;IACxCE,SAASC,yBAAa;IACtBC,mBAAmBC,IAAAA,qBAAQ,EAACvB,IAAAA,mBAAM;AACpC;AAcO,SAASR,sCACdS,KAAc;IAEduB,IAAAA,mBAAY,EACVvB,OACAV,qCACA;AAEJ;AAEA,MAAMkC,mBAAmBhC,IAAAA,mBAAM,EAC7BiC,2BAAoB,EACpB9B,IAAAA,mBAAM,EAAC;IACL+B,QAAQrB;AACV;AAGF,MAAMsB,kBAAkBF,2BAAoB"}