import { array, assign, boolean, lazy, literal, object, optional, string, union, unknown } from 'superstruct';
const NodeStruct = object({
    type: string()
});
const ParentStruct = assign(NodeStruct, object({
    // This node references itself indirectly, so we need to use `lazy()`.
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    children: array(lazy(()=>ComponentStruct))
}));
const LiteralStruct = assign(NodeStruct, object({
    value: unknown()
}));
export var NodeType;
(function(NodeType) {
    NodeType["Copyable"] = 'copyable';
    NodeType["Divider"] = 'divider';
    NodeType["Heading"] = 'heading';
    NodeType["Panel"] = 'panel';
    NodeType["Spinner"] = 'spinner';
    NodeType["Text"] = 'text';
})(NodeType || (NodeType = {}));
export const CopyableStruct = assign(LiteralStruct, object({
    type: literal(NodeType.Copyable),
    value: string()
}));
export const DividerStruct = assign(NodeStruct, object({
    type: literal(NodeType.Divider)
}));
export const HeadingStruct = assign(LiteralStruct, object({
    type: literal(NodeType.Heading),
    value: string()
}));
export const PanelStruct = assign(ParentStruct, object({
    type: literal(NodeType.Panel)
}));
export const SpinnerStruct = assign(NodeStruct, object({
    type: literal(NodeType.Spinner)
}));
export const TextStruct = assign(LiteralStruct, object({
    type: literal(NodeType.Text),
    value: string(),
    markdown: optional(boolean())
}));
export const ComponentStruct = union([
    CopyableStruct,
    DividerStruct,
    HeadingStruct,
    PanelStruct,
    SpinnerStruct,
    TextStruct
]);

//# sourceMappingURL=nodes.js.map