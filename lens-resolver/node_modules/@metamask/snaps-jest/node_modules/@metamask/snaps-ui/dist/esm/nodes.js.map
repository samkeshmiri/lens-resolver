{"version":3,"sources":["../../src/nodes.ts"],"sourcesContent":["import type { Infer, Struct } from 'superstruct';\nimport {\n  array,\n  assign,\n  boolean,\n  lazy,\n  literal,\n  object,\n  optional,\n  string,\n  union,\n  unknown,\n} from 'superstruct';\n\nconst NodeStruct = object({\n  type: string(),\n});\n\n/**\n * The base node type.\n *\n * @property type - The node type.\n */\nexport type Node = Infer<typeof NodeStruct>;\n\nconst ParentStruct = assign(\n  NodeStruct,\n  object({\n    // This node references itself indirectly, so we need to use `lazy()`.\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    children: array(lazy(() => ComponentStruct)),\n  }),\n);\n\n/**\n * A node with children.\n *\n * @property type - The node type.\n * @property children - The children of this node.\n */\nexport type Parent = Infer<typeof ParentStruct>;\n\nconst LiteralStruct = assign(\n  NodeStruct,\n  object({\n    value: unknown(),\n  }),\n);\n\n/**\n * A node with a value.\n *\n * @property type - The node type.\n * @property value - The value of this node.\n */\nexport type Literal = Infer<typeof LiteralStruct>;\n\nexport enum NodeType {\n  Copyable = 'copyable',\n  Divider = 'divider',\n  Heading = 'heading',\n  Panel = 'panel',\n  Spinner = 'spinner',\n  Text = 'text',\n}\n\nexport const CopyableStruct = assign(\n  LiteralStruct,\n  object({\n    type: literal(NodeType.Copyable),\n    value: string(),\n  }),\n);\n\n/**\n * Text that can be copied to the clipboard.\n *\n * @property type - The type of the node, must be the string 'copyable'.\n * @property value - The text to be copied.\n */\nexport type Copyable = Infer<typeof CopyableStruct>;\n\nexport const DividerStruct = assign(\n  NodeStruct,\n  object({\n    type: literal(NodeType.Divider),\n  }),\n);\n\n/**\n * A divider node, that renders a line between other nodes.\n */\nexport type Divider = Infer<typeof DividerStruct>;\n\nexport const HeadingStruct = assign(\n  LiteralStruct,\n  object({\n    type: literal(NodeType.Heading),\n    value: string(),\n  }),\n);\n\n/**\n * A heading node, that renders the text as a heading. The level of the heading\n * is determined by the depth of the heading in the document.\n *\n * @property type - The type of the node, must be the string 'text'.\n * @property value - The text content of the node, either as plain text, or as a\n * markdown string.\n */\nexport type Heading = Infer<typeof HeadingStruct>;\n\nexport const PanelStruct: Struct<Panel> = assign(\n  ParentStruct,\n  object({\n    type: literal(NodeType.Panel),\n  }),\n);\n\n/**\n * A panel node, which renders its children.\n *\n * @property type - The type of the node, must be the string 'text'.\n * @property value - The text content of the node, either as plain text, or as a\n * markdown string.\n */\n// This node references itself indirectly, so it cannot be inferred.\nexport type Panel = { type: NodeType.Panel; children: Component[] };\n\nexport const SpinnerStruct = assign(\n  NodeStruct,\n  object({\n    type: literal(NodeType.Spinner),\n  }),\n);\n\n/**\n * A spinner node, that renders a spinner, either as a full-screen overlay, or\n * inline when nested inside a {@link Panel}.\n */\nexport type Spinner = Infer<typeof SpinnerStruct>;\n\nexport const TextStruct = assign(\n  LiteralStruct,\n  object({\n    type: literal(NodeType.Text),\n    value: string(),\n    markdown: optional(boolean()),\n  }),\n);\n\n/**\n * A text node, that renders the text as one or more paragraphs.\n *\n * @property type - The type of the node, must be the string 'text'.\n * @property value - The text content of the node, either as plain text, or as a\n * markdown string.\n * @property markdown - A flag to enable/disable markdown, if nothing is specified\n * markdown will be enabled.\n */\nexport type Text = Infer<typeof TextStruct>;\n\nexport const ComponentStruct = union([\n  CopyableStruct,\n  DividerStruct,\n  HeadingStruct,\n  PanelStruct,\n  SpinnerStruct,\n  TextStruct,\n]);\n\n/**\n * All supported component types.\n */\nexport type Component = Infer<typeof ComponentStruct>;\n"],"names":["array","assign","boolean","lazy","literal","object","optional","string","union","unknown","NodeStruct","type","ParentStruct","children","ComponentStruct","LiteralStruct","value","NodeType","Copyable","Divider","Heading","Panel","Spinner","Text","CopyableStruct","DividerStruct","HeadingStruct","PanelStruct","SpinnerStruct","TextStruct","markdown"],"mappings":"AACA,SACEA,KAAK,EACLC,MAAM,EACNC,OAAO,EACPC,IAAI,EACJC,OAAO,EACPC,MAAM,EACNC,QAAQ,EACRC,MAAM,EACNC,KAAK,EACLC,OAAO,QACF,cAAc;AAErB,MAAMC,aAAaL,OAAO;IACxBM,MAAMJ;AACR;AASA,MAAMK,eAAeX,OACnBS,YACAL,OAAO;IACL,sEAAsE;IACtE,mEAAmE;IACnEQ,UAAUb,MAAMG,KAAK,IAAMW;AAC7B;AAWF,MAAMC,gBAAgBd,OACpBS,YACAL,OAAO;IACLW,OAAOP;AACT;WAWK;UAAKQ,QAAQ;IAARA,SACVC,cAAW;IADDD,SAEVE,aAAU;IAFAF,SAGVG,aAAU;IAHAH,SAIVI,WAAQ;IAJEJ,SAKVK,aAAU;IALAL,SAMVM,UAAO;GANGN,aAAAA;AASZ,OAAO,MAAMO,iBAAiBvB,OAC5Bc,eACAV,OAAO;IACLM,MAAMP,QAAQa,SAASC,QAAQ;IAC/BF,OAAOT;AACT,IACA;AAUF,OAAO,MAAMkB,gBAAgBxB,OAC3BS,YACAL,OAAO;IACLM,MAAMP,QAAQa,SAASE,OAAO;AAChC,IACA;AAOF,OAAO,MAAMO,gBAAgBzB,OAC3Bc,eACAV,OAAO;IACLM,MAAMP,QAAQa,SAASG,OAAO;IAC9BJ,OAAOT;AACT,IACA;AAYF,OAAO,MAAMoB,cAA6B1B,OACxCW,cACAP,OAAO;IACLM,MAAMP,QAAQa,SAASI,KAAK;AAC9B,IACA;AAYF,OAAO,MAAMO,gBAAgB3B,OAC3BS,YACAL,OAAO;IACLM,MAAMP,QAAQa,SAASK,OAAO;AAChC,IACA;AAQF,OAAO,MAAMO,aAAa5B,OACxBc,eACAV,OAAO;IACLM,MAAMP,QAAQa,SAASM,IAAI;IAC3BP,OAAOT;IACPuB,UAAUxB,SAASJ;AACrB,IACA;AAaF,OAAO,MAAMY,kBAAkBN,MAAM;IACnCgB;IACAC;IACAC;IACAC;IACAC;IACAC;CACD,EAAE"}