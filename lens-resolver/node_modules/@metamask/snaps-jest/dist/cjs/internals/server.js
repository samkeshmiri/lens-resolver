"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "startServer", {
    enumerable: true,
    get: function() {
        return startServer;
    }
});
const _snapsutils = require("@metamask/snaps-utils");
const _utils = require("@metamask/utils");
const _express = /*#__PURE__*/ _interop_require_default(require("express"));
const _fs = require("fs");
const _http = require("http");
const _path = require("path");
const _logger = require("./logger");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const SNAPS_EXECUTION_ENVIRONMENTS_PATH = (0, _path.resolve)((0, _path.dirname)(require.resolve('@metamask/snaps-execution-environments/package.json')), 'dist', 'browserify', 'iframe');
const SNAPS_SIMULATOR_PATH = (0, _path.resolve)((0, _path.dirname)(require.resolve('@metamask/snaps-simulator/package.json')), 'dist', 'webpack', 'test');
/**
 * Check that:
 *
 * - The root directory exists.
 * - The root directory contains a `snap.manifest.json` file.
 * - The file path in the manifest exists.
 *
 * @param root - The root directory.
 * @throws If any of the checks fail.
 */ async function assertRoot(root) {
    if (!root) {
        throw new Error('You must specify a root directory.');
    }
    if (!await (0, _snapsutils.isDirectory)(root, false)) {
        throw new Error(`Root directory "${root}" is not a directory.`);
    }
    const manifestPath = (0, _path.resolve)(root, 'snap.manifest.json');
    const manifest = await _fs.promises.readFile(manifestPath, 'utf8').then(JSON.parse);
    (0, _snapsutils.assertIsSnapManifest)(manifest);
    const filePath = (0, _path.resolve)(root, manifest.source.location.npm.filePath);
    if (!await (0, _snapsutils.isFile)(filePath)) {
        throw new Error(`File "${filePath}" does not exist, or is not a file. Did you forget to build your snap?`);
    }
}
async function startServer(options) {
    await assertRoot(options.root);
    const log = (0, _utils.createModuleLogger)(_logger.rootLogger, 'server');
    const app = (0, _express.default)();
    app.use((_request, response, next)=>{
        response.header('Access-Control-Allow-Origin', '*');
        response.header('Access-Control-Allow-Credentials', 'true');
        response.header('Access-Control-Allow-Methods', 'GET, OPTIONS');
        response.header('Access-Control-Allow-Headers', 'Content-Type');
        next();
    });
    app.use('/environment', _express.default.static(SNAPS_EXECUTION_ENVIRONMENTS_PATH));
    app.use('/simulator', _express.default.static(SNAPS_SIMULATOR_PATH));
    app.use(_express.default.static((0, _path.resolve)(process.cwd(), options.root)));
    const server = (0, _http.createServer)(app);
    return await new Promise((resolve, reject)=>{
        server.listen(options.port, ()=>{
            resolve(server);
        });
        server.on('error', (error)=>{
            log(error);
            reject(error);
        });
    });
}

//# sourceMappingURL=server.js.map