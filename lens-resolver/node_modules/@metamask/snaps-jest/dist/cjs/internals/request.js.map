{"version":3,"sources":["../../../src/internals/request.ts"],"sourcesContent":["import type { Component } from '@metamask/snaps-ui';\nimport type { SnapRpcHookArgs } from '@metamask/snaps-utils';\nimport { HandlerType } from '@metamask/snaps-utils';\nimport {\n  assert,\n  createModuleLogger,\n  hasProperty,\n  isPlainObject,\n} from '@metamask/utils';\nimport { getDocument, queries } from 'pptr-testing-library';\nimport type { Page } from 'puppeteer';\nimport { create } from 'superstruct';\n\nimport type {\n  CronjobOptions,\n  RequestOptions,\n  SnapRequest,\n  SnapResponse,\n  TransactionOptions,\n} from '../types';\nimport { getInterface, getNotifications } from './interface';\nimport { rootLogger } from './logger';\nimport { TransactionOptionsStruct } from './structs';\nimport { waitForResponse } from './wait-for';\n\nconst log = createModuleLogger(rootLogger, 'request');\n\n/**\n * Send a request to the snap.\n *\n * @param page - The page to send the request from.\n * @param args - The request arguments.\n * @returns The request ID.\n */\nasync function sendRequest(page: Page, args: SnapRpcHookArgs) {\n  const document = await getDocument(page);\n  const button = await queries.getByTestId(\n    document,\n    `navigation-${args.handler}`,\n  );\n\n  // Navigate to the request handler page.\n  await button.click();\n\n  return await page.evaluate((payload) => {\n    window.__SIMULATOR_API__.dispatch({\n      type: 'simulation/sendRequest',\n      payload,\n    });\n\n    return window.__SIMULATOR_API__.getRequestId();\n  }, args);\n}\n\n/**\n * Send a request to the snap.\n *\n * @param page - The page to send the request from.\n * @param options - The request options.\n * @param options.origin - The origin of the request. Defaults to `metamask.io`.\n * @param handler - The handler to use. Defaults to `onRpcRequest`.\n * @returns The response.\n */\nexport function request(\n  page: Page,\n  { origin = 'metamask.io', ...options }: RequestOptions,\n  handler:\n    | HandlerType.OnRpcRequest\n    | HandlerType.OnCronjob = HandlerType.OnRpcRequest,\n) {\n  const doRequest = async (): Promise<SnapResponse> => {\n    const args: SnapRpcHookArgs = {\n      origin,\n      handler,\n      request: {\n        jsonrpc: '2.0',\n        id: 1,\n        ...options,\n      },\n    };\n\n    log('Sending request %o', args);\n\n    const promise = waitForResponse(page, handler);\n    const id = await sendRequest(page, args);\n    const response = await promise;\n\n    log('Received response %o', response);\n\n    const notifications = await getNotifications(page, id);\n\n    return { id, response, notifications };\n  };\n\n  // This is a bit hacky, but it allows us to add the `getInterface` method\n  // to the response promise.\n  const response = doRequest() as SnapRequest;\n\n  response.getInterface = async (getInterfaceOptions) => {\n    return await getInterface(page, getInterfaceOptions);\n  };\n\n  return response;\n}\n\n/**\n * Send a transaction to the snap.\n *\n * @param page - The page to send the transaction from.\n * @param options - The transaction options.\n * @returns The response.\n */\nexport async function sendTransaction(\n  page: Page,\n  options: Partial<TransactionOptions>,\n) {\n  const {\n    origin: transactionOrigin,\n    chainId,\n    ...transaction\n  } = create(options, TransactionOptionsStruct);\n\n  const args: SnapRpcHookArgs = {\n    origin: '',\n    handler: HandlerType.OnTransaction,\n    request: {\n      jsonrpc: '2.0',\n      method: '',\n      params: {\n        chainId,\n        transaction,\n        transactionOrigin,\n      },\n    },\n  };\n\n  log('Sending transaction %o', args);\n\n  const promise = waitForResponse(page, HandlerType.OnTransaction);\n  const id = await sendRequest(page, args);\n  const response = await promise;\n\n  log('Received response %o', response);\n\n  if (hasProperty(response, 'error')) {\n    return { id, response, notifications: [] };\n  }\n\n  assert(isPlainObject(response.result));\n  assert(hasProperty(response.result, 'content'));\n\n  return {\n    id,\n    response,\n    notifications: [],\n    content: response.result.content as Component,\n  };\n}\n\n/**\n * Run a cronjob.\n *\n * @param page - The page to run the cronjob from.\n * @param options - The request options.\n * @returns The response.\n */\nexport function runCronjob(page: Page, options: CronjobOptions) {\n  return request(page, options, HandlerType.OnCronjob);\n}\n"],"names":["request","sendTransaction","runCronjob","log","createModuleLogger","rootLogger","sendRequest","page","args","document","getDocument","button","queries","getByTestId","handler","click","evaluate","payload","window","__SIMULATOR_API__","dispatch","type","getRequestId","origin","options","HandlerType","OnRpcRequest","doRequest","jsonrpc","id","promise","waitForResponse","response","notifications","getNotifications","getInterface","getInterfaceOptions","transactionOrigin","chainId","transaction","create","TransactionOptionsStruct","OnTransaction","method","params","hasProperty","assert","isPlainObject","result","content","OnCronjob"],"mappings":";;;;;;;;;;;IA+DgBA,OAAO;eAAPA;;IAiDMC,eAAe;eAAfA;;IAsDNC,UAAU;eAAVA;;;4BApKY;uBAMrB;oCAC8B;6BAEd;2BASwB;wBACpB;yBACc;yBACT;AAEhC,MAAMC,MAAMC,IAAAA,yBAAkB,EAACC,kBAAU,EAAE;AAE3C;;;;;;CAMC,GACD,eAAeC,YAAYC,IAAU,EAAEC,IAAqB;IAC1D,MAAMC,WAAW,MAAMC,IAAAA,+BAAW,EAACH;IACnC,MAAMI,SAAS,MAAMC,2BAAO,CAACC,WAAW,CACtCJ,UACA,CAAC,WAAW,EAAED,KAAKM,OAAO,CAAC,CAAC;IAG9B,wCAAwC;IACxC,MAAMH,OAAOI,KAAK;IAElB,OAAO,MAAMR,KAAKS,QAAQ,CAAC,CAACC;QAC1BC,OAAOC,iBAAiB,CAACC,QAAQ,CAAC;YAChCC,MAAM;YACNJ;QACF;QAEA,OAAOC,OAAOC,iBAAiB,CAACG,YAAY;IAC9C,GAAGd;AACL;AAWO,SAASR,QACdO,IAAU,EACV,EAAEgB,SAAS,aAAa,EAAE,GAAGC,SAAyB,EACtDV,UAE4BW,uBAAW,CAACC,YAAY;IAEpD,MAAMC,YAAY;QAChB,MAAMnB,OAAwB;YAC5Be;YACAT;YACAd,SAAS;gBACP4B,SAAS;gBACTC,IAAI;gBACJ,GAAGL,OAAO;YACZ;QACF;QAEArB,IAAI,sBAAsBK;QAE1B,MAAMsB,UAAUC,IAAAA,wBAAe,EAACxB,MAAMO;QACtC,MAAMe,KAAK,MAAMvB,YAAYC,MAAMC;QACnC,MAAMwB,WAAW,MAAMF;QAEvB3B,IAAI,wBAAwB6B;QAE5B,MAAMC,gBAAgB,MAAMC,IAAAA,2BAAgB,EAAC3B,MAAMsB;QAEnD,OAAO;YAAEA;YAAIG;YAAUC;QAAc;IACvC;IAEA,yEAAyE;IACzE,2BAA2B;IAC3B,MAAMD,WAAWL;IAEjBK,SAASG,YAAY,GAAG,OAAOC;QAC7B,OAAO,MAAMD,IAAAA,uBAAY,EAAC5B,MAAM6B;IAClC;IAEA,OAAOJ;AACT;AASO,eAAe/B,gBACpBM,IAAU,EACViB,OAAoC;IAEpC,MAAM,EACJD,QAAQc,iBAAiB,EACzBC,OAAO,EACP,GAAGC,aACJ,GAAGC,IAAAA,mBAAM,EAAChB,SAASiB,iCAAwB;IAE5C,MAAMjC,OAAwB;QAC5Be,QAAQ;QACRT,SAASW,uBAAW,CAACiB,aAAa;QAClC1C,SAAS;YACP4B,SAAS;YACTe,QAAQ;YACRC,QAAQ;gBACNN;gBACAC;gBACAF;YACF;QACF;IACF;IAEAlC,IAAI,0BAA0BK;IAE9B,MAAMsB,UAAUC,IAAAA,wBAAe,EAACxB,MAAMkB,uBAAW,CAACiB,aAAa;IAC/D,MAAMb,KAAK,MAAMvB,YAAYC,MAAMC;IACnC,MAAMwB,WAAW,MAAMF;IAEvB3B,IAAI,wBAAwB6B;IAE5B,IAAIa,IAAAA,kBAAW,EAACb,UAAU,UAAU;QAClC,OAAO;YAAEH;YAAIG;YAAUC,eAAe,EAAE;QAAC;IAC3C;IAEAa,IAAAA,aAAM,EAACC,IAAAA,oBAAa,EAACf,SAASgB,MAAM;IACpCF,IAAAA,aAAM,EAACD,IAAAA,kBAAW,EAACb,SAASgB,MAAM,EAAE;IAEpC,OAAO;QACLnB;QACAG;QACAC,eAAe,EAAE;QACjBgB,SAASjB,SAASgB,MAAM,CAACC,OAAO;IAClC;AACF;AASO,SAAS/C,WAAWK,IAAU,EAAEiB,OAAuB;IAC5D,OAAOxB,QAAQO,MAAMiB,SAASC,uBAAW,CAACyB,SAAS;AACrD"}