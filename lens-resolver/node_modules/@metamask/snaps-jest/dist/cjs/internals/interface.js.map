{"version":3,"sources":["../../../src/internals/interface.ts"],"sourcesContent":["import { DialogType } from '@metamask/rpc-methods';\nimport { assert } from '@metamask/utils';\nimport type { Page } from 'puppeteer';\nimport { create } from 'superstruct';\n\nimport type { SnapInterface, SnapOptions } from '../types';\nimport { SnapOptionsStruct } from './structs';\nimport { waitFor } from './wait-for';\n\n/**\n * Get the current snap user interface (i.e., dialog). This will throw an error\n * if the snap does not show a user interface within the timeout.\n *\n * @param page - The page to get the interface from.\n * @param options - The options to use.\n * @param options.timeout - The timeout in milliseconds to use. Defaults to\n * `1000`.\n * @returns The user interface object.\n */\nexport async function getInterface(\n  page: Page,\n  options: SnapOptions = {},\n): Promise<SnapInterface> {\n  const { timeout } = create(options, SnapOptionsStruct);\n\n  const { type, node: content } = await waitFor(\n    async () => {\n      const ui = await page.evaluate(() => {\n        const state = window.__SIMULATOR_API__.getState();\n        return state.simulation.ui;\n      });\n\n      assert(ui);\n      return ui;\n    },\n    {\n      timeout,\n      message: 'Timed out waiting for snap interface to be shown.',\n    },\n  );\n\n  switch (type) {\n    case DialogType.Alert:\n      return {\n        type: 'alert',\n        content,\n\n        ok: async () => {\n          await page.evaluate(() => {\n            window.__SIMULATOR_API__.dispatch({\n              type: 'simulation/resolveUserInterface',\n              payload: null,\n            });\n          });\n        },\n      };\n\n    case DialogType.Confirmation:\n      return {\n        type: 'confirmation',\n        content,\n\n        ok: async () => {\n          await page.evaluate(() => {\n            window.__SIMULATOR_API__.dispatch({\n              type: 'simulation/resolveUserInterface',\n              payload: true,\n            });\n          });\n        },\n\n        cancel: async () => {\n          await page.evaluate(() => {\n            window.__SIMULATOR_API__.dispatch({\n              type: 'simulation/resolveUserInterface',\n              payload: false,\n            });\n          });\n        },\n      };\n\n    case DialogType.Prompt:\n      return {\n        type: 'prompt',\n        content,\n\n        ok: async (value) => {\n          await page.evaluate((payload) => {\n            window.__SIMULATOR_API__.dispatch({\n              type: 'simulation/resolveUserInterface',\n              payload,\n            });\n          }, value);\n        },\n\n        cancel: async () => {\n          await page.evaluate(() => {\n            window.__SIMULATOR_API__.dispatch({\n              type: 'simulation/resolveUserInterface',\n              payload: null,\n            });\n          });\n        },\n      };\n\n    default:\n      throw new Error(`Unknown or unsupported dialog type: ${String(type)}.`);\n  }\n}\n\n/**\n * Get the text of the notifications.\n *\n * @param page - The page to get the notifications from.\n * @param requestId - The ID of the request to get the notifications for.\n * @returns The text of the notifications, in order of appearance.\n */\nexport async function getNotifications(page: Page, requestId: string) {\n  return await page.evaluate((id) => {\n    return window.__SIMULATOR_API__.getNotifications(id);\n  }, requestId);\n}\n"],"names":["getInterface","getNotifications","page","options","timeout","create","SnapOptionsStruct","type","node","content","waitFor","ui","evaluate","state","window","__SIMULATOR_API__","getState","simulation","assert","message","DialogType","Alert","ok","dispatch","payload","Confirmation","cancel","Prompt","value","Error","String","requestId","id"],"mappings":";;;;;;;;;;;IAmBsBA,YAAY;eAAZA;;IAkGAC,gBAAgB;eAAhBA;;;4BArHK;uBACJ;6BAEA;yBAGW;yBACV;AAYjB,eAAeD,aACpBE,IAAU,EACVC,UAAuB,CAAC,CAAC;IAEzB,MAAM,EAAEC,OAAO,EAAE,GAAGC,IAAAA,mBAAM,EAACF,SAASG,0BAAiB;IAErD,MAAM,EAAEC,IAAI,EAAEC,MAAMC,OAAO,EAAE,GAAG,MAAMC,IAAAA,gBAAO,EAC3C;QACE,MAAMC,KAAK,MAAMT,KAAKU,QAAQ,CAAC;YAC7B,MAAMC,QAAQC,OAAOC,iBAAiB,CAACC,QAAQ;YAC/C,OAAOH,MAAMI,UAAU,CAACN,EAAE;QAC5B;QAEAO,IAAAA,aAAM,EAACP;QACP,OAAOA;IACT,GACA;QACEP;QACAe,SAAS;IACX;IAGF,OAAQZ;QACN,KAAKa,sBAAU,CAACC,KAAK;YACnB,OAAO;gBACLd,MAAM;gBACNE;gBAEAa,IAAI;oBACF,MAAMpB,KAAKU,QAAQ,CAAC;wBAClBE,OAAOC,iBAAiB,CAACQ,QAAQ,CAAC;4BAChChB,MAAM;4BACNiB,SAAS;wBACX;oBACF;gBACF;YACF;QAEF,KAAKJ,sBAAU,CAACK,YAAY;YAC1B,OAAO;gBACLlB,MAAM;gBACNE;gBAEAa,IAAI;oBACF,MAAMpB,KAAKU,QAAQ,CAAC;wBAClBE,OAAOC,iBAAiB,CAACQ,QAAQ,CAAC;4BAChChB,MAAM;4BACNiB,SAAS;wBACX;oBACF;gBACF;gBAEAE,QAAQ;oBACN,MAAMxB,KAAKU,QAAQ,CAAC;wBAClBE,OAAOC,iBAAiB,CAACQ,QAAQ,CAAC;4BAChChB,MAAM;4BACNiB,SAAS;wBACX;oBACF;gBACF;YACF;QAEF,KAAKJ,sBAAU,CAACO,MAAM;YACpB,OAAO;gBACLpB,MAAM;gBACNE;gBAEAa,IAAI,OAAOM;oBACT,MAAM1B,KAAKU,QAAQ,CAAC,CAACY;wBACnBV,OAAOC,iBAAiB,CAACQ,QAAQ,CAAC;4BAChChB,MAAM;4BACNiB;wBACF;oBACF,GAAGI;gBACL;gBAEAF,QAAQ;oBACN,MAAMxB,KAAKU,QAAQ,CAAC;wBAClBE,OAAOC,iBAAiB,CAACQ,QAAQ,CAAC;4BAChChB,MAAM;4BACNiB,SAAS;wBACX;oBACF;gBACF;YACF;QAEF;YACE,MAAM,IAAIK,MAAM,CAAC,oCAAoC,EAAEC,OAAOvB,MAAM,CAAC,CAAC;IAC1E;AACF;AASO,eAAeN,iBAAiBC,IAAU,EAAE6B,SAAiB;IAClE,OAAO,MAAM7B,KAAKU,QAAQ,CAAC,CAACoB;QAC1B,OAAOlB,OAAOC,iBAAiB,CAACd,gBAAgB,CAAC+B;IACnD,GAAGD;AACL"}