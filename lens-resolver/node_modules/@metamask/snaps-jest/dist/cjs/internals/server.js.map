{"version":3,"sources":["../../../src/internals/server.ts"],"sourcesContent":["import type { SnapManifest } from '@metamask/snaps-utils';\nimport {\n  assertIsSnapManifest,\n  isDirectory,\n  isFile,\n} from '@metamask/snaps-utils';\nimport { createModuleLogger } from '@metamask/utils';\nimport express from 'express';\nimport { promises as fs } from 'fs';\nimport type { Server } from 'http';\nimport { createServer } from 'http';\nimport { resolve as pathResolve, dirname } from 'path';\n\nimport type { SnapsEnvironmentOptions } from '../options';\nimport { rootLogger } from './logger';\n\nconst SNAPS_EXECUTION_ENVIRONMENTS_PATH = pathResolve(\n  dirname(\n    require.resolve('@metamask/snaps-execution-environments/package.json'),\n  ),\n  'dist',\n  'browserify',\n  'iframe',\n);\n\nconst SNAPS_SIMULATOR_PATH = pathResolve(\n  dirname(require.resolve('@metamask/snaps-simulator/package.json')),\n  'dist',\n  'webpack',\n  'test',\n);\n\nexport type ServerOptions = Required<\n  // We need a double `Required` for the type to be inferred correctly.\n  Required<SnapsEnvironmentOptions>['server']\n>;\n\n/**\n * Check that:\n *\n * - The root directory exists.\n * - The root directory contains a `snap.manifest.json` file.\n * - The file path in the manifest exists.\n *\n * @param root - The root directory.\n * @throws If any of the checks fail.\n */\nasync function assertRoot(root: string) {\n  if (!root) {\n    throw new Error('You must specify a root directory.');\n  }\n\n  if (!(await isDirectory(root, false))) {\n    throw new Error(`Root directory \"${root}\" is not a directory.`);\n  }\n\n  const manifestPath = pathResolve(root, 'snap.manifest.json');\n  const manifest: SnapManifest = await fs\n    .readFile(manifestPath, 'utf8')\n    .then(JSON.parse);\n\n  assertIsSnapManifest(manifest);\n  const filePath = pathResolve(root, manifest.source.location.npm.filePath);\n\n  if (!(await isFile(filePath))) {\n    throw new Error(\n      `File \"${filePath}\" does not exist, or is not a file. Did you forget to build your snap?`,\n    );\n  }\n}\n\n/**\n * Start an HTTP server on `localhost` with a random port. This is used to serve\n * the static files for the environment.\n *\n * @param options - The options to use.\n * @param options.port - The port to use for the server.\n * @param options.root - The root directory to serve from the server.\n * @returns The HTTP server.\n */\nexport async function startServer(options: ServerOptions) {\n  await assertRoot(options.root);\n\n  const log = createModuleLogger(rootLogger, 'server');\n  const app = express();\n\n  app.use((_request, response, next) => {\n    response.header('Access-Control-Allow-Origin', '*');\n    response.header('Access-Control-Allow-Credentials', 'true');\n    response.header('Access-Control-Allow-Methods', 'GET, OPTIONS');\n    response.header('Access-Control-Allow-Headers', 'Content-Type');\n\n    next();\n  });\n\n  app.use('/environment', express.static(SNAPS_EXECUTION_ENVIRONMENTS_PATH));\n  app.use('/simulator', express.static(SNAPS_SIMULATOR_PATH));\n  app.use(express.static(pathResolve(process.cwd(), options.root)));\n\n  const server = createServer(app);\n  return await new Promise<Server>((resolve, reject) => {\n    server.listen(options.port, () => {\n      resolve(server);\n    });\n\n    server.on('error', (error) => {\n      log(error);\n      reject(error);\n    });\n  });\n}\n"],"names":["startServer","SNAPS_EXECUTION_ENVIRONMENTS_PATH","pathResolve","dirname","require","resolve","SNAPS_SIMULATOR_PATH","assertRoot","root","Error","isDirectory","manifestPath","manifest","fs","readFile","then","JSON","parse","assertIsSnapManifest","filePath","source","location","npm","isFile","options","log","createModuleLogger","rootLogger","app","express","use","_request","response","next","header","static","process","cwd","server","createServer","Promise","reject","listen","port","on","error"],"mappings":";;;;+BAgFsBA;;;eAAAA;;;4BA3Ef;uBAC4B;gEACf;oBACW;sBAEF;sBACmB;wBAGrB;;;;;;AAE3B,MAAMC,oCAAoCC,IAAAA,aAAW,EACnDC,IAAAA,aAAO,EACLC,QAAQC,OAAO,CAAC,yDAElB,QACA,cACA;AAGF,MAAMC,uBAAuBJ,IAAAA,aAAW,EACtCC,IAAAA,aAAO,EAACC,QAAQC,OAAO,CAAC,4CACxB,QACA,WACA;AAQF;;;;;;;;;CASC,GACD,eAAeE,WAAWC,IAAY;IACpC,IAAI,CAACA,MAAM;QACT,MAAM,IAAIC,MAAM;IAClB;IAEA,IAAI,CAAE,MAAMC,IAAAA,uBAAW,EAACF,MAAM,QAAS;QACrC,MAAM,IAAIC,MAAM,CAAC,gBAAgB,EAAED,KAAK,qBAAqB,CAAC;IAChE;IAEA,MAAMG,eAAeT,IAAAA,aAAW,EAACM,MAAM;IACvC,MAAMI,WAAyB,MAAMC,YAAE,CACpCC,QAAQ,CAACH,cAAc,QACvBI,IAAI,CAACC,KAAKC,KAAK;IAElBC,IAAAA,gCAAoB,EAACN;IACrB,MAAMO,WAAWjB,IAAAA,aAAW,EAACM,MAAMI,SAASQ,MAAM,CAACC,QAAQ,CAACC,GAAG,CAACH,QAAQ;IAExE,IAAI,CAAE,MAAMI,IAAAA,kBAAM,EAACJ,WAAY;QAC7B,MAAM,IAAIV,MACR,CAAC,MAAM,EAAEU,SAAS,sEAAsE,CAAC;IAE7F;AACF;AAWO,eAAenB,YAAYwB,OAAsB;IACtD,MAAMjB,WAAWiB,QAAQhB,IAAI;IAE7B,MAAMiB,MAAMC,IAAAA,yBAAkB,EAACC,kBAAU,EAAE;IAC3C,MAAMC,MAAMC,IAAAA,gBAAO;IAEnBD,IAAIE,GAAG,CAAC,CAACC,UAAUC,UAAUC;QAC3BD,SAASE,MAAM,CAAC,+BAA+B;QAC/CF,SAASE,MAAM,CAAC,oCAAoC;QACpDF,SAASE,MAAM,CAAC,gCAAgC;QAChDF,SAASE,MAAM,CAAC,gCAAgC;QAEhDD;IACF;IAEAL,IAAIE,GAAG,CAAC,gBAAgBD,gBAAO,CAACM,MAAM,CAAClC;IACvC2B,IAAIE,GAAG,CAAC,cAAcD,gBAAO,CAACM,MAAM,CAAC7B;IACrCsB,IAAIE,GAAG,CAACD,gBAAO,CAACM,MAAM,CAACjC,IAAAA,aAAW,EAACkC,QAAQC,GAAG,IAAIb,QAAQhB,IAAI;IAE9D,MAAM8B,SAASC,IAAAA,kBAAY,EAACX;IAC5B,OAAO,MAAM,IAAIY,QAAgB,CAACnC,SAASoC;QACzCH,OAAOI,MAAM,CAAClB,QAAQmB,IAAI,EAAE;YAC1BtC,QAAQiC;QACV;QAEAA,OAAOM,EAAE,CAAC,SAAS,CAACC;YAClBpB,IAAIoB;YACJJ,OAAOI;QACT;IACF;AACF"}