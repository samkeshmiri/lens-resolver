{"version":3,"sources":["../../src/matchers.ts"],"sourcesContent":["/* eslint-disable no-invalid-this */\n\n// Note: Because this file imports from `@jest/globals`, it can only be used in\n// a Jest environment. This is why it's not exported from the index file.\n\nimport { expect } from '@jest/globals';\nimport type { NotificationType } from '@metamask/rpc-methods';\nimport type { Component } from '@metamask/snaps-ui';\nimport type { EnumToUnion } from '@metamask/snaps-utils';\nimport type { Json } from '@metamask/utils';\nimport { hasProperty } from '@metamask/utils';\nimport type { MatcherFunction } from 'expect';\nimport type { MatcherHintOptions } from 'jest-matcher-utils';\nimport {\n  diff,\n  matcherErrorMessage,\n  matcherHint,\n  printReceived,\n  printWithType,\n  RECEIVED_COLOR,\n} from 'jest-matcher-utils';\nimport { is } from 'superstruct';\n\nimport { InterfaceStruct, SnapResponseStruct } from './internals';\nimport type { SnapResponse } from './types';\n\n/**\n * Ensure that the actual value is a response from the `request` function.\n *\n * @param actual - The actual value.\n * @param matcherName - The name of the matcher.\n * @param options - The matcher options.\n */\nfunction assertActualIsSnapResponse(\n  actual: unknown,\n  matcherName: string,\n  options?: MatcherHintOptions,\n): asserts actual is SnapResponse {\n  if (!is(actual, SnapResponseStruct)) {\n    throw new Error(\n      matcherErrorMessage(\n        matcherHint(matcherName, undefined, undefined, options),\n        `${RECEIVED_COLOR(\n          'received',\n        )} value must be a response from the \\`request\\` function`,\n        printWithType('Received', actual, printReceived),\n      ),\n    );\n  }\n}\n\n/**\n * Ensure that the actual value is a response from the `request` function, and\n * that it has a `ui` property.\n *\n * @param actual - The actual value.\n * @param matcherName - The name of the matcher.\n * @param options - The matcher options.\n */\nfunction assertHasInterface(\n  actual: unknown,\n  matcherName: string,\n  options?: MatcherHintOptions,\n): asserts actual is { content: Component } {\n  if (!is(actual, InterfaceStruct) || !actual.content) {\n    throw new Error(\n      matcherErrorMessage(\n        matcherHint(matcherName, undefined, undefined, options),\n        `${RECEIVED_COLOR('received')} value must have a \\`content\\` property`,\n        printWithType('Received', actual, printReceived),\n      ),\n    );\n  }\n}\n\n/**\n * Check if a JSON-RPC response matches the expected value. This matcher is\n * intended to be used with the `expect` global.\n *\n * @param actual - The actual response.\n * @param expected - The expected response.\n * @returns The status and message.\n */\nexport const toRespondWith: MatcherFunction<[expected: Json]> = function (\n  actual,\n  expected,\n) {\n  assertActualIsSnapResponse(actual, 'toRespondWith');\n\n  const { response } = actual;\n  if (hasProperty(response, 'error')) {\n    const message = () =>\n      `${this.utils.matcherHint('.toRespondWith')}\\n\\n` +\n      `Expected response: ${this.utils.printExpected(expected)}\\n` +\n      `Received error: ${this.utils.printReceived(response.error)}`;\n\n    return { message, pass: false };\n  }\n\n  const pass = this.equals(response.result, expected);\n  const message = pass\n    ? () =>\n        `${this.utils.matcherHint('.not.toRespondWith')}\\n\\n` +\n        `Expected: ${this.utils.printExpected(expected)}\\n` +\n        `Received: ${this.utils.printReceived(response.result)}`\n    : () =>\n        `${this.utils.matcherHint('.toRespondWith')}\\n\\n` +\n        `Expected: ${this.utils.printExpected(expected)}\\n` +\n        `Received: ${this.utils.printReceived(response.result)}`;\n\n  return { message, pass };\n};\n\nexport const toRespondWithError: MatcherFunction<[expected: Json]> = function (\n  actual,\n  expected,\n) {\n  assertActualIsSnapResponse(actual, 'toRespondWithError');\n\n  const { response } = actual;\n  if (hasProperty(response, 'result')) {\n    const message = () =>\n      `${this.utils.matcherHint('.toRespondWithError')}\\n\\n` +\n      `Expected error: ${this.utils.printExpected(expected)}\\n` +\n      `Received result: ${this.utils.printReceived(response.result)}`;\n\n    return { message, pass: false };\n  }\n\n  const pass = this.equals(response.error, expected);\n  const message = pass\n    ? () =>\n        `${this.utils.matcherHint('.not.toRespondWithError')}\\n\\n` +\n        `Expected: ${this.utils.printExpected(expected)}\\n` +\n        `Received: ${this.utils.printReceived(response.error)}`\n    : () =>\n        `${this.utils.matcherHint('.toRespondWithError')}\\n\\n` +\n        `Expected: ${this.utils.printExpected(expected)}\\n` +\n        `Received: ${this.utils.printReceived(response.error)}`;\n\n  return { message, pass };\n};\n\n/**\n * Check if the snap sent a notification with the expected message. This matcher\n * is intended to be used with the `expect` global.\n *\n * @param actual - The actual response.\n * @param expected - The expected notification message.\n * @param type - The expected notification type.\n * @returns The status and message.\n */\nexport const toSendNotification: MatcherFunction<\n  [expected: string, type?: EnumToUnion<NotificationType> | undefined]\n> = async function (actual, expected, type) {\n  assertActualIsSnapResponse(actual, 'toSendNotification');\n\n  const { notifications } = actual;\n  const pass = notifications.some(\n    (notification) =>\n      this.equals(notification.message, expected) &&\n      (type === undefined || notification.type === type),\n  );\n\n  const message = pass\n    ? () =>\n        `${this.utils.matcherHint('.not.toSendNotification')}\\n\\n` +\n        `Expected: ${this.utils.printExpected(expected)}\\n` +\n        `Expected type: ${this.utils.printExpected(type)}\\n` +\n        `Received: ${this.utils.printReceived(notifications)}`\n    : () =>\n        `${this.utils.matcherHint('.toSendNotification')}\\n\\n` +\n        `Expected: ${this.utils.printExpected(expected)}\\n` +\n        `Expected type: ${this.utils.printExpected(type)}\\n` +\n        `Received: ${this.utils.printReceived(notifications)}`;\n\n  return { message, pass };\n};\n\nexport const toRender: MatcherFunction<[expected: Component]> = function (\n  actual,\n  expected,\n) {\n  assertHasInterface(actual, 'toRender');\n\n  const { content } = actual;\n  const pass = this.equals(content, expected);\n\n  const difference = diff(expected, content);\n\n  const message = pass\n    ? () =>\n        `${this.utils.matcherHint('.not.toShowInterface')}\\n\\n` +\n        `Expected: ${this.utils.printExpected(expected)}\\n` +\n        `Received: ${this.utils.printReceived(content)}` +\n        `${difference ? `\\n\\nDifference:\\n\\n${difference}` : ''}`\n    : () =>\n        `${this.utils.matcherHint('.toShowInterface')}\\n\\n` +\n        `Expected: ${this.utils.printExpected(expected)}\\n` +\n        `Received: ${this.utils.printReceived(content)}` +\n        `${difference ? `\\n\\nDifference:\\n\\n${difference}` : ''}`;\n\n  return { message, pass };\n};\n\nexpect.extend({\n  toRespondWith,\n  toRespondWithError,\n  toSendNotification,\n  toRender,\n});\n"],"names":["toRespondWith","toRespondWithError","toSendNotification","toRender","assertActualIsSnapResponse","actual","matcherName","options","is","SnapResponseStruct","Error","matcherErrorMessage","matcherHint","undefined","RECEIVED_COLOR","printWithType","printReceived","assertHasInterface","InterfaceStruct","content","expected","response","hasProperty","message","utils","printExpected","error","pass","equals","result","type","notifications","some","notification","difference","diff","expect","extend"],"mappings":"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"}