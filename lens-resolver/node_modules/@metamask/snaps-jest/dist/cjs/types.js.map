{"version":3,"sources":["../../src/types.ts"],"sourcesContent":["import type { NotificationType } from '@metamask/rpc-methods';\nimport type { Component } from '@metamask/snaps-ui';\nimport type { EnumToUnion } from '@metamask/snaps-utils';\nimport type { JsonRpcId, JsonRpcParams } from '@metamask/utils';\nimport type { Infer } from 'superstruct';\n\nimport type {\n  Mock,\n  MockJsonRpcOptions,\n  MockOptions,\n  SnapOptionsStruct,\n  SnapResponseStruct,\n  TransactionOptionsStruct,\n} from './internals';\n\n/* eslint-disable @typescript-eslint/consistent-type-definitions */\ndeclare module 'expect' {\n  interface AsymmetricMatchers {\n    toRespondWith(response: unknown): void;\n    toRespondWithError(error: unknown): void;\n    toSendNotification(\n      message: string,\n      type?: EnumToUnion<NotificationType>,\n    ): void;\n    toRender(component: Component): void;\n  }\n\n  // Ideally we would use `Matchers<Result>` instead of `Matchers<R>`, but\n  // TypeScript doesn't allow this:\n  // TS2428: All declarations of 'Matchers' must have identical type parameters.\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  interface Matchers<R> {\n    toRespondWith(response: unknown): R;\n    toRespondWithError(error: unknown): R;\n    toSendNotification(\n      message: string,\n      type?: EnumToUnion<NotificationType>,\n    ): R;\n    toRender(component: Component): R;\n  }\n}\n/* eslint-enable @typescript-eslint/consistent-type-definitions */\n\n/**\n * Deeply partialize a type.\n *\n * @template Type - The type to partialize.\n * @returns The deeply partialized type.\n * @example\n * ```ts\n * type Foo = {\n *   bar: {\n *     baz: string;\n *   };\n *   qux: number;\n * };\n *\n * type PartialFoo = DeepPartial<Foo>;\n * // { bar?: { baz?: string; }; qux?: number; }\n * ```\n */\nexport type DeepPartial<Type> = {\n  [Key in keyof Type]?: Type[Key] extends Record<string, unknown>\n    ? DeepPartial<Type[Key]>\n    : Type[Key];\n};\n\nexport type RequestOptions = {\n  /**\n   * The JSON-RPC request ID.\n   */\n  id?: JsonRpcId;\n\n  /**\n   * The JSON-RPC method.\n   */\n  method: string;\n\n  /**\n   * The JSON-RPC params.\n   */\n  params?: JsonRpcParams;\n\n  /**\n   * The origin to send the request from.\n   */\n  origin?: string;\n};\n\n/**\n * The `runCronjob` options. This is the same as {@link RequestOptions}, except\n * that it does not have an `origin` property.\n */\nexport type CronjobOptions = Omit<RequestOptions, 'origin'>;\n\n/**\n * The options to use for transaction requests.\n *\n * @property chainId - The CAIP-2 chain ID to send the transaction on. Defaults\n * to `eip155:1`.\n * @property origin - The origin to send the transaction from. Defaults to\n * `metamask.io`.\n * @property from - The address to send the transaction from. Defaults to a\n * randomly generated address.\n * @property to - The address to send the transaction to. Defaults to a randomly\n * generated address.\n * @property value - The value to send with the transaction. Defaults to `0`.\n * @property data - The data to send with the transaction. Defaults to `0x`.\n * @property gasLimit - The gas limit to use for the transaction. Defaults to\n * `21_000`.\n * @property maxFeePerGas - The maximum fee per gas to use for the transaction.\n * Defaults to `1`.\n * @property maxPriorityFeePerGas - The maximum priority fee per gas to use for\n * the transaction. Defaults to `1`.\n * @property nonce - The nonce to use for the transaction. Defaults to `0`.\n */\nexport type TransactionOptions = Infer<typeof TransactionOptionsStruct>;\n\n/**\n * The options to use for requests to the snap.\n *\n * @property timeout - The timeout in milliseconds to use. Defaults to `1000`.\n */\nexport type SnapOptions = Infer<typeof SnapOptionsStruct>;\n\n/**\n * A `snap_dialog` alert interface.\n */\nexport type SnapAlertInterface = {\n  /**\n   * The type of the interface. This is always `alert`.\n   */\n  type: 'alert';\n\n  /**\n   * The content to show in the alert.\n   */\n  content: Component;\n\n  /**\n   * Close the alert.\n   */\n  ok(): Promise<void>;\n};\n\n/**\n * A `snap_dialog` confirmation interface.\n */\nexport type SnapConfirmationInterface = {\n  /**\n   * The type of the interface. This is always `confirmation`.\n   */\n  type: 'confirmation';\n\n  /**\n   * The content to show in the confirmation.\n   */\n  content: Component;\n\n  /**\n   * Close the confirmation.\n   */\n  ok(): Promise<void>;\n\n  /**\n   * Cancel the confirmation.\n   */\n  cancel(): Promise<void>;\n};\n\n/**\n * A `snap_dialog` prompt interface.\n */\nexport type SnapPromptInterface = {\n  /**\n   * The type of the interface. This is always `prompt`.\n   */\n  type: 'prompt';\n\n  /**\n   * The content to show in the prompt.\n   */\n  content: Component;\n\n  /**\n   * Close the prompt.\n   *\n   * @param value - The value to close the prompt with.\n   */\n  ok(value?: string): Promise<void>;\n\n  /**\n   * Cancel the prompt.\n   */\n  cancel(): Promise<void>;\n};\n\nexport type SnapInterface =\n  | SnapAlertInterface\n  | SnapConfirmationInterface\n  | SnapPromptInterface;\n\nexport type SnapRequestObject = {\n  /**\n   * Get a user interface object from a snap. This will throw an error if the\n   * snap does not show a user interface within the timeout.\n   *\n   * @param options - The options to use.\n   * @param options.timeout - The timeout in milliseconds to use. Defaults to\n   * `1000`.\n   * @returns The user interface object.\n   */\n  getInterface(options?: SnapOptions): Promise<SnapInterface>;\n};\n\n/**\n * A pending request object. This is a promise with extra\n * {@link SnapRequestObject} fields.\n */\nexport type SnapRequest = Promise<SnapResponse> & SnapRequestObject;\n\n/**\n * This is the main entry point to interact with the snap. It is returned by\n * {@link installSnap}, and has methods to send requests to the snap.\n *\n * @example\n * ```ts\n * import { installSnap } from '@metamask/snaps-jest';\n *\n * const snap = await installSnap();\n * const response = await snap.request({ method: 'hello' });\n *\n * expect(response).toRespondWith('Hello, world!');\n * ```\n */\nexport type Snap = {\n  /**\n   * Send a JSON-RPC request to the snap.\n   *\n   * @param request - The request. This is similar to a JSON-RPC request, but\n   * has an extra `origin` field.\n   * @returns The response promise, with extra {@link SnapRequestObject} fields.\n   */\n  request(request: RequestOptions): SnapRequest;\n\n  /**\n   * Send a transaction to the snap.\n   *\n   * @param transaction - The transaction. This is similar to an Ethereum\n   * transaction object, but has an extra `origin` field. Any missing fields\n   * will be filled in with default values.\n   * @returns The response.\n   */\n  sendTransaction(\n    transaction?: Partial<TransactionOptions>,\n  ): Promise<SnapResponse>;\n\n  /**\n   * Run a cronjob in the snap. This is similar to {@link request}, but the\n   * request will be sent to the `onCronjob` method of the snap.\n   *\n   * @param cronjob - The cronjob request. This is similar to a JSON-RPC\n   * request, and is normally specified in the snap manifest, under the\n   * `endowment:cronjob` permission.\n   * @returns The response promise, with extra {@link SnapRequestObject} fields.\n   */\n  runCronjob(cronjob: CronjobOptions): SnapRequest;\n\n  /**\n   * Close the page running the snap. This is mainly useful for cleaning up\n   * the test environment, and calling it is not strictly necessary.\n   *\n   * @returns A promise that resolves when the page is closed.\n   */\n  // TODO: Find a way to do this automatically.\n  close(): Promise<void>;\n\n  /**\n   * Enable network mocking for the snap.\n   *\n   * @param options - The options for the network mocking.\n   * @returns A {@link Mock} object, with an `unmock` function.\n   */\n  mock(options: DeepPartial<MockOptions>): Promise<Mock>;\n\n  /**\n   * Enable JSON-RPC provider mocking for the snap. This will mock any requests\n   * sent through the `ethereum` global, with the specified `method`.\n   *\n   * @param options - The options for the JSON-RPC mocking.\n   * @param options.method - The JSON-RPC method to mock, e.g.,\n   * `eth_blockNumber`.\n   * @param options.result - The JSON value to return.\n   * @returns A {@link Mock} object, with an `unmock` function.\n   */\n  mockJsonRpc(options: MockJsonRpcOptions): Promise<Mock>;\n};\n\nexport type SnapResponse = Infer<typeof SnapResponseStruct>;\n\nexport { NotificationType } from '@metamask/rpc-methods';\n"],"names":["NotificationType"],"mappings":";;;;+BA4SSA;;;eAAAA,4BAAgB;;;4BAAQ"}