import type { EnvironmentContext, JestEnvironmentConfig } from '@jest/environment';
import NodeEnvironment from 'jest-environment-node';
declare global {
    const browser: WebdriverIO.Browser;
    const snapsEnvironment: SnapsEnvironment;
}
export declare class SnapsEnvironment extends NodeEnvironment {
    #private;
    browser: WebdriverIO.Browser;
    /**
     * Constructor.
     *
     * @param options - The environment options.
     * @param context - The environment context.
     */
    constructor(options: JestEnvironmentConfig, context: EnvironmentContext);
    /**
     * Set up the environment. This starts the built-in HTTP server, and creates a
     * new browser instance.
     */
    setup(): Promise<void>;
    /**
     * Tear down the environment. This closes the browser, and stops the built-in
     * HTTP server.
     */
    teardown(): Promise<void>;
    /**
     * Get the URL to the simulator, including the environment URL.
     *
     * @returns The simulator URL.
     * @throws If the server is not running.
     */
    get url(): string;
    /**
     * Get the snap ID for the current environment, which is used if no snap ID is
     * passed to {@link installSnap}. This assumes that the built-in server is
     * running.
     *
     * @returns The snap ID.
     * @throws If the server is not running.
     */
    get snapId(): string;
    /**
     * Create a new page, and attach logging handlers.
     *
     * @param url - The page URL. Defaults to the specified Snaps Simulator URL,
     * or the default simulator URL if none is specified.
     * @param timeout - The page timeout, in milliseconds.
     * @returns The new page.
     */
    createPage(url?: string, timeout?: number): Promise<import("puppeteer").Page>;
}
export default SnapsEnvironment;
