import type { HandlerType } from '@metamask/snaps-utils';
import type { Page } from 'puppeteer';
export declare type WaitForOptions = {
    /**
     * The timeout in milliseconds.
     */
    timeout?: number;
    /**
     * The error message to throw if the condition is not met.
     */
    message?: string;
};
/**
 * Wait for a condition to be true. This is a wrapper around
 * `pptr-testing-library`'s `waitFor` function, with the addition of a custom
 * error message.
 *
 * @param fn - The condition to wait for.
 * @param options - The options.
 * @param options.timeout - The timeout in milliseconds.
 * @param options.message - The error message to throw if the condition is not
 * met.
 * @returns A promise that resolves when the condition is met. The promise
 * resolves to the return value of the condition function.
 */
export declare function waitFor<Result>(fn: () => Promise<Result>, { timeout, message }?: WaitForOptions): Promise<Result & ({} | null)>;
/**
 * Wait for a JSON-RPC response.
 *
 * @param page - The page to wait for the response on.
 * @param type - The type of response to wait for.
 * @returns The JSON-RPC response.
 */
export declare function waitForResponse(page: Page, type: HandlerType.OnTransaction | HandlerType.OnRpcRequest | HandlerType.OnCronjob): Promise<{
    result: import("@metamask/utils").Json;
} | {
    error: import("@metamask/utils").Json;
}>;
