import type { Page, HTTPRequest } from 'puppeteer';
import type { Infer, Struct } from 'superstruct';
import type { DeepPartial } from '../types';
export declare type Unmock = () => Promise<void>;
export declare type Mock = {
    /**
     * A function that can be used to unmock the URL.
     */
    unmock: Unmock;
};
/**
 * A function that can return `true` if the given request should be mocked, or
 * false if not.
 *
 * @param request - The request to check.
 * @returns Whether to mock the request.
 */
export declare type ConditionFunction = (request: HTTPRequest) => boolean;
export declare const MockOptionsStruct: Struct<{
    response: {
        headers: Record<string, unknown>;
        status: number;
        body: string;
        contentType: string;
    };
    url: string | RegExp;
    partial?: boolean | undefined;
} | {
    response: {
        headers: Record<string, unknown>;
        status: number;
        body: string;
        contentType: string;
    };
    condition: ConditionFunction;
}, null>;
/**
 * The options for the network mocking.
 *
 * @property url - The URL to mock. If a string is provided, the URL will be
 * matched exactly. If a RegExp is provided, the URL will be matched against it.
 * This option is incompatible with the `condition` option.
 * @property partial - If enabled, the request will be mocked if the URL starts
 * with the given URL. This option is ignored if a RegExp is provided to the
 * `url` option. This option is incompatible with the `condition` option.
 * @property condition - A function which gets the {@link HTTPRequest} as
 * parameter and returns a boolean to indicate whether the response should be
 * mocked or not. This option is incompatible with the `url` and `partial`
 * options.
 * @property response - The response to send for the request.
 * @property response.status - The status code to send for the response.
 * Defaults to `200`.
 * @property response.headers - The headers to send for the response. Defaults
 * to headers that enable CORS.
 * @property response.contentType - The content type to send for the response.
 * Defaults to `text/plain`.
 */
export declare type MockOptions = Infer<typeof MockOptionsStruct>;
/**
 * Enable network mocking for the given page, and all its sub-frames.
 *
 * @param page - The page to enable network mocking on.
 * @param options - The options for the network mocking.
 * @returns A {@link Mock} object, with an `unmock` function.
 */
export declare function mock(page: Page, options: DeepPartial<MockOptions>): Promise<Mock>;
declare const MockJsonRpcOptionsStruct: Struct<{
    method: string;
    result: import("@metamask/utils").Json;
}, {
    method: Struct<string, null>;
    result: Struct<import("@metamask/utils").Json, unknown>;
}>;
export declare type MockJsonRpcOptions = Infer<typeof MockJsonRpcOptionsStruct>;
/**
 * Mock an Ethereum JSON-RPC request. This intercepts all requests to the
 * Ethereum provider, and returns the `result` instead.
 *
 * @param page - The page to enable network JSON-RPC mocking on.
 * @param options - The options for the JSON-RPC mock.
 * @param options.method - The JSON-RPC method to mock. Any other methods will be
 * forwarded to the provider.
 * @param options.result - The JSON response to return.
 * @returns A {@link Mock} object, with an `unmock` function.
 */
export declare function mockJsonRpc(page: Page, { method, result }: MockJsonRpcOptions): Promise<Mock>;
export {};
