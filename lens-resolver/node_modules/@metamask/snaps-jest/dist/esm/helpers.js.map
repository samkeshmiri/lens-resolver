{"version":3,"sources":["../../src/helpers.ts"],"sourcesContent":["import { createModuleLogger } from '@metamask/utils';\nimport { getDocument, queries } from 'pptr-testing-library';\n\nimport {\n  getEnvironment,\n  mock,\n  waitFor,\n  request,\n  sendTransaction,\n  runCronjob,\n  mockJsonRpc,\n  rootLogger,\n} from './internals';\nimport type { Snap, SnapResponse } from './types';\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst { getByTestId } = queries;\n\nconst log = createModuleLogger(rootLogger, 'helpers');\n\n/**\n * Load a snap into the environment. This is the main entry point for testing\n * snaps: It returns a {@link Snap} object that can be used to interact with the\n * snap.\n *\n * @example\n * ```ts\n * import { installSnap } from '@metamask/snaps-jest';\n *\n * describe('My Snap', () => {\n *   it('should do something', async () => {\n *     const { request } = await installSnap('local:my-snap');\n *     const response = await request({\n *       method: 'foo',\n *       params: ['bar'],\n *     });\n *     expect(response).toRespondWith('bar');\n *   });\n * });\n * ```\n * @param snapId - The ID of the snap, including the prefix (`local:`). Defaults\n * to the URL of the built-in server, if it is running. This supports both\n * local snap IDs and NPM snap IDs.\n * @returns The snap.\n * @throws If the built-in server is not running, and no snap ID is provided.\n */\nexport async function installSnap(\n  snapId: string = getEnvironment().snapId,\n): Promise<Snap> {\n  const environment = getEnvironment();\n\n  log('Installing snap %s.', snapId);\n\n  const page = await environment.createPage();\n  const document = await getDocument(page);\n\n  log('Setting snap ID to %s.', snapId);\n  await page.evaluate((payload) => {\n    window.__SIMULATOR_API__.dispatch({\n      type: 'configuration/setSnapId',\n      payload,\n    });\n  }, snapId);\n\n  log('Waiting for snap to install.');\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  await waitFor(async () => await getByTestId(document, 'status-ok'), {\n    timeout: 10000,\n    message: `Timed out waiting for snap to install. Make sure the snap ID (\"${snapId}\") is correct, and the server is running.`,\n  });\n\n  return {\n    request: (options) => {\n      log('Sending request %o.', options);\n\n      // Note: This function is intentionally not async, so that we can access\n      // the `getInterface` method on the response.\n      return request(page, options);\n    },\n\n    sendTransaction: async (options = {}): Promise<SnapResponse> => {\n      log('Sending transaction %o.', options);\n\n      return await sendTransaction(page, options);\n    },\n\n    runCronjob: (options) => {\n      log('Running cronjob %o.', options);\n\n      // Note: This function is intentionally not async, so that we can access\n      // the `getInterface` method on the response.\n      return runCronjob(page, options);\n    },\n\n    close: async () => {\n      log('Closing page.');\n\n      await page.close();\n    },\n\n    mock: async (options) => {\n      log('Mocking %o.', options);\n\n      return await mock(page, options);\n    },\n\n    mockJsonRpc: async (options) => {\n      log('Mocking JSON-RPC %o.', options);\n\n      return await mockJsonRpc(page, options);\n    },\n  };\n}\n"],"names":["createModuleLogger","getDocument","queries","getEnvironment","mock","waitFor","request","sendTransaction","runCronjob","mockJsonRpc","rootLogger","getByTestId","log","installSnap","snapId","environment","page","createPage","document","evaluate","payload","window","__SIMULATOR_API__","dispatch","type","timeout","message","options","close"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,kBAAkB;AACrD,SAASC,WAAW,EAAEC,OAAO,QAAQ,uBAAuB;AAE5D,SACEC,cAAc,EACdC,IAAI,EACJC,OAAO,EACPC,OAAO,EACPC,eAAe,EACfC,UAAU,EACVC,WAAW,EACXC,UAAU,QACL,cAAc;AAGrB,6DAA6D;AAC7D,MAAM,EAAEC,WAAW,EAAE,GAAGT;AAExB,MAAMU,MAAMZ,mBAAmBU,YAAY;AAE3C;;;;;;;;;;;;;;;;;;;;;;;;;CAyBC,GACD,OAAO,eAAeG,YACpBC,SAAiBX,iBAAiBW,MAAM;IAExC,MAAMC,cAAcZ;IAEpBS,IAAI,uBAAuBE;IAE3B,MAAME,OAAO,MAAMD,YAAYE,UAAU;IACzC,MAAMC,WAAW,MAAMjB,YAAYe;IAEnCJ,IAAI,0BAA0BE;IAC9B,MAAME,KAAKG,QAAQ,CAAC,CAACC;QACnBC,OAAOC,iBAAiB,CAACC,QAAQ,CAAC;YAChCC,MAAM;YACNJ;QACF;IACF,GAAGN;IAEHF,IAAI;IACJ,kEAAkE;IAClE,MAAMP,QAAQ,UAAY,MAAMM,YAAYO,UAAU,cAAc;QAClEO,SAAS;QACTC,SAAS,CAAC,+DAA+D,EAAEZ,OAAO,yCAAyC,CAAC;IAC9H;IAEA,OAAO;QACLR,SAAS,CAACqB;YACRf,IAAI,uBAAuBe;YAE3B,wEAAwE;YACxE,6CAA6C;YAC7C,OAAOrB,QAAQU,MAAMW;QACvB;QAEApB,iBAAiB,OAAOoB,UAAU,CAAC,CAAC;YAClCf,IAAI,2BAA2Be;YAE/B,OAAO,MAAMpB,gBAAgBS,MAAMW;QACrC;QAEAnB,YAAY,CAACmB;YACXf,IAAI,uBAAuBe;YAE3B,wEAAwE;YACxE,6CAA6C;YAC7C,OAAOnB,WAAWQ,MAAMW;QAC1B;QAEAC,OAAO;YACLhB,IAAI;YAEJ,MAAMI,KAAKY,KAAK;QAClB;QAEAxB,MAAM,OAAOuB;YACXf,IAAI,eAAee;YAEnB,OAAO,MAAMvB,KAAKY,MAAMW;QAC1B;QAEAlB,aAAa,OAAOkB;YAClBf,IAAI,wBAAwBe;YAE5B,OAAO,MAAMlB,YAAYO,MAAMW;QACjC;IACF;AACF"}