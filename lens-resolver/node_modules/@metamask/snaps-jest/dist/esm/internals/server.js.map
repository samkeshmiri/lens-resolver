{"version":3,"sources":["../../../src/internals/server.ts"],"sourcesContent":["import type { SnapManifest } from '@metamask/snaps-utils';\nimport {\n  assertIsSnapManifest,\n  isDirectory,\n  isFile,\n} from '@metamask/snaps-utils';\nimport { createModuleLogger } from '@metamask/utils';\nimport express from 'express';\nimport { promises as fs } from 'fs';\nimport type { Server } from 'http';\nimport { createServer } from 'http';\nimport { resolve as pathResolve, dirname } from 'path';\n\nimport type { SnapsEnvironmentOptions } from '../options';\nimport { rootLogger } from './logger';\n\nconst SNAPS_EXECUTION_ENVIRONMENTS_PATH = pathResolve(\n  dirname(\n    require.resolve('@metamask/snaps-execution-environments/package.json'),\n  ),\n  'dist',\n  'browserify',\n  'iframe',\n);\n\nconst SNAPS_SIMULATOR_PATH = pathResolve(\n  dirname(require.resolve('@metamask/snaps-simulator/package.json')),\n  'dist',\n  'webpack',\n  'test',\n);\n\nexport type ServerOptions = Required<\n  // We need a double `Required` for the type to be inferred correctly.\n  Required<SnapsEnvironmentOptions>['server']\n>;\n\n/**\n * Check that:\n *\n * - The root directory exists.\n * - The root directory contains a `snap.manifest.json` file.\n * - The file path in the manifest exists.\n *\n * @param root - The root directory.\n * @throws If any of the checks fail.\n */\nasync function assertRoot(root: string) {\n  if (!root) {\n    throw new Error('You must specify a root directory.');\n  }\n\n  if (!(await isDirectory(root, false))) {\n    throw new Error(`Root directory \"${root}\" is not a directory.`);\n  }\n\n  const manifestPath = pathResolve(root, 'snap.manifest.json');\n  const manifest: SnapManifest = await fs\n    .readFile(manifestPath, 'utf8')\n    .then(JSON.parse);\n\n  assertIsSnapManifest(manifest);\n  const filePath = pathResolve(root, manifest.source.location.npm.filePath);\n\n  if (!(await isFile(filePath))) {\n    throw new Error(\n      `File \"${filePath}\" does not exist, or is not a file. Did you forget to build your snap?`,\n    );\n  }\n}\n\n/**\n * Start an HTTP server on `localhost` with a random port. This is used to serve\n * the static files for the environment.\n *\n * @param options - The options to use.\n * @param options.port - The port to use for the server.\n * @param options.root - The root directory to serve from the server.\n * @returns The HTTP server.\n */\nexport async function startServer(options: ServerOptions) {\n  await assertRoot(options.root);\n\n  const log = createModuleLogger(rootLogger, 'server');\n  const app = express();\n\n  app.use((_request, response, next) => {\n    response.header('Access-Control-Allow-Origin', '*');\n    response.header('Access-Control-Allow-Credentials', 'true');\n    response.header('Access-Control-Allow-Methods', 'GET, OPTIONS');\n    response.header('Access-Control-Allow-Headers', 'Content-Type');\n\n    next();\n  });\n\n  app.use('/environment', express.static(SNAPS_EXECUTION_ENVIRONMENTS_PATH));\n  app.use('/simulator', express.static(SNAPS_SIMULATOR_PATH));\n  app.use(express.static(pathResolve(process.cwd(), options.root)));\n\n  const server = createServer(app);\n  return await new Promise<Server>((resolve, reject) => {\n    server.listen(options.port, () => {\n      resolve(server);\n    });\n\n    server.on('error', (error) => {\n      log(error);\n      reject(error);\n    });\n  });\n}\n"],"names":["assertIsSnapManifest","isDirectory","isFile","createModuleLogger","express","promises","fs","createServer","resolve","pathResolve","dirname","rootLogger","SNAPS_EXECUTION_ENVIRONMENTS_PATH","require","SNAPS_SIMULATOR_PATH","assertRoot","root","Error","manifestPath","manifest","readFile","then","JSON","parse","filePath","source","location","npm","startServer","options","log","app","use","_request","response","next","header","static","process","cwd","server","Promise","reject","listen","port","on","error"],"mappings":"AACA,SACEA,oBAAoB,EACpBC,WAAW,EACXC,MAAM,QACD,wBAAwB;AAC/B,SAASC,kBAAkB,QAAQ,kBAAkB;AACrD,OAAOC,aAAa,UAAU;AAC9B,SAASC,YAAYC,EAAE,QAAQ,KAAK;AAEpC,SAASC,YAAY,QAAQ,OAAO;AACpC,SAASC,WAAWC,WAAW,EAAEC,OAAO,QAAQ,OAAO;AAGvD,SAASC,UAAU,QAAQ,WAAW;AAEtC,MAAMC,oCAAoCH,YACxCC,QACEG,QAAQL,OAAO,CAAC,yDAElB,QACA,cACA;AAGF,MAAMM,uBAAuBL,YAC3BC,QAAQG,QAAQL,OAAO,CAAC,4CACxB,QACA,WACA;AAQF;;;;;;;;;CASC,GACD,eAAeO,WAAWC,IAAY;IACpC,IAAI,CAACA,MAAM;QACT,MAAM,IAAIC,MAAM;IAClB;IAEA,IAAI,CAAE,MAAMhB,YAAYe,MAAM,QAAS;QACrC,MAAM,IAAIC,MAAM,CAAC,gBAAgB,EAAED,KAAK,qBAAqB,CAAC;IAChE;IAEA,MAAME,eAAeT,YAAYO,MAAM;IACvC,MAAMG,WAAyB,MAAMb,GAClCc,QAAQ,CAACF,cAAc,QACvBG,IAAI,CAACC,KAAKC,KAAK;IAElBvB,qBAAqBmB;IACrB,MAAMK,WAAWf,YAAYO,MAAMG,SAASM,MAAM,CAACC,QAAQ,CAACC,GAAG,CAACH,QAAQ;IAExE,IAAI,CAAE,MAAMtB,OAAOsB,WAAY;QAC7B,MAAM,IAAIP,MACR,CAAC,MAAM,EAAEO,SAAS,sEAAsE,CAAC;IAE7F;AACF;AAEA;;;;;;;;CAQC,GACD,OAAO,eAAeI,YAAYC,OAAsB;IACtD,MAAMd,WAAWc,QAAQb,IAAI;IAE7B,MAAMc,MAAM3B,mBAAmBQ,YAAY;IAC3C,MAAMoB,MAAM3B;IAEZ2B,IAAIC,GAAG,CAAC,CAACC,UAAUC,UAAUC;QAC3BD,SAASE,MAAM,CAAC,+BAA+B;QAC/CF,SAASE,MAAM,CAAC,oCAAoC;QACpDF,SAASE,MAAM,CAAC,gCAAgC;QAChDF,SAASE,MAAM,CAAC,gCAAgC;QAEhDD;IACF;IAEAJ,IAAIC,GAAG,CAAC,gBAAgB5B,QAAQiC,MAAM,CAACzB;IACvCmB,IAAIC,GAAG,CAAC,cAAc5B,QAAQiC,MAAM,CAACvB;IACrCiB,IAAIC,GAAG,CAAC5B,QAAQiC,MAAM,CAAC5B,YAAY6B,QAAQC,GAAG,IAAIV,QAAQb,IAAI;IAE9D,MAAMwB,SAASjC,aAAawB;IAC5B,OAAO,MAAM,IAAIU,QAAgB,CAACjC,SAASkC;QACzCF,OAAOG,MAAM,CAACd,QAAQe,IAAI,EAAE;YAC1BpC,QAAQgC;QACV;QAEAA,OAAOK,EAAE,CAAC,SAAS,CAACC;YAClBhB,IAAIgB;YACJJ,OAAOI;QACT;IACF;AACF"}