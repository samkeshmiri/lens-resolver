{"version":3,"sources":["../../../src/internals/request.ts"],"sourcesContent":["import type { Component } from '@metamask/snaps-ui';\nimport type { SnapRpcHookArgs } from '@metamask/snaps-utils';\nimport { HandlerType } from '@metamask/snaps-utils';\nimport {\n  assert,\n  createModuleLogger,\n  hasProperty,\n  isPlainObject,\n} from '@metamask/utils';\nimport { getDocument, queries } from 'pptr-testing-library';\nimport type { Page } from 'puppeteer';\nimport { create } from 'superstruct';\n\nimport type {\n  CronjobOptions,\n  RequestOptions,\n  SnapRequest,\n  SnapResponse,\n  TransactionOptions,\n} from '../types';\nimport { getInterface, getNotifications } from './interface';\nimport { rootLogger } from './logger';\nimport { TransactionOptionsStruct } from './structs';\nimport { waitForResponse } from './wait-for';\n\nconst log = createModuleLogger(rootLogger, 'request');\n\n/**\n * Send a request to the snap.\n *\n * @param page - The page to send the request from.\n * @param args - The request arguments.\n * @returns The request ID.\n */\nasync function sendRequest(page: Page, args: SnapRpcHookArgs) {\n  const document = await getDocument(page);\n  const button = await queries.getByTestId(\n    document,\n    `navigation-${args.handler}`,\n  );\n\n  // Navigate to the request handler page.\n  await button.click();\n\n  return await page.evaluate((payload) => {\n    window.__SIMULATOR_API__.dispatch({\n      type: 'simulation/sendRequest',\n      payload,\n    });\n\n    return window.__SIMULATOR_API__.getRequestId();\n  }, args);\n}\n\n/**\n * Send a request to the snap.\n *\n * @param page - The page to send the request from.\n * @param options - The request options.\n * @param options.origin - The origin of the request. Defaults to `metamask.io`.\n * @param handler - The handler to use. Defaults to `onRpcRequest`.\n * @returns The response.\n */\nexport function request(\n  page: Page,\n  { origin = 'metamask.io', ...options }: RequestOptions,\n  handler:\n    | HandlerType.OnRpcRequest\n    | HandlerType.OnCronjob = HandlerType.OnRpcRequest,\n) {\n  const doRequest = async (): Promise<SnapResponse> => {\n    const args: SnapRpcHookArgs = {\n      origin,\n      handler,\n      request: {\n        jsonrpc: '2.0',\n        id: 1,\n        ...options,\n      },\n    };\n\n    log('Sending request %o', args);\n\n    const promise = waitForResponse(page, handler);\n    const id = await sendRequest(page, args);\n    const response = await promise;\n\n    log('Received response %o', response);\n\n    const notifications = await getNotifications(page, id);\n\n    return { id, response, notifications };\n  };\n\n  // This is a bit hacky, but it allows us to add the `getInterface` method\n  // to the response promise.\n  const response = doRequest() as SnapRequest;\n\n  response.getInterface = async (getInterfaceOptions) => {\n    return await getInterface(page, getInterfaceOptions);\n  };\n\n  return response;\n}\n\n/**\n * Send a transaction to the snap.\n *\n * @param page - The page to send the transaction from.\n * @param options - The transaction options.\n * @returns The response.\n */\nexport async function sendTransaction(\n  page: Page,\n  options: Partial<TransactionOptions>,\n) {\n  const {\n    origin: transactionOrigin,\n    chainId,\n    ...transaction\n  } = create(options, TransactionOptionsStruct);\n\n  const args: SnapRpcHookArgs = {\n    origin: '',\n    handler: HandlerType.OnTransaction,\n    request: {\n      jsonrpc: '2.0',\n      method: '',\n      params: {\n        chainId,\n        transaction,\n        transactionOrigin,\n      },\n    },\n  };\n\n  log('Sending transaction %o', args);\n\n  const promise = waitForResponse(page, HandlerType.OnTransaction);\n  const id = await sendRequest(page, args);\n  const response = await promise;\n\n  log('Received response %o', response);\n\n  if (hasProperty(response, 'error')) {\n    return { id, response, notifications: [] };\n  }\n\n  assert(isPlainObject(response.result));\n  assert(hasProperty(response.result, 'content'));\n\n  return {\n    id,\n    response,\n    notifications: [],\n    content: response.result.content as Component,\n  };\n}\n\n/**\n * Run a cronjob.\n *\n * @param page - The page to run the cronjob from.\n * @param options - The request options.\n * @returns The response.\n */\nexport function runCronjob(page: Page, options: CronjobOptions) {\n  return request(page, options, HandlerType.OnCronjob);\n}\n"],"names":["HandlerType","assert","createModuleLogger","hasProperty","isPlainObject","getDocument","queries","create","getInterface","getNotifications","rootLogger","TransactionOptionsStruct","waitForResponse","log","sendRequest","page","args","document","button","getByTestId","handler","click","evaluate","payload","window","__SIMULATOR_API__","dispatch","type","getRequestId","request","origin","options","OnRpcRequest","doRequest","jsonrpc","id","promise","response","notifications","getInterfaceOptions","sendTransaction","transactionOrigin","chainId","transaction","OnTransaction","method","params","result","content","runCronjob","OnCronjob"],"mappings":"AAEA,SAASA,WAAW,QAAQ,wBAAwB;AACpD,SACEC,MAAM,EACNC,kBAAkB,EAClBC,WAAW,EACXC,aAAa,QACR,kBAAkB;AACzB,SAASC,WAAW,EAAEC,OAAO,QAAQ,uBAAuB;AAE5D,SAASC,MAAM,QAAQ,cAAc;AASrC,SAASC,YAAY,EAAEC,gBAAgB,QAAQ,cAAc;AAC7D,SAASC,UAAU,QAAQ,WAAW;AACtC,SAASC,wBAAwB,QAAQ,YAAY;AACrD,SAASC,eAAe,QAAQ,aAAa;AAE7C,MAAMC,MAAMX,mBAAmBQ,YAAY;AAE3C;;;;;;CAMC,GACD,eAAeI,YAAYC,IAAU,EAAEC,IAAqB;IAC1D,MAAMC,WAAW,MAAMZ,YAAYU;IACnC,MAAMG,SAAS,MAAMZ,QAAQa,WAAW,CACtCF,UACA,CAAC,WAAW,EAAED,KAAKI,OAAO,CAAC,CAAC;IAG9B,wCAAwC;IACxC,MAAMF,OAAOG,KAAK;IAElB,OAAO,MAAMN,KAAKO,QAAQ,CAAC,CAACC;QAC1BC,OAAOC,iBAAiB,CAACC,QAAQ,CAAC;YAChCC,MAAM;YACNJ;QACF;QAEA,OAAOC,OAAOC,iBAAiB,CAACG,YAAY;IAC9C,GAAGZ;AACL;AAEA;;;;;;;;CAQC,GACD,OAAO,SAASa,QACdd,IAAU,EACV,EAAEe,SAAS,aAAa,EAAE,GAAGC,SAAyB,EACtDX,UAE4BpB,YAAYgC,YAAY;IAEpD,MAAMC,YAAY;QAChB,MAAMjB,OAAwB;YAC5Bc;YACAV;YACAS,SAAS;gBACPK,SAAS;gBACTC,IAAI;gBACJ,GAAGJ,OAAO;YACZ;QACF;QAEAlB,IAAI,sBAAsBG;QAE1B,MAAMoB,UAAUxB,gBAAgBG,MAAMK;QACtC,MAAMe,KAAK,MAAMrB,YAAYC,MAAMC;QACnC,MAAMqB,WAAW,MAAMD;QAEvBvB,IAAI,wBAAwBwB;QAE5B,MAAMC,gBAAgB,MAAM7B,iBAAiBM,MAAMoB;QAEnD,OAAO;YAAEA;YAAIE;YAAUC;QAAc;IACvC;IAEA,yEAAyE;IACzE,2BAA2B;IAC3B,MAAMD,WAAWJ;IAEjBI,SAAS7B,YAAY,GAAG,OAAO+B;QAC7B,OAAO,MAAM/B,aAAaO,MAAMwB;IAClC;IAEA,OAAOF;AACT;AAEA;;;;;;CAMC,GACD,OAAO,eAAeG,gBACpBzB,IAAU,EACVgB,OAAoC;IAEpC,MAAM,EACJD,QAAQW,iBAAiB,EACzBC,OAAO,EACP,GAAGC,aACJ,GAAGpC,OAAOwB,SAASpB;IAEpB,MAAMK,OAAwB;QAC5Bc,QAAQ;QACRV,SAASpB,YAAY4C,aAAa;QAClCf,SAAS;YACPK,SAAS;YACTW,QAAQ;YACRC,QAAQ;gBACNJ;gBACAC;gBACAF;YACF;QACF;IACF;IAEA5B,IAAI,0BAA0BG;IAE9B,MAAMoB,UAAUxB,gBAAgBG,MAAMf,YAAY4C,aAAa;IAC/D,MAAMT,KAAK,MAAMrB,YAAYC,MAAMC;IACnC,MAAMqB,WAAW,MAAMD;IAEvBvB,IAAI,wBAAwBwB;IAE5B,IAAIlC,YAAYkC,UAAU,UAAU;QAClC,OAAO;YAAEF;YAAIE;YAAUC,eAAe,EAAE;QAAC;IAC3C;IAEArC,OAAOG,cAAciC,SAASU,MAAM;IACpC9C,OAAOE,YAAYkC,SAASU,MAAM,EAAE;IAEpC,OAAO;QACLZ;QACAE;QACAC,eAAe,EAAE;QACjBU,SAASX,SAASU,MAAM,CAACC,OAAO;IAClC;AACF;AAEA;;;;;;CAMC,GACD,OAAO,SAASC,WAAWlC,IAAU,EAAEgB,OAAuB;IAC5D,OAAOF,QAAQd,MAAMgB,SAAS/B,YAAYkD,SAAS;AACrD"}