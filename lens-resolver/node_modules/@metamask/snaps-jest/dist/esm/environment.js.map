{"version":3,"sources":["../../src/environment.ts"],"sourcesContent":["import type {\n  EnvironmentContext,\n  JestEnvironmentConfig,\n} from '@jest/environment';\nimport { assert, createModuleLogger } from '@metamask/utils';\nimport type { Server } from 'http';\nimport NodeEnvironment from 'jest-environment-node';\nimport type { AddressInfo } from 'net';\nimport type { Browser } from 'puppeteer';\nimport { remote } from 'webdriverio';\n\nimport { rootLogger, startServer } from './internals';\nimport type { SnapsEnvironmentOptions } from './options';\nimport { getOptions } from './options';\n\n/* eslint-disable */\ndeclare global {\n  const browser: WebdriverIO.Browser;\n  const snapsEnvironment: SnapsEnvironment;\n}\n/* eslint-enable */\n\nconst log = createModuleLogger(rootLogger, 'environment');\n\nexport class SnapsEnvironment extends NodeEnvironment {\n  // `browser` is always set in the environment setup function. To avoid needing\n  // to check for `undefined` everywhere, we use a type assertion here.\n  browser!: WebdriverIO.Browser;\n\n  #options: SnapsEnvironmentOptions;\n\n  #server: Server | undefined;\n\n  /**\n   * Constructor.\n   *\n   * @param options - The environment options.\n   * @param context - The environment context.\n   */\n  constructor(options: JestEnvironmentConfig, context: EnvironmentContext) {\n    super(options, context);\n    this.#options = getOptions(options.projectConfig.testEnvironmentOptions);\n  }\n\n  /**\n   * Set up the environment. This starts the built-in HTTP server, and creates a\n   * new browser instance.\n   */\n  async setup() {\n    await super.setup();\n\n    if (this.#options.server.enabled) {\n      log('Starting server.');\n      this.#server = await startServer(this.#options.server);\n    }\n\n    const args = [];\n    if (this.#options.browser.headless) {\n      args.push('--headless', '--disable-gpu');\n    }\n\n    log('Starting browser.');\n    this.browser = await remote({\n      logLevel: 'error',\n      capabilities: {\n        browserName: 'chrome',\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        'goog:chromeOptions': {\n          args,\n        },\n      },\n    });\n\n    this.global.browser = this.browser;\n    this.global.snapsEnvironment = this;\n  }\n\n  /**\n   * Tear down the environment. This closes the browser, and stops the built-in\n   * HTTP server.\n   */\n  async teardown() {\n    if (this.#options.keepAlive) {\n      log('Not tearing down environment because keepAlive is enabled.');\n      return;\n    }\n\n    log('Closing browser, and stopping server.');\n    await this.browser?.deleteSession();\n    this.#server?.close();\n\n    await super.teardown();\n  }\n\n  /**\n   * Get the URL to the simulator, including the environment URL.\n   *\n   * @returns The simulator URL.\n   * @throws If the server is not running.\n   */\n  get url() {\n    assert(this.#server, 'Server is not running.');\n\n    const { port } = this.#server.address() as AddressInfo;\n    const simulatorUrl =\n      this.#options.simulatorUrl ?? `http://localhost:${port}/simulator/`;\n\n    const executionEnvironmentUrl =\n      this.#options.executionEnvironmentUrl ??\n      `http://localhost:${port}/environment/`;\n\n    return `${simulatorUrl}?environment=${encodeURIComponent(\n      executionEnvironmentUrl,\n    )}`;\n  }\n\n  /**\n   * Get the snap ID for the current environment, which is used if no snap ID is\n   * passed to {@link installSnap}. This assumes that the built-in server is\n   * running.\n   *\n   * @returns The snap ID.\n   * @throws If the server is not running.\n   */\n  get snapId() {\n    assert(\n      this.#server,\n      'You must specify a snap ID, because the built-in server is not running.',\n    );\n\n    const { port } = this.#server.address() as AddressInfo;\n    return `local:http://localhost:${port}`;\n  }\n\n  /**\n   * Create a new page, and attach logging handlers.\n   *\n   * @param url - The page URL. Defaults to the specified Snaps Simulator URL,\n   * or the default simulator URL if none is specified.\n   * @param timeout - The page timeout, in milliseconds.\n   * @returns The new page.\n   */\n  async createPage(url: string = this.url, timeout = 10000) {\n    const puppeteer = (await this.browser.getPuppeteer()) as unknown as Browser;\n    const page = await puppeteer.newPage();\n\n    page.setDefaultTimeout(timeout);\n    page.setDefaultNavigationTimeout(timeout);\n\n    // Give the page permission to show notifications. This is required for\n    // testing `snap_notify`.\n    await page.browserContext().overridePermissions(url, ['notifications']);\n\n    // `networkidle0` is used to ensure that the page is fully loaded. This\n    // makes it wait for no requests to be made, which guarantees that the page\n    // is ready.\n    await page.goto(url, { waitUntil: 'networkidle0' });\n\n    const browserLog = createModuleLogger(rootLogger, 'browser');\n\n    page\n      // This is fired when the page calls `console.log` or similar.\n      .on('console', (message) => {\n        browserLog(`[${message.type()}] ${message.text()}`);\n      })\n\n      // This is fired when the page throws an error.\n      .on('pageerror', ({ message }) => {\n        browserLog(`[page error] ${message}`);\n      });\n\n    return page;\n  }\n}\n\nexport default SnapsEnvironment;\n"],"names":["assert","createModuleLogger","NodeEnvironment","remote","rootLogger","startServer","getOptions","log","SnapsEnvironment","setup","options","server","enabled","args","browser","headless","push","logLevel","capabilities","browserName","global","snapsEnvironment","teardown","keepAlive","deleteSession","close","url","port","address","simulatorUrl","executionEnvironmentUrl","encodeURIComponent","snapId","createPage","timeout","puppeteer","getPuppeteer","page","newPage","setDefaultTimeout","setDefaultNavigationTimeout","browserContext","overridePermissions","goto","waitUntil","browserLog","on","message","type","text","constructor","context","projectConfig","testEnvironmentOptions"],"mappings":"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"}