{"version":3,"sources":["../../../../src/common/endowments/crypto.ts"],"sourcesContent":["import { rootRealmGlobal } from '../globalObject';\n\nexport const createCrypto = () => {\n  if (\n    'crypto' in rootRealmGlobal &&\n    typeof rootRealmGlobal.crypto === 'object' &&\n    'SubtleCrypto' in rootRealmGlobal &&\n    typeof rootRealmGlobal.SubtleCrypto === 'function'\n  ) {\n    return {\n      crypto: harden(rootRealmGlobal.crypto),\n      SubtleCrypto: harden(rootRealmGlobal.SubtleCrypto),\n    };\n  }\n  // For now, we expose the experimental webcrypto API for Node.js execution environments\n  // TODO: Figure out if this is enough long-term or if we should use a polyfill.\n  /* eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires, n/global-require */\n  const crypto = require('crypto').webcrypto;\n  return {\n    crypto: harden(crypto),\n    SubtleCrypto: harden(crypto.subtle.constructor),\n  } as const;\n};\n\nconst endowmentModule = {\n  names: ['crypto', 'SubtleCrypto'] as const,\n  factory: createCrypto,\n};\nexport default endowmentModule;\n"],"names":["rootRealmGlobal","createCrypto","crypto","SubtleCrypto","harden","require","webcrypto","subtle","constructor","endowmentModule","names","factory"],"mappings":"AAAA,SAASA,eAAe,QAAQ,kBAAkB;AAElD,OAAO,MAAMC,eAAe;IAC1B,IACE,YAAYD,mBACZ,OAAOA,gBAAgBE,MAAM,KAAK,YAClC,kBAAkBF,mBAClB,OAAOA,gBAAgBG,YAAY,KAAK,YACxC;QACA,OAAO;YACLD,QAAQE,OAAOJ,gBAAgBE,MAAM;YACrCC,cAAcC,OAAOJ,gBAAgBG,YAAY;QACnD;IACF;IACA,uFAAuF;IACvF,+EAA+E;IAC/E,wHAAwH,GACxH,MAAMD,SAASG,QAAQ,UAAUC,SAAS;IAC1C,OAAO;QACLJ,QAAQE,OAAOF;QACfC,cAAcC,OAAOF,OAAOK,MAAM,CAACC,WAAW;IAChD;AACF,EAAE;AAEF,MAAMC,kBAAkB;IACtBC,OAAO;QAAC;QAAU;KAAe;IACjCC,SAASV;AACX;AACA,eAAeQ,gBAAgB"}