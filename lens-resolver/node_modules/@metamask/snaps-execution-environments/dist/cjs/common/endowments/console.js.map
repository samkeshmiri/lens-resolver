{"version":3,"sources":["../../../../src/common/endowments/console.ts"],"sourcesContent":["import type { SnapId } from '@metamask/snaps-utils';\nimport { assert } from '@metamask/utils';\n\nimport { rootRealmGlobal } from '../globalObject';\nimport type { EndowmentFactoryOptions } from './commonEndowmentFactory';\n\nexport const consoleAttenuatedMethods = new Set([\n  'log',\n  'assert',\n  'error',\n  'debug',\n  'info',\n  'warn',\n]);\n\n/**\n * A set of all the `console` values that will be passed to the snap. This has\n * all the values that are available in both the browser and Node.js.\n */\nexport const consoleMethods = new Set([\n  'debug',\n  'error',\n  'info',\n  'log',\n  'warn',\n  'dir',\n  'dirxml',\n  'table',\n  'trace',\n  'group',\n  'groupCollapsed',\n  'groupEnd',\n  'clear',\n  'count',\n  'countReset',\n  'assert',\n  'profile',\n  'profileEnd',\n  'time',\n  'timeLog',\n  'timeEnd',\n  'timeStamp',\n  'context',\n]);\n\nconst consoleFunctions = ['log', 'error', 'debug', 'info', 'warn'] as const;\n\ntype ConsoleFunctions = {\n  [Key in typeof consoleFunctions[number]]: typeof rootRealmGlobal.console[Key];\n};\n\n/**\n * Gets the appropriate (prepended) message to pass to one of the attenuated\n * method calls.\n *\n * @param snapId - Id of the snap that we're getting a message for.\n * @param message - The id of the snap that will interact with the endowment.\n * @param args - The array of additional arguments.\n * @returns An array of arguments to be passed into an attenuated console method call.\n */\nfunction getMessage(snapId: SnapId, message: unknown, ...args: unknown[]) {\n  const prefix = `[Snap: ${snapId}]`;\n\n  // If the first argument is a string, prepend the prefix to the message, and keep the\n  // rest of the arguments as-is.\n  if (typeof message === 'string') {\n    return [`${prefix} ${message}`, ...args];\n  }\n\n  // Otherwise, the `message` is an object, array, etc., so add the prefix as a separate\n  // message to the arguments.\n  return [prefix, message, ...args];\n}\n\n/**\n * Create a a {@link console} object, with the same properties as the global\n * {@link console} object, but with some methods replaced.\n *\n * @param options - Factory options used in construction of the endowment.\n * @param options.snapId - The id of the snap that will interact with the endowment.\n * @returns The {@link console} object with the replaced methods.\n */\nfunction createConsole({ snapId }: EndowmentFactoryOptions = {}) {\n  assert(snapId !== undefined);\n  const keys = Object.getOwnPropertyNames(\n    rootRealmGlobal.console,\n  ) as (keyof typeof console)[];\n\n  const attenuatedConsole = keys.reduce((target, key) => {\n    if (consoleMethods.has(key) && !consoleAttenuatedMethods.has(key)) {\n      return { ...target, [key]: rootRealmGlobal.console[key] };\n    }\n\n    return target;\n  }, {});\n\n  return harden({\n    console: {\n      ...attenuatedConsole,\n      assert: (\n        value: any,\n        message?: string | undefined,\n        ...optionalParams: any[]\n      ) => {\n        rootRealmGlobal.console.assert(\n          value,\n          ...getMessage(snapId, message, ...optionalParams),\n        );\n      },\n      ...consoleFunctions.reduce<ConsoleFunctions>((target, key) => {\n        return {\n          ...target,\n          [key]: (message?: unknown, ...optionalParams: any[]) => {\n            rootRealmGlobal.console[key](\n              ...getMessage(snapId, message, ...optionalParams),\n            );\n          },\n        };\n      }, {} as ConsoleFunctions),\n    },\n  });\n}\n\nconst endowmentModule = {\n  names: ['console'] as const,\n  factory: createConsole,\n};\n\nexport default endowmentModule;\n"],"names":["consoleAttenuatedMethods","consoleMethods","Set","consoleFunctions","getMessage","snapId","message","args","prefix","createConsole","assert","undefined","keys","Object","getOwnPropertyNames","rootRealmGlobal","console","attenuatedConsole","reduce","target","key","has","harden","value","optionalParams","endowmentModule","names","factory"],"mappings":";;;;;;;;;;;IAMaA,wBAAwB;eAAxBA;;IAaAC,cAAc;eAAdA;;IA6Gb,OAA+B;eAA/B;;;uBA/HuB;8BAES;AAGzB,MAAMD,2BAA2B,IAAIE,IAAI;IAC9C;IACA;IACA;IACA;IACA;IACA;CACD;AAMM,MAAMD,iBAAiB,IAAIC,IAAI;IACpC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAED,MAAMC,mBAAmB;IAAC;IAAO;IAAS;IAAS;IAAQ;CAAO;AAMlE;;;;;;;;CAQC,GACD,SAASC,WAAWC,MAAc,EAAEC,OAAgB,EAAE,GAAGC,IAAe;IACtE,MAAMC,SAAS,CAAC,OAAO,EAAEH,OAAO,CAAC,CAAC;IAElC,qFAAqF;IACrF,+BAA+B;IAC/B,IAAI,OAAOC,YAAY,UAAU;QAC/B,OAAO;YAAC,CAAC,EAAEE,OAAO,CAAC,EAAEF,QAAQ,CAAC;eAAKC;SAAK;IAC1C;IAEA,sFAAsF;IACtF,4BAA4B;IAC5B,OAAO;QAACC;QAAQF;WAAYC;KAAK;AACnC;AAEA;;;;;;;CAOC,GACD,SAASE,cAAc,EAAEJ,MAAM,EAA2B,GAAG,CAAC,CAAC;IAC7DK,IAAAA,aAAM,EAACL,WAAWM;IAClB,MAAMC,OAAOC,OAAOC,mBAAmB,CACrCC,6BAAe,CAACC,OAAO;IAGzB,MAAMC,oBAAoBL,KAAKM,MAAM,CAAC,CAACC,QAAQC;QAC7C,IAAInB,eAAeoB,GAAG,CAACD,QAAQ,CAACpB,yBAAyBqB,GAAG,CAACD,MAAM;YACjE,OAAO;gBAAE,GAAGD,MAAM;gBAAE,CAACC,IAAI,EAAEL,6BAAe,CAACC,OAAO,CAACI,IAAI;YAAC;QAC1D;QAEA,OAAOD;IACT,GAAG,CAAC;IAEJ,OAAOG,OAAO;QACZN,SAAS;YACP,GAAGC,iBAAiB;YACpBP,QAAQ,CACNa,OACAjB,SACA,GAAGkB;gBAEHT,6BAAe,CAACC,OAAO,CAACN,MAAM,CAC5Ba,UACGnB,WAAWC,QAAQC,YAAYkB;YAEtC;YACA,GAAGrB,iBAAiBe,MAAM,CAAmB,CAACC,QAAQC;gBACpD,OAAO;oBACL,GAAGD,MAAM;oBACT,CAACC,IAAI,EAAE,CAACd,SAAmB,GAAGkB;wBAC5BT,6BAAe,CAACC,OAAO,CAACI,IAAI,IACvBhB,WAAWC,QAAQC,YAAYkB;oBAEtC;gBACF;YACF,GAAG,CAAC,EAAsB;QAC5B;IACF;AACF;AAEA,MAAMC,kBAAkB;IACtBC,OAAO;QAAC;KAAU;IAClBC,SAASlB;AACX;MAEA,WAAegB"}