import { parse, print, } from 'graphql';
import { getQueriesWithLastPage } from './findQueriesWithLastPage';
import { getQueries } from './query/getQueries';
import { getIntrospectionQueryMap, } from './query/getIntrospectionQuery';
import { getArguments } from './query';
function getVariables(query, schemaMap, ctx) {
    const { args } = getArguments(schemaMap, query, ctx);
    const variables = [];
    args.forEach((arg) => {
        if (arg.valueKind === 'Variable') {
            variables.push(arg.assignedVariable || arg.uniqueName || arg.name);
        }
        if (arg.valueKind === 'ListValue' && Array.isArray(arg.defaultValue)) {
            arg.defaultValue.forEach((value) => {
                if (value.kind === 'Variable') {
                    variables.push(value.name.value);
                }
            });
        }
    });
    return variables;
}
export async function removeQueriesIfNoNextPage(query, data) {
    var _a;
    const queriesWithLastPage = getQueriesWithLastPage(data);
    if (Object.keys(queriesWithLastPage).length === 0)
        return null;
    const queryDocument = parse(query);
    const queries = getQueries(queryDocument);
    let variablesForRemainingQueryies = [];
    let variablesToDelete = [];
    const ctx = {
        variableNamesMap: {},
    };
    const schemaMap = await getIntrospectionQueryMap();
    queryDocument.definitions[0].selectionSet.selections = queries.filter((query) => {
        var _a;
        const queryName = query.name.value;
        const aliasedQueryName = ((_a = query === null || query === void 0 ? void 0 : query.alias) === null || _a === void 0 ? void 0 : _a.value) || '';
        const queryVariables = getVariables(query, schemaMap, ctx);
        if (queriesWithLastPage[queryName] ||
            queriesWithLastPage[aliasedQueryName]) {
            variablesToDelete = [...variablesToDelete, ...queryVariables];
            return false;
        }
        variablesForRemainingQueryies = [...variablesForRemainingQueryies, ...queryVariables];
        return true;
    });
    // no query was deleted so return null
    if (variablesToDelete.length === 0)
        return null;
    // remove unsed variables
    variablesToDelete = variablesToDelete.filter((deletedVariable) => {
        return !variablesForRemainingQueryies.find((remainingVariable) => {
            return remainingVariable === deletedVariable;
        });
    });
    const defination = queryDocument.definitions[0];
    // eslint-disable-next-line
    // @ts-ignore
    defination.variableDefinitions = (_a = defination.variableDefinitions) === null || _a === void 0 ? void 0 : _a.filter((variable) => {
        return !variablesToDelete.find((deletedVariable) => {
            return (deletedVariable === variable.variable.name.value);
        });
    });
    return print(queryDocument);
}
//# sourceMappingURL=removeQueriesIfNoNextPage.js.map