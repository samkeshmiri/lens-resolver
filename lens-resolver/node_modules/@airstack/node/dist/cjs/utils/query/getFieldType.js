"use strict";
exports.__esModule = true;
exports.getFieldType = void 0;
function getFieldType(schemaMap, fields, path, index) {
    var _a, _b, _c, _d, _e;
    if (index === void 0) { index = 0; }
    if (index === path.length) {
        // eslint-disable-next-line no-console
        console.error(" unable to find the type of ", path.join("/"));
        return [null, false];
    }
    for (var i = 0; i < fields.length; i++) {
        var field = fields[i];
        var kind = (_a = field === null || field === void 0 ? void 0 : field.type) === null || _a === void 0 ? void 0 : _a.kind;
        if (field.name === path[index]) {
            var ofType = field.type.ofType;
            if (kind === "SCALAR" || kind === "ENUM") {
                return [field.type.name, false];
            }
            if (ofType && (ofType.kind === "SCALAR" || ofType.kind === "ENUM")) {
                return [ofType.name, kind === "NON_NULL"];
            }
            var _ofType = ofType;
            while (_ofType) {
                if (
                // eslint-disable-next-line
                // @ts-ignore
                _ofType.ofType) {
                    if (
                    // eslint-disable-next-line
                    // @ts-ignore
                    _ofType.ofType.kind !== "SCALAR" ||
                        // eslint-disable-next-line
                        // @ts-ignore
                        _ofType.ofType.kind !== "ENUM") {
                        break;
                    }
                    // eslint-disable-next-line
                    // @ts-ignore
                    _ofType = _ofType.ofType;
                }
                else {
                    break;
                }
            }
            if (
            // eslint-disable-next-line
            // @ts-ignore
            ((_b = _ofType === null || _ofType === void 0 ? void 0 : _ofType.ofType) === null || _b === void 0 ? void 0 : _b.kind) === "SCALAR" ||
                // eslint-disable-next-line
                // @ts-ignore
                ((_c = _ofType === null || _ofType === void 0 ? void 0 : _ofType.ofType) === null || _c === void 0 ? void 0 : _c.kind) === "ENUM") {
                // eslint-disable-next-line
                // @ts-ignore
                return [_ofType.ofType.name, _ofType.kind === "NON_NULL"];
            }
            // eslint-disable-next-line
            // @ts-ignore
            var name_1 = (_ofType === null || _ofType === void 0 ? void 0 : _ofType.name) || ((_d = _ofType === null || _ofType === void 0 ? void 0 : _ofType.ofType) === null || _d === void 0 ? void 0 : _d.name) || ((_e = field === null || field === void 0 ? void 0 : field.type) === null || _e === void 0 ? void 0 : _e.name);
            name_1 = name_1.toLowerCase();
            // eslint-disable-next-line
            //@ts-ignore
            var nestedFields = schemaMap[name_1].inputFields;
            return getFieldType(schemaMap, nestedFields, path, index + 1);
        }
    }
    return [null, false];
}
exports.getFieldType = getFieldType;
//# sourceMappingURL=getFieldType.js.map