"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.addCursorVariable = void 0;
var graphql_1 = require("graphql");
var query_1 = require("./query");
var getIntrospectionQuery_1 = require("./query/getIntrospectionQuery");
var moveArgumentsToParams_1 = require("./query/moveArgumentsToParams");
var getQueries_1 = require("./query/getQueries");
var addPageInfoFields_1 = require("./addPageInfoFields");
var config_1 = require("../config");
function getQueriesWithoutCursorAndUpdateContext(queries, schemaMap, globalCtx) {
    var queriesWithCursor = [];
    queries.forEach(function (query) {
        var _a = (0, query_1.getArguments)(schemaMap, query, {
            variableNamesMap: {}
        }), args = _a.args, inputFields = _a.inputFields;
        var cursor = args.find(function (arg) { return arg.name === 'cursor'; });
        var queryName = query.name.value;
        if (!cursor) {
            queriesWithCursor.push({
                queryName: queryName,
                inputFields: inputFields,
                query: query
            });
            return;
        }
        // if cursor value is some fixed value given by user, then we don't need to add variable
        if (cursor.valueKind !== 'Variable')
            return;
        var variableName = cursor.assignedVariable || cursor.uniqueName || cursor.name;
        (0, addPageInfoFields_1.addPageInfoFields)(query, variableName);
        globalCtx.variableNamesMap[variableName] =
            (globalCtx.variableNamesMap[variableName] || 0) + 1;
    });
    return queriesWithCursor;
}
function addVariable(queryString, callback) {
    return __awaiter(this, void 0, void 0, function () {
        var schemaMap_1, queryDocument_1, queries, globalCtx_1, queriesWithoutCursor, updatedQueryString, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, (0, getIntrospectionQuery_1.getIntrospectionQueryMap)()];
                case 1:
                    schemaMap_1 = _a.sent();
                    queryDocument_1 = (0, graphql_1.parse)(queryString);
                    queries = (0, getQueries_1.getQueries)(queryDocument_1);
                    globalCtx_1 = {
                        variableNamesMap: {}
                    };
                    queriesWithoutCursor = getQueriesWithoutCursorAndUpdateContext(queries, schemaMap_1, globalCtx_1);
                    queriesWithoutCursor.forEach(function (_a) {
                        var queryName = _a.queryName, inputFields = _a.inputFields, query = _a.query;
                        var queryInputTypeName = queryName.toLowerCase() + 'input';
                        var queryInputType = schemaMap_1[queryInputTypeName];
                        var querySupportsCursor = queryInputType.inputFields.find(function (field) { return field.name === 'cursor'; });
                        if (!querySupportsCursor) {
                            if (config_1.config.env === 'dev') {
                                console.error("query \"".concat(queryName, "\" does not support pagination."));
                            }
                            return;
                        }
                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                        // @ts-ignore
                        inputFields.push({
                            kind: 'ObjectField',
                            name: {
                                kind: 'Name',
                                value: 'cursor'
                            },
                            value: {
                                kind: 'StringValue'
                            }
                        });
                        // get arguments with cursor, so we can get the args with new args ref
                        var argsWithCursor = (0, query_1.getArguments)(schemaMap_1, query, globalCtx_1).args;
                        var cursor = argsWithCursor.find(function (arg) { return arg.name === 'cursor'; });
                        // cursor should be there, but just in case
                        if (!cursor) {
                            return;
                        }
                        (0, moveArgumentsToParams_1.moveArgumentsToParams)(queryDocument_1, [cursor]);
                        (0, addPageInfoFields_1.addPageInfoFields)(query, cursor.uniqueName || cursor.name);
                    });
                    updatedQueryString = (0, graphql_1.print)(queryDocument_1);
                    callback(updatedQueryString);
                    return [3 /*break*/, 3];
                case 2:
                    error_1 = _a.sent();
                    if (config_1.config.env === 'dev') {
                        console.error('unable to add cursor to query, please make sure the query is valid');
                    }
                    console.error(error_1);
                    callback(queryString);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    });
}
var promiseCache = {};
function addCursorVariable(queryString) {
    return __awaiter(this, void 0, void 0, function () {
        var cachedPromise;
        return __generator(this, function (_a) {
            cachedPromise = promiseCache[queryString];
            if (cachedPromise)
                return [2 /*return*/, cachedPromise];
            promiseCache[queryString] = new Promise(function (resolve) {
                return addVariable(queryString, function (query) {
                    resolve(query);
                    delete promiseCache[queryString];
                });
            });
            return [2 /*return*/, promiseCache[queryString]];
        });
    });
}
exports.addCursorVariable = addCursorVariable;
//# sourceMappingURL=addCursorVariable.js.map