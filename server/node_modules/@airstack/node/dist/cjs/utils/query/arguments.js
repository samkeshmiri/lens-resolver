"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
exports.createArgumentValue = exports.getArgumentsFromInput = void 0;
function getArgumentsFromInput(inputs, ctx, _key) {
    if (_key === void 0) { _key = ""; }
    var data = [];
    inputs.forEach(function (input) {
        var _a, _b, _c;
        var key = _key;
        if (input.kind === "ObjectField" && input.value.kind === "ObjectValue") {
            var _data = getArgumentsFromInput(input.value.fields, ctx, (key += input.name.value + "/"));
            data = __spreadArray(__spreadArray([], data, true), _data, true);
        }
        else {
            key += input.name.value;
            var name_1 = input.name.value;
            var uniqueName = input.name.value;
            if (ctx.variableNamesMap[name_1]) {
                uniqueName = "".concat(name_1).concat(ctx.variableNamesMap[name_1]);
                ctx.variableNamesMap[name_1]++;
            }
            else {
                ctx.variableNamesMap[name_1] = 1;
            }
            data.push({
                path: key.split("/"),
                name: name_1,
                uniqueName: uniqueName,
                valueKind: (_a = input.value) === null || _a === void 0 ? void 0 : _a.kind,
                // eslint-disable-next-line
                // @ts-ignore
                assignedVariable: (_c = (_b = input.value) === null || _b === void 0 ? void 0 : _b.name) === null || _c === void 0 ? void 0 : _c.value,
                defaultValue: input.value.value ||
                    input.value.values,
                ref: input
            });
        }
    });
    return data;
}
exports.getArgumentsFromInput = getArgumentsFromInput;
function createArgumentValue(value) {
    return {
        kind: "Variable",
        name: {
            kind: "Name",
            value: value
        }
    };
}
exports.createArgumentValue = createArgumentValue;
//# sourceMappingURL=arguments.js.map