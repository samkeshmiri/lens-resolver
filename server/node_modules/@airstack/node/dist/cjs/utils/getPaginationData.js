"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
exports.__esModule = true;
exports.getPaginationData = void 0;
var cursor_1 = __importStar(require("./cursor"));
function getPaginationData(_response) {
    var nextCursors = {};
    var prevCursors = {};
    var hasNextPage = false;
    var hasPrevPage = false;
    var response = _response || {};
    for (var queryName in response) {
        var query = response[queryName];
        for (var key in query) {
            if ((0, cursor_1["default"])(key)) {
                var _a = query[key], nextCursor = _a.nextCursor, prevCursor = _a.prevCursor;
                if (nextCursor) {
                    nextCursors[(0, cursor_1.getCursorName)(key)] = nextCursor;
                }
                if (prevCursor) {
                    prevCursors[(0, cursor_1.getCursorName)(key)] = prevCursor;
                }
                if (!hasNextPage) {
                    hasNextPage = Boolean(nextCursor);
                }
                if (!hasPrevPage) {
                    hasPrevPage = Boolean(prevCursor);
                }
            }
        }
    }
    return {
        nextCursors: nextCursors,
        prevCursors: prevCursors,
        hasNextPage: hasNextPage,
        hasPrevPage: hasPrevPage
    };
}
exports.getPaginationData = getPaginationData;
//# sourceMappingURL=getPaginationData.js.map