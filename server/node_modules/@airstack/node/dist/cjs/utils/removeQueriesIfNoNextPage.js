"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
exports.removeQueriesIfNoNextPage = void 0;
var graphql_1 = require("graphql");
var findQueriesWithLastPage_1 = require("./findQueriesWithLastPage");
var getQueries_1 = require("./query/getQueries");
var getIntrospectionQuery_1 = require("./query/getIntrospectionQuery");
var query_1 = require("./query");
function getVariables(query, schemaMap, ctx) {
    var args = (0, query_1.getArguments)(schemaMap, query, ctx).args;
    var variables = [];
    args.forEach(function (arg) {
        if (arg.valueKind === 'Variable') {
            variables.push(arg.assignedVariable || arg.uniqueName || arg.name);
        }
        if (arg.valueKind === 'ListValue' && Array.isArray(arg.defaultValue)) {
            arg.defaultValue.forEach(function (value) {
                if (value.kind === 'Variable') {
                    variables.push(value.name.value);
                }
            });
        }
    });
    return variables;
}
function removeQueriesIfNoNextPage(query, data) {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var queriesWithLastPage, queryDocument, queries, variablesForRemainingQueryies, variablesToDelete, ctx, schemaMap, defination;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    queriesWithLastPage = (0, findQueriesWithLastPage_1.getQueriesWithLastPage)(data);
                    if (Object.keys(queriesWithLastPage).length === 0)
                        return [2 /*return*/, null];
                    queryDocument = (0, graphql_1.parse)(query);
                    queries = (0, getQueries_1.getQueries)(queryDocument);
                    variablesForRemainingQueryies = [];
                    variablesToDelete = [];
                    ctx = {
                        variableNamesMap: {}
                    };
                    return [4 /*yield*/, (0, getIntrospectionQuery_1.getIntrospectionQueryMap)()];
                case 1:
                    schemaMap = _b.sent();
                    queryDocument.definitions[0].selectionSet.selections = queries.filter(function (query) {
                        var _a;
                        var queryName = query.name.value;
                        var aliasedQueryName = ((_a = query === null || query === void 0 ? void 0 : query.alias) === null || _a === void 0 ? void 0 : _a.value) || '';
                        var queryVariables = getVariables(query, schemaMap, ctx);
                        if (queriesWithLastPage[queryName] ||
                            queriesWithLastPage[aliasedQueryName]) {
                            variablesToDelete = __spreadArray(__spreadArray([], variablesToDelete, true), queryVariables, true);
                            return false;
                        }
                        variablesForRemainingQueryies = __spreadArray(__spreadArray([], variablesForRemainingQueryies, true), queryVariables, true);
                        return true;
                    });
                    // no query was deleted so return null
                    if (variablesToDelete.length === 0)
                        return [2 /*return*/, null];
                    // remove unsed variables
                    variablesToDelete = variablesToDelete.filter(function (deletedVariable) {
                        return !variablesForRemainingQueryies.find(function (remainingVariable) {
                            return remainingVariable === deletedVariable;
                        });
                    });
                    defination = queryDocument.definitions[0];
                    // eslint-disable-next-line
                    // @ts-ignore
                    defination.variableDefinitions = (_a = defination.variableDefinitions) === null || _a === void 0 ? void 0 : _a.filter(function (variable) {
                        return !variablesToDelete.find(function (deletedVariable) {
                            return (deletedVariable === variable.variable.name.value);
                        });
                    });
                    return [2 /*return*/, (0, graphql_1.print)(queryDocument)];
            }
        });
    });
}
exports.removeQueriesIfNoNextPage = removeQueriesIfNoNextPage;
//# sourceMappingURL=removeQueriesIfNoNextPage.js.map