"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.fetchQueryWithPagination = void 0;
var addPaginationToQuery_1 = require("../utils/addPaginationToQuery");
var fetcher_1 = require("../utils/fetcher");
var getPaginationData_1 = require("../utils/getPaginationData");
var stringifyObjectValues_1 = require("../utils/stringifyObjectValues");
var removeQueriesIfNoNextPage_1 = require("../utils/removeQueriesIfNoNextPage");
function fetchPaginatedQuery(originalQuery, variables) {
    return __awaiter(this, void 0, void 0, function () {
        function fetch(_query, _variables) {
            return __awaiter(this, void 0, void 0, function () {
                var variables, data, error, _a, response, _error;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            variables = (0, stringifyObjectValues_1.stringifyObjectValues)(_variables || {});
                            data = null;
                            error = null;
                            return [4 /*yield*/, (0, fetcher_1.fetchGql)(_query, variables)];
                        case 1:
                            _a = _b.sent(), response = _a[0], _error = _a[1];
                            data = response;
                            error = _error;
                            paginationData = (0, getPaginationData_1.getPaginationData)(data);
                            lastResponse = data;
                            return [2 /*return*/, {
                                    data: data,
                                    error: error,
                                    hasNextPage: paginationData.hasNextPage,
                                    hasPrevPage: paginationData.hasPrevPage,
                                    getNextPage: handleNext,
                                    getPrevPage: handlePrev
                                }];
                    }
                });
            });
        }
        var query, nextCursorsCache, deletedQueryCache, paginationData, lastResponse, inProgressRequest, handleNext, handlePrev;
        var _this = this;
        return __generator(this, function (_a) {
            query = originalQuery;
            nextCursorsCache = [];
            deletedQueryCache = [];
            paginationData = {
                hasNextPage: false,
                hasPrevPage: false,
                nextCursors: {},
                prevCursors: {}
            };
            lastResponse = null;
            inProgressRequest = null;
            handleNext = function () { return __awaiter(_this, void 0, void 0, function () {
                var upatedQuery;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (inProgressRequest) {
                                return [2 /*return*/, inProgressRequest];
                            }
                            if (!paginationData.hasNextPage) return [3 /*break*/, 2];
                            nextCursorsCache.push(paginationData.nextCursors);
                            return [4 /*yield*/, (0, removeQueriesIfNoNextPage_1.removeQueriesIfNoNextPage)(query, lastResponse)];
                        case 1:
                            upatedQuery = _a.sent();
                            deletedQueryCache.push(upatedQuery
                                ? {
                                    query: query,
                                    cursors: paginationData.nextCursors
                                }
                                : null);
                            if (upatedQuery) {
                                query = upatedQuery;
                            }
                            inProgressRequest = fetch(query, __assign(__assign({}, variables), paginationData.nextCursors))["finally"](function () {
                                inProgressRequest = null;
                            });
                            return [2 /*return*/, inProgressRequest];
                        case 2: return [2 /*return*/, null];
                    }
                });
            }); };
            handlePrev = function () { return __awaiter(_this, void 0, void 0, function () {
                var deletedQuery, cachedCursors, cursors;
                return __generator(this, function (_a) {
                    if (inProgressRequest) {
                        return [2 /*return*/, inProgressRequest];
                    }
                    if (paginationData.hasPrevPage) {
                        nextCursorsCache.pop();
                        deletedQuery = (deletedQueryCache.pop() || {}).query;
                        cachedCursors = {};
                        cursors = {};
                        if (deletedQuery) {
                            // If the previous page query was deleted, we can't use cursors returned by that query to retrieve the previous page.
                            // The cursors used in the deleted query brought us to the current page where the query was removed.
                            // Therefore, we need to use the next cursors from the query preceding the deleted query to navigate to the previous page.
                            cachedCursors = nextCursorsCache.pop() || {};
                            deletedQueryCache.pop();
                            query = deletedQuery;
                            cursors = __assign({}, cachedCursors);
                        }
                        else {
                            cursors = __assign(__assign({}, cachedCursors), paginationData.prevCursors);
                        }
                        inProgressRequest = fetch(query, __assign(__assign({}, variables), cursors))["finally"](function () {
                            inProgressRequest = null;
                        });
                        return [2 /*return*/, inProgressRequest];
                    }
                    return [2 /*return*/, null];
                });
            }); };
            return [2 /*return*/, fetch(query, variables)];
        });
    });
}
function fetchQueryWithPagination(query, variables) {
    return __awaiter(this, void 0, void 0, function () {
        var queryWithPagination;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, addPaginationToQuery_1.addPaginationToQuery)(query)];
                case 1:
                    queryWithPagination = _a.sent();
                    return [2 /*return*/, fetchPaginatedQuery(queryWithPagination, variables || {})];
            }
        });
    });
}
exports.fetchQueryWithPagination = fetchQueryWithPagination;
//# sourceMappingURL=fetchQueryWithPagination.js.map