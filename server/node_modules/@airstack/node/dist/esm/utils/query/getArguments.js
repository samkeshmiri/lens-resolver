import { getArgumentsFromInput } from "./arguments";
import { getFieldType } from "./getFieldType";
export function getArguments(schemaMap, fieldNode, ctx) {
    var _a;
    const queryName = fieldNode.name.value;
    const queryInputTypeName = queryName.toLowerCase() + "input";
    const queryInputType = schemaMap[queryInputTypeName];
    const input = (_a = fieldNode.arguments) === null || _a === void 0 ? void 0 : _a.find((a) => a.name.value === "input");
    const inputFields = (input === null || input === void 0 ? void 0 : input.value).fields;
    const userInputsArgs = [];
    // get type of arguments from queryInputType and store in argumetentType
    queryInputType === null || queryInputType === void 0 ? void 0 : queryInputType.inputFields.forEach((inputField) => {
        const inputName = inputField.name;
        const argument = inputFields.find((arg) => arg.value.kind !== "Variable" && arg.name.value === inputName);
        if (argument) {
            userInputsArgs.push(inputField);
        }
    });
    const args = getArgumentsFromInput(inputFields, ctx);
    args.forEach((input) => {
        const [type, isRequied] = getFieldType(schemaMap, queryInputType.inputFields, input.path);
        input.type = type;
        input.isRequired = isRequied;
    });
    return {
        args,
        inputFields,
    };
}
//# sourceMappingURL=getArguments.js.map